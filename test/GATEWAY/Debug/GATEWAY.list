
GATEWAY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08004c30  08004c30  00014c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005270  08005270  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08005270  08005270  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005270  08005270  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005270  08005270  00015270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005274  08005274  00015274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005278  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000088  08005300  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08005300  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009297  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc7  00000000  00000000  00029348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002af10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  0002b9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fe6  00000000  00000000  0002c388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5e8  00000000  00000000  0004336e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081bb6  00000000  00000000  0004d956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf50c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e90  00000000  00000000  000cf55c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c18 	.word	0x08004c18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08004c18 	.word	0x08004c18

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 800017c:	4b0a      	ldr	r3, [pc, #40]	; (80001a8 <NRF24_DelayMicroSeconds+0x38>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	4a0a      	ldr	r2, [pc, #40]	; (80001ac <NRF24_DelayMicroSeconds+0x3c>)
 8000182:	fba2 2303 	umull	r2, r3, r2, r3
 8000186:	0c9a      	lsrs	r2, r3, #18
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	fb02 f303 	mul.w	r3, r2, r3
 800018e:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000190:	bf00      	nop
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	1e5a      	subs	r2, r3, #1
 8000196:	60fa      	str	r2, [r7, #12]
 8000198:	2b00      	cmp	r3, #0
 800019a:	d1fa      	bne.n	8000192 <NRF24_DelayMicroSeconds+0x22>
}
 800019c:	bf00      	nop
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	20000018 	.word	0x20000018
 80001ac:	165e9f81 	.word	0x165e9f81

080001b0 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d008      	beq.n	80001d0 <NRF24_csn+0x20>
 80001be:	4b0a      	ldr	r3, [pc, #40]	; (80001e8 <NRF24_csn+0x38>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a0a      	ldr	r2, [pc, #40]	; (80001ec <NRF24_csn+0x3c>)
 80001c4:	8811      	ldrh	r1, [r2, #0]
 80001c6:	2201      	movs	r2, #1
 80001c8:	4618      	mov	r0, r3
 80001ca:	f002 f989 	bl	80024e0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80001ce:	e007      	b.n	80001e0 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80001d0:	4b05      	ldr	r3, [pc, #20]	; (80001e8 <NRF24_csn+0x38>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a05      	ldr	r2, [pc, #20]	; (80001ec <NRF24_csn+0x3c>)
 80001d6:	8811      	ldrh	r1, [r2, #0]
 80001d8:	2200      	movs	r2, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f002 f980 	bl	80024e0 <HAL_GPIO_WritePin>
}
 80001e0:	bf00      	nop
 80001e2:	3708      	adds	r7, #8
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	200000bc 	.word	0x200000bc

080001f0 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d008      	beq.n	8000210 <NRF24_ce+0x20>
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <NRF24_ce+0x38>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a0a      	ldr	r2, [pc, #40]	; (800022c <NRF24_ce+0x3c>)
 8000204:	8811      	ldrh	r1, [r2, #0]
 8000206:	2201      	movs	r2, #1
 8000208:	4618      	mov	r0, r3
 800020a:	f002 f969 	bl	80024e0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800020e:	e007      	b.n	8000220 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000210:	4b05      	ldr	r3, [pc, #20]	; (8000228 <NRF24_ce+0x38>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a05      	ldr	r2, [pc, #20]	; (800022c <NRF24_ce+0x3c>)
 8000216:	8811      	ldrh	r1, [r2, #0]
 8000218:	2200      	movs	r2, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f002 f960 	bl	80024e0 <HAL_GPIO_WritePin>
}
 8000220:	bf00      	nop
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	200000b8 	.word	0x200000b8
 800022c:	200000be 	.word	0x200000be

08000230 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800023a:	2000      	movs	r0, #0
 800023c:	f7ff ffb8 	bl	80001b0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 031f 	and.w	r3, r3, #31
 8000246:	b2db      	uxtb	r3, r3
 8000248:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800024a:	f107 010c 	add.w	r1, r7, #12
 800024e:	2364      	movs	r3, #100	; 0x64
 8000250:	2201      	movs	r2, #1
 8000252:	480a      	ldr	r0, [pc, #40]	; (800027c <NRF24_read_register+0x4c>)
 8000254:	f002 fe14 	bl	8002e80 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000258:	f107 030c 	add.w	r3, r7, #12
 800025c:	1c59      	adds	r1, r3, #1
 800025e:	2364      	movs	r3, #100	; 0x64
 8000260:	2201      	movs	r2, #1
 8000262:	4806      	ldr	r0, [pc, #24]	; (800027c <NRF24_read_register+0x4c>)
 8000264:	f002 ff48 	bl	80030f8 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000268:	7b7b      	ldrb	r3, [r7, #13]
 800026a:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 800026c:	2001      	movs	r0, #1
 800026e:	f7ff ff9f 	bl	80001b0 <NRF24_csn>
	return retData;
 8000272:	7bfb      	ldrb	r3, [r7, #15]
}
 8000274:	4618      	mov	r0, r3
 8000276:	3710      	adds	r7, #16
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	200000c0 	.word	0x200000c0

08000280 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	6039      	str	r1, [r7, #0]
 800028a:	71fb      	strb	r3, [r7, #7]
 800028c:	4613      	mov	r3, r2
 800028e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000290:	2000      	movs	r0, #0
 8000292:	f7ff ff8d 	bl	80001b0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	f003 031f 	and.w	r3, r3, #31
 800029c:	b2db      	uxtb	r3, r3
 800029e:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80002a0:	f107 010c 	add.w	r1, r7, #12
 80002a4:	2364      	movs	r3, #100	; 0x64
 80002a6:	2201      	movs	r2, #1
 80002a8:	4808      	ldr	r0, [pc, #32]	; (80002cc <NRF24_read_registerN+0x4c>)
 80002aa:	f002 fde9 	bl	8002e80 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	b29a      	uxth	r2, r3
 80002b2:	2364      	movs	r3, #100	; 0x64
 80002b4:	6839      	ldr	r1, [r7, #0]
 80002b6:	4805      	ldr	r0, [pc, #20]	; (80002cc <NRF24_read_registerN+0x4c>)
 80002b8:	f002 ff1e 	bl	80030f8 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80002bc:	2001      	movs	r0, #1
 80002be:	f7ff ff77 	bl	80001b0 <NRF24_csn>
}
 80002c2:	bf00      	nop
 80002c4:	3710      	adds	r7, #16
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	200000c0 	.word	0x200000c0

080002d0 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	460a      	mov	r2, r1
 80002da:	71fb      	strb	r3, [r7, #7]
 80002dc:	4613      	mov	r3, r2
 80002de:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80002e0:	2000      	movs	r0, #0
 80002e2:	f7ff ff65 	bl	80001b0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	f043 0320 	orr.w	r3, r3, #32
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80002f0:	79bb      	ldrb	r3, [r7, #6]
 80002f2:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80002f4:	f107 010c 	add.w	r1, r7, #12
 80002f8:	2364      	movs	r3, #100	; 0x64
 80002fa:	2202      	movs	r2, #2
 80002fc:	4804      	ldr	r0, [pc, #16]	; (8000310 <NRF24_write_register+0x40>)
 80002fe:	f002 fdbf 	bl	8002e80 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000302:	2001      	movs	r0, #1
 8000304:	f7ff ff54 	bl	80001b0 <NRF24_csn>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	200000c0 	.word	0x200000c0

08000314 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	71fb      	strb	r3, [r7, #7]
 8000320:	4613      	mov	r3, r2
 8000322:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000324:	2000      	movs	r0, #0
 8000326:	f7ff ff43 	bl	80001b0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	f043 0320 	orr.w	r3, r3, #32
 8000330:	b2db      	uxtb	r3, r3
 8000332:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000334:	f107 010c 	add.w	r1, r7, #12
 8000338:	2364      	movs	r3, #100	; 0x64
 800033a:	2201      	movs	r2, #1
 800033c:	4808      	ldr	r0, [pc, #32]	; (8000360 <NRF24_write_registerN+0x4c>)
 800033e:	f002 fd9f 	bl	8002e80 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000342:	79bb      	ldrb	r3, [r7, #6]
 8000344:	b29a      	uxth	r2, r3
 8000346:	2364      	movs	r3, #100	; 0x64
 8000348:	6839      	ldr	r1, [r7, #0]
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <NRF24_write_registerN+0x4c>)
 800034c:	f002 fd98 	bl	8002e80 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000350:	2001      	movs	r0, #1
 8000352:	f7ff ff2d 	bl	80001b0 <NRF24_csn>
}
 8000356:	bf00      	nop
 8000358:	3710      	adds	r7, #16
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	200000c0 	.word	0x200000c0

08000364 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	460b      	mov	r3, r1
 800036e:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000370:	2000      	movs	r0, #0
 8000372:	f7ff ff1d 	bl	80001b0 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000376:	23a0      	movs	r3, #160	; 0xa0
 8000378:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 800037a:	f107 010f 	add.w	r1, r7, #15
 800037e:	2364      	movs	r3, #100	; 0x64
 8000380:	2201      	movs	r2, #1
 8000382:	4808      	ldr	r0, [pc, #32]	; (80003a4 <NRF24_write_payload+0x40>)
 8000384:	f002 fd7c 	bl	8002e80 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000388:	78fb      	ldrb	r3, [r7, #3]
 800038a:	b29a      	uxth	r2, r3
 800038c:	2364      	movs	r3, #100	; 0x64
 800038e:	6879      	ldr	r1, [r7, #4]
 8000390:	4804      	ldr	r0, [pc, #16]	; (80003a4 <NRF24_write_payload+0x40>)
 8000392:	f002 fd75 	bl	8002e80 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000396:	2001      	movs	r0, #1
 8000398:	f7ff ff0a 	bl	80001b0 <NRF24_csn>
}
 800039c:	bf00      	nop
 800039e:	3710      	adds	r7, #16
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	200000c0 	.word	0x200000c0

080003a8 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80003b4:	f000 fa84 	bl	80008c0 <NRF24_getPayloadSize>
 80003b8:	4603      	mov	r3, r0
 80003ba:	461a      	mov	r2, r3
 80003bc:	78fb      	ldrb	r3, [r7, #3]
 80003be:	4293      	cmp	r3, r2
 80003c0:	d303      	bcc.n	80003ca <NRF24_read_payload+0x22>
 80003c2:	f000 fa7d 	bl	80008c0 <NRF24_getPayloadSize>
 80003c6:	4603      	mov	r3, r0
 80003c8:	e000      	b.n	80003cc <NRF24_read_payload+0x24>
 80003ca:	78fb      	ldrb	r3, [r7, #3]
 80003cc:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80003ce:	2000      	movs	r0, #0
 80003d0:	f7ff feee 	bl	80001b0 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80003d4:	2361      	movs	r3, #97	; 0x61
 80003d6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80003d8:	f107 010e 	add.w	r1, r7, #14
 80003dc:	2364      	movs	r3, #100	; 0x64
 80003de:	2201      	movs	r2, #1
 80003e0:	4808      	ldr	r0, [pc, #32]	; (8000404 <NRF24_read_payload+0x5c>)
 80003e2:	f002 fd4d 	bl	8002e80 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80003e6:	7bfb      	ldrb	r3, [r7, #15]
 80003e8:	b29a      	uxth	r2, r3
 80003ea:	2364      	movs	r3, #100	; 0x64
 80003ec:	6879      	ldr	r1, [r7, #4]
 80003ee:	4805      	ldr	r0, [pc, #20]	; (8000404 <NRF24_read_payload+0x5c>)
 80003f0:	f002 fe82 	bl	80030f8 <HAL_SPI_Receive>
	NRF24_csn(1);
 80003f4:	2001      	movs	r0, #1
 80003f6:	f7ff fedb 	bl	80001b0 <NRF24_csn>
}
 80003fa:	bf00      	nop
 80003fc:	3710      	adds	r7, #16
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	200000c0 	.word	0x200000c0

08000408 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 800040c:	21ff      	movs	r1, #255	; 0xff
 800040e:	20e1      	movs	r0, #225	; 0xe1
 8000410:	f7ff ff5e 	bl	80002d0 <NRF24_write_register>
}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}

08000418 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 800041c:	21ff      	movs	r1, #255	; 0xff
 800041e:	20e2      	movs	r0, #226	; 0xe2
 8000420:	f7ff ff56 	bl	80002d0 <NRF24_write_register>
}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}

08000428 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800042e:	2007      	movs	r0, #7
 8000430:	f7ff fefe 	bl	8000230 <NRF24_read_register>
 8000434:	4603      	mov	r3, r0
 8000436:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000438:	79fb      	ldrb	r3, [r7, #7]
}
 800043a:	4618      	mov	r0, r3
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000444:	b082      	sub	sp, #8
 8000446:	b580      	push	{r7, lr}
 8000448:	b084      	sub	sp, #16
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
 800044e:	61fb      	str	r3, [r7, #28]
 8000450:	460b      	mov	r3, r1
 8000452:	807b      	strh	r3, [r7, #2]
 8000454:	4613      	mov	r3, r2
 8000456:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000458:	4b66      	ldr	r3, [pc, #408]	; (80005f4 <NRF24_begin+0x1b0>)
 800045a:	4618      	mov	r0, r3
 800045c:	f107 031c 	add.w	r3, r7, #28
 8000460:	2258      	movs	r2, #88	; 0x58
 8000462:	4619      	mov	r1, r3
 8000464:	f003 ff56 	bl	8004314 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000468:	4a63      	ldr	r2, [pc, #396]	; (80005f8 <NRF24_begin+0x1b4>)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800046e:	4a63      	ldr	r2, [pc, #396]	; (80005fc <NRF24_begin+0x1b8>)
 8000470:	887b      	ldrh	r3, [r7, #2]
 8000472:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000474:	4a62      	ldr	r2, [pc, #392]	; (8000600 <NRF24_begin+0x1bc>)
 8000476:	883b      	ldrh	r3, [r7, #0]
 8000478:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 800047a:	2001      	movs	r0, #1
 800047c:	f7ff fe98 	bl	80001b0 <NRF24_csn>
	NRF24_ce(0);
 8000480:	2000      	movs	r0, #0
 8000482:	f7ff feb5 	bl	80001f0 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000486:	2005      	movs	r0, #5
 8000488:	f001 fccc 	bl	8001e24 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 800048c:	2108      	movs	r1, #8
 800048e:	2000      	movs	r0, #0
 8000490:	f7ff ff1e 	bl	80002d0 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000494:	213f      	movs	r1, #63	; 0x3f
 8000496:	2001      	movs	r0, #1
 8000498:	f7ff ff1a 	bl	80002d0 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 800049c:	2103      	movs	r1, #3
 800049e:	2002      	movs	r0, #2
 80004a0:	f7ff ff16 	bl	80002d0 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80004a4:	2103      	movs	r1, #3
 80004a6:	2003      	movs	r0, #3
 80004a8:	f7ff ff12 	bl	80002d0 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80004ac:	2103      	movs	r1, #3
 80004ae:	2004      	movs	r0, #4
 80004b0:	f7ff ff0e 	bl	80002d0 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80004b4:	2102      	movs	r1, #2
 80004b6:	2005      	movs	r0, #5
 80004b8:	f7ff ff0a 	bl	80002d0 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80004bc:	210f      	movs	r1, #15
 80004be:	2006      	movs	r0, #6
 80004c0:	f7ff ff06 	bl	80002d0 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80004c4:	210e      	movs	r1, #14
 80004c6:	2007      	movs	r0, #7
 80004c8:	f7ff ff02 	bl	80002d0 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80004cc:	2100      	movs	r1, #0
 80004ce:	2008      	movs	r0, #8
 80004d0:	f7ff fefe 	bl	80002d0 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80004d4:	2100      	movs	r1, #0
 80004d6:	2009      	movs	r0, #9
 80004d8:	f7ff fefa 	bl	80002d0 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80004dc:	23e7      	movs	r3, #231	; 0xe7
 80004de:	733b      	strb	r3, [r7, #12]
 80004e0:	23e7      	movs	r3, #231	; 0xe7
 80004e2:	72fb      	strb	r3, [r7, #11]
 80004e4:	23e7      	movs	r3, #231	; 0xe7
 80004e6:	72bb      	strb	r3, [r7, #10]
 80004e8:	23e7      	movs	r3, #231	; 0xe7
 80004ea:	727b      	strb	r3, [r7, #9]
 80004ec:	23e7      	movs	r3, #231	; 0xe7
 80004ee:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80004f0:	f107 0308 	add.w	r3, r7, #8
 80004f4:	2205      	movs	r2, #5
 80004f6:	4619      	mov	r1, r3
 80004f8:	200a      	movs	r0, #10
 80004fa:	f7ff ff0b 	bl	8000314 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80004fe:	23c2      	movs	r3, #194	; 0xc2
 8000500:	733b      	strb	r3, [r7, #12]
 8000502:	23c2      	movs	r3, #194	; 0xc2
 8000504:	72fb      	strb	r3, [r7, #11]
 8000506:	23c2      	movs	r3, #194	; 0xc2
 8000508:	72bb      	strb	r3, [r7, #10]
 800050a:	23c2      	movs	r3, #194	; 0xc2
 800050c:	727b      	strb	r3, [r7, #9]
 800050e:	23c2      	movs	r3, #194	; 0xc2
 8000510:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000512:	f107 0308 	add.w	r3, r7, #8
 8000516:	2205      	movs	r2, #5
 8000518:	4619      	mov	r1, r3
 800051a:	200b      	movs	r0, #11
 800051c:	f7ff fefa 	bl	8000314 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000520:	21c3      	movs	r1, #195	; 0xc3
 8000522:	200c      	movs	r0, #12
 8000524:	f7ff fed4 	bl	80002d0 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000528:	21c4      	movs	r1, #196	; 0xc4
 800052a:	200d      	movs	r0, #13
 800052c:	f7ff fed0 	bl	80002d0 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000530:	21c5      	movs	r1, #197	; 0xc5
 8000532:	200e      	movs	r0, #14
 8000534:	f7ff fecc 	bl	80002d0 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000538:	21c6      	movs	r1, #198	; 0xc6
 800053a:	200f      	movs	r0, #15
 800053c:	f7ff fec8 	bl	80002d0 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000540:	23e7      	movs	r3, #231	; 0xe7
 8000542:	733b      	strb	r3, [r7, #12]
 8000544:	23e7      	movs	r3, #231	; 0xe7
 8000546:	72fb      	strb	r3, [r7, #11]
 8000548:	23e7      	movs	r3, #231	; 0xe7
 800054a:	72bb      	strb	r3, [r7, #10]
 800054c:	23e7      	movs	r3, #231	; 0xe7
 800054e:	727b      	strb	r3, [r7, #9]
 8000550:	23e7      	movs	r3, #231	; 0xe7
 8000552:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000554:	f107 0308 	add.w	r3, r7, #8
 8000558:	2205      	movs	r2, #5
 800055a:	4619      	mov	r1, r3
 800055c:	2010      	movs	r0, #16
 800055e:	f7ff fed9 	bl	8000314 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000562:	2100      	movs	r1, #0
 8000564:	2011      	movs	r0, #17
 8000566:	f7ff feb3 	bl	80002d0 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800056a:	2100      	movs	r1, #0
 800056c:	2012      	movs	r0, #18
 800056e:	f7ff feaf 	bl	80002d0 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000572:	2100      	movs	r1, #0
 8000574:	2013      	movs	r0, #19
 8000576:	f7ff feab 	bl	80002d0 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800057a:	2100      	movs	r1, #0
 800057c:	2014      	movs	r0, #20
 800057e:	f7ff fea7 	bl	80002d0 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000582:	2100      	movs	r1, #0
 8000584:	2015      	movs	r0, #21
 8000586:	f7ff fea3 	bl	80002d0 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800058a:	2100      	movs	r1, #0
 800058c:	2016      	movs	r0, #22
 800058e:	f7ff fe9f 	bl	80002d0 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000592:	f000 fb25 	bl	8000be0 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000596:	2100      	movs	r1, #0
 8000598:	201c      	movs	r0, #28
 800059a:	f7ff fe99 	bl	80002d0 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800059e:	2100      	movs	r1, #0
 80005a0:	201d      	movs	r0, #29
 80005a2:	f7ff fe95 	bl	80002d0 <NRF24_write_register>
	printRadioSettings();
 80005a6:	f000 fb35 	bl	8000c14 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80005aa:	210f      	movs	r1, #15
 80005ac:	200f      	movs	r0, #15
 80005ae:	f000 f941 	bl	8000834 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80005b2:	2003      	movs	r0, #3
 80005b4:	f000 f9c3 	bl	800093e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80005b8:	2001      	movs	r0, #1
 80005ba:	f000 f9f9 	bl	80009b0 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80005be:	2002      	movs	r0, #2
 80005c0:	f000 fa3c 	bl	8000a3c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80005c4:	f000 f98e 	bl	80008e4 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80005c8:	2020      	movs	r0, #32
 80005ca:	f000 f963 	bl	8000894 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80005ce:	f000 fafe 	bl	8000bce <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80005d2:	204c      	movs	r0, #76	; 0x4c
 80005d4:	f000 f949 	bl	800086a <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80005d8:	f7ff ff16 	bl	8000408 <NRF24_flush_tx>
	NRF24_flush_rx();
 80005dc:	f7ff ff1c 	bl	8000418 <NRF24_flush_rx>
	
	NRF24_powerDown();
 80005e0:	f000 fa54 	bl	8000a8c <NRF24_powerDown>
	
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005ee:	b002      	add	sp, #8
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200000c0 	.word	0x200000c0
 80005f8:	200000b8 	.word	0x200000b8
 80005fc:	200000bc 	.word	0x200000bc
 8000600:	200000be 	.word	0x200000be

08000604 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000608:	2000      	movs	r0, #0
 800060a:	f7ff fe11 	bl	8000230 <NRF24_read_register>
 800060e:	4603      	mov	r3, r0
 8000610:	f043 0303 	orr.w	r3, r3, #3
 8000614:	b2db      	uxtb	r3, r3
 8000616:	4619      	mov	r1, r3
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff fe59 	bl	80002d0 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <NRF24_startListening+0x48>)
 8000620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000624:	4313      	orrs	r3, r2
 8000626:	d004      	beq.n	8000632 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000628:	2205      	movs	r2, #5
 800062a:	4908      	ldr	r1, [pc, #32]	; (800064c <NRF24_startListening+0x48>)
 800062c:	200a      	movs	r0, #10
 800062e:	f7ff fe71 	bl	8000314 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 8000632:	f7ff fee9 	bl	8000408 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000636:	f7ff feef 	bl	8000418 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 800063a:	2001      	movs	r0, #1
 800063c:	f7ff fdd8 	bl	80001f0 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000640:	2096      	movs	r0, #150	; 0x96
 8000642:	f7ff fd95 	bl	8000170 <NRF24_DelayMicroSeconds>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200000a8 	.word	0x200000a8

08000650 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000654:	2000      	movs	r0, #0
 8000656:	f7ff fdcb 	bl	80001f0 <NRF24_ce>
	NRF24_flush_tx();
 800065a:	f7ff fed5 	bl	8000408 <NRF24_flush_tx>
	NRF24_flush_rx();
 800065e:	f7ff fedb 	bl	8000418 <NRF24_flush_rx>
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	460b      	mov	r3, r1
 8000672:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000674:	f000 faab 	bl	8000bce <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000678:	78fb      	ldrb	r3, [r7, #3]
 800067a:	4619      	mov	r1, r3
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f000 fa44 	bl	8000b0a <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000682:	f001 fbc5 	bl	8001e10 <HAL_GetTick>
 8000686:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000688:	230a      	movs	r3, #10
 800068a:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 800068c:	f107 030d 	add.w	r3, r7, #13
 8000690:	2201      	movs	r2, #1
 8000692:	4619      	mov	r1, r3
 8000694:	2008      	movs	r0, #8
 8000696:	f7ff fdf3 	bl	8000280 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 800069a:	f7ff fec5 	bl	8000428 <NRF24_get_status>
 800069e:	4603      	mov	r3, r0
 80006a0:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d107      	bne.n	80006bc <NRF24_write+0x54>
 80006ac:	f001 fbb0 	bl	8001e10 <HAL_GetTick>
 80006b0:	4602      	mov	r2, r0
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	693a      	ldr	r2, [r7, #16]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d8e7      	bhi.n	800068c <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 80006bc:	f107 010b 	add.w	r1, r7, #11
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	4a0c      	ldr	r2, [pc, #48]	; (80006f8 <NRF24_write+0x90>)
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 fa4e 	bl	8000b68 <NRF24_whatHappened>
	retStatus = tx_ok;
 80006cc:	7b3b      	ldrb	r3, [r7, #12]
 80006ce:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <NRF24_write+0x90>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d005      	beq.n	80006e4 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 80006d8:	f000 f8fc 	bl	80008d4 <NRF24_getDynamicPayloadSize>
 80006dc:	4603      	mov	r3, r0
 80006de:	461a      	mov	r2, r3
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <NRF24_write+0x94>)
 80006e2:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 80006e4:	f000 f80c 	bl	8000700 <NRF24_available>
	NRF24_flush_tx();
 80006e8:	f7ff fe8e 	bl	8000408 <NRF24_flush_tx>
	return retStatus;
 80006ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3718      	adds	r7, #24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	200000b0 	.word	0x200000b0
 80006fc:	200000b1 	.word	0x200000b1

08000700 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000704:	2000      	movs	r0, #0
 8000706:	f000 f9d0 	bl	8000aaa <NRF24_availablePipe>
 800070a:	4603      	mov	r3, r0
}
 800070c:	4618      	mov	r0, r3
 800070e:	bd80      	pop	{r7, pc}

08000710 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 800071c:	78fb      	ldrb	r3, [r7, #3]
 800071e:	4619      	mov	r1, r3
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff fe41 	bl	80003a8 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000726:	2017      	movs	r0, #23
 8000728:	f7ff fd82 	bl	8000230 <NRF24_read_register>
 800072c:	4603      	mov	r3, r0
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000734:	f7ff fe70 	bl	8000418 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000738:	f000 f8cc 	bl	80008d4 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	2b00      	cmp	r3, #0
 8000740:	bf14      	ite	ne
 8000742:	2301      	movne	r3, #1
 8000744:	2300      	moveq	r3, #0
 8000746:	b2db      	uxtb	r3, r3
}
 8000748:	4618      	mov	r0, r3
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 800075a:	463b      	mov	r3, r7
 800075c:	2205      	movs	r2, #5
 800075e:	4619      	mov	r1, r3
 8000760:	200a      	movs	r0, #10
 8000762:	f7ff fdd7 	bl	8000314 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000766:	463b      	mov	r3, r7
 8000768:	2205      	movs	r2, #5
 800076a:	4619      	mov	r1, r3
 800076c:	2010      	movs	r0, #16
 800076e:	f7ff fdd1 	bl	8000314 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000772:	2320      	movs	r3, #32
 8000774:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000776:	4b07      	ldr	r3, [pc, #28]	; (8000794 <NRF24_openWritingPipe+0x44>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	7bfa      	ldrb	r2, [r7, #15]
 800077c:	4293      	cmp	r3, r2
 800077e:	bf28      	it	cs
 8000780:	4613      	movcs	r3, r2
 8000782:	b2db      	uxtb	r3, r3
 8000784:	4619      	mov	r1, r3
 8000786:	2011      	movs	r0, #17
 8000788:	f7ff fda2 	bl	80002d0 <NRF24_write_register>
}
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200000b2 	.word	0x200000b2

08000798 <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4601      	mov	r1, r0
 80007a0:	e9c7 2300 	strd	r2, r3, [r7]
 80007a4:	460b      	mov	r3, r1
 80007a6:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d104      	bne.n	80007b8 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 80007ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80007b2:	491c      	ldr	r1, [pc, #112]	; (8000824 <NRF24_openReadingPipe+0x8c>)
 80007b4:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	2b06      	cmp	r3, #6
 80007bc:	d82d      	bhi.n	800081a <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d808      	bhi.n	80007d6 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	4a18      	ldr	r2, [pc, #96]	; (8000828 <NRF24_openReadingPipe+0x90>)
 80007c8:	5cd3      	ldrb	r3, [r2, r3]
 80007ca:	4639      	mov	r1, r7
 80007cc:	2205      	movs	r2, #5
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fda0 	bl	8000314 <NRF24_write_registerN>
 80007d4:	e007      	b.n	80007e6 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	4a13      	ldr	r2, [pc, #76]	; (8000828 <NRF24_openReadingPipe+0x90>)
 80007da:	5cd3      	ldrb	r3, [r2, r3]
 80007dc:	4639      	mov	r1, r7
 80007de:	2201      	movs	r2, #1
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fd97 	bl	8000314 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	4a10      	ldr	r2, [pc, #64]	; (800082c <NRF24_openReadingPipe+0x94>)
 80007ea:	5cd3      	ldrb	r3, [r2, r3]
 80007ec:	4a10      	ldr	r2, [pc, #64]	; (8000830 <NRF24_openReadingPipe+0x98>)
 80007ee:	7812      	ldrb	r2, [r2, #0]
 80007f0:	4611      	mov	r1, r2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fd6c 	bl	80002d0 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 80007f8:	2002      	movs	r0, #2
 80007fa:	f7ff fd19 	bl	8000230 <NRF24_read_register>
 80007fe:	4603      	mov	r3, r0
 8000800:	b25a      	sxtb	r2, r3
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	2101      	movs	r1, #1
 8000806:	fa01 f303 	lsl.w	r3, r1, r3
 800080a:	b25b      	sxtb	r3, r3
 800080c:	4313      	orrs	r3, r2
 800080e:	b25b      	sxtb	r3, r3
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4619      	mov	r1, r3
 8000814:	2002      	movs	r0, #2
 8000816:	f7ff fd5b 	bl	80002d0 <NRF24_write_register>
	}
	
}
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200000a8 	.word	0x200000a8
 8000828:	08005214 	.word	0x08005214
 800082c:	0800521c 	.word	0x0800521c
 8000830:	200000b2 	.word	0x200000b2

08000834 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	460a      	mov	r2, r1
 800083e:	71fb      	strb	r3, [r7, #7]
 8000840:	4613      	mov	r3, r2
 8000842:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	011b      	lsls	r3, r3, #4
 8000848:	b25a      	sxtb	r2, r3
 800084a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800084e:	f003 030f 	and.w	r3, r3, #15
 8000852:	b25b      	sxtb	r3, r3
 8000854:	4313      	orrs	r3, r2
 8000856:	b25b      	sxtb	r3, r3
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4619      	mov	r1, r3
 800085c:	2004      	movs	r0, #4
 800085e:	f7ff fd37 	bl	80002d0 <NRF24_write_register>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b084      	sub	sp, #16
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000874:	237f      	movs	r3, #127	; 0x7f
 8000876:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000878:	7bfa      	ldrb	r2, [r7, #15]
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	4293      	cmp	r3, r2
 800087e:	bf28      	it	cs
 8000880:	4613      	movcs	r3, r2
 8000882:	b2db      	uxtb	r3, r3
 8000884:	4619      	mov	r1, r3
 8000886:	2005      	movs	r0, #5
 8000888:	f7ff fd22 	bl	80002d0 <NRF24_write_register>
}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800089e:	2320      	movs	r3, #32
 80008a0:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80008a2:	7bfa      	ldrb	r2, [r7, #15]
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	4293      	cmp	r3, r2
 80008a8:	bf28      	it	cs
 80008aa:	4613      	movcs	r3, r2
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4b03      	ldr	r3, [pc, #12]	; (80008bc <NRF24_setPayloadSize+0x28>)
 80008b0:	701a      	strb	r2, [r3, #0]
}
 80008b2:	bf00      	nop
 80008b4:	3714      	adds	r7, #20
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	200000b2 	.word	0x200000b2

080008c0 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
	return payload_size;
 80008c4:	4b02      	ldr	r3, [pc, #8]	; (80008d0 <NRF24_getPayloadSize+0x10>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	200000b2 	.word	0x200000b2

080008d4 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80008d8:	2060      	movs	r0, #96	; 0x60
 80008da:	f7ff fca9 	bl	8000230 <NRF24_read_register>
 80008de:	4603      	mov	r3, r0
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80008e8:	201d      	movs	r0, #29
 80008ea:	f7ff fca1 	bl	8000230 <NRF24_read_register>
 80008ee:	4603      	mov	r3, r0
 80008f0:	f023 0304 	bic.w	r3, r3, #4
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	4619      	mov	r1, r3
 80008f8:	201d      	movs	r0, #29
 80008fa:	f7ff fce9 	bl	80002d0 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 80008fe:	2100      	movs	r1, #0
 8000900:	201c      	movs	r0, #28
 8000902:	f7ff fce5 	bl	80002d0 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000906:	4b02      	ldr	r3, [pc, #8]	; (8000910 <NRF24_disableDynamicPayloads+0x2c>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200000b3 	.word	0x200000b3

08000914 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d004      	beq.n	800092e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000924:	213f      	movs	r1, #63	; 0x3f
 8000926:	2001      	movs	r0, #1
 8000928:	f7ff fcd2 	bl	80002d0 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 800092c:	e003      	b.n	8000936 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800092e:	2100      	movs	r1, #0
 8000930:	2001      	movs	r0, #1
 8000932:	f7ff fccd 	bl	80002d0 <NRF24_write_register>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b084      	sub	sp, #16
 8000942:	af00      	add	r7, sp, #0
 8000944:	4603      	mov	r3, r0
 8000946:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000948:	2006      	movs	r0, #6
 800094a:	f7ff fc71 	bl	8000230 <NRF24_read_register>
 800094e:	4603      	mov	r3, r0
 8000950:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	f023 0306 	bic.w	r3, r3, #6
 8000958:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b03      	cmp	r3, #3
 800095e:	d104      	bne.n	800096a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	f043 0306 	orr.w	r3, r3, #6
 8000966:	73fb      	strb	r3, [r7, #15]
 8000968:	e019      	b.n	800099e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b02      	cmp	r3, #2
 800096e:	d104      	bne.n	800097a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	f043 0304 	orr.w	r3, r3, #4
 8000976:	73fb      	strb	r3, [r7, #15]
 8000978:	e011      	b.n	800099e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d104      	bne.n	800098a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	f043 0302 	orr.w	r3, r3, #2
 8000986:	73fb      	strb	r3, [r7, #15]
 8000988:	e009      	b.n	800099e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d006      	beq.n	800099e <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	2b04      	cmp	r3, #4
 8000994:	d103      	bne.n	800099e <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000996:	7bfb      	ldrb	r3, [r7, #15]
 8000998:	f043 0306 	orr.w	r3, r3, #6
 800099c:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	4619      	mov	r1, r3
 80009a2:	2006      	movs	r0, #6
 80009a4:	f7ff fc94 	bl	80002d0 <NRF24_write_register>
}
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80009ba:	2300      	movs	r3, #0
 80009bc:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80009be:	2006      	movs	r0, #6
 80009c0:	f7ff fc36 	bl	8000230 <NRF24_read_register>
 80009c4:	4603      	mov	r3, r0
 80009c6:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <NRF24_setDataRate+0x88>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80009ce:	7bbb      	ldrb	r3, [r7, #14]
 80009d0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80009d4:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d107      	bne.n	80009ec <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <NRF24_setDataRate+0x88>)
 80009de:	2200      	movs	r2, #0
 80009e0:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 80009e2:	7bbb      	ldrb	r3, [r7, #14]
 80009e4:	f043 0320 	orr.w	r3, r3, #32
 80009e8:	73bb      	strb	r3, [r7, #14]
 80009ea:	e00d      	b.n	8000a08 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d107      	bne.n	8000a02 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <NRF24_setDataRate+0x88>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80009f8:	7bbb      	ldrb	r3, [r7, #14]
 80009fa:	f043 0308 	orr.w	r3, r3, #8
 80009fe:	73bb      	strb	r3, [r7, #14]
 8000a00:	e002      	b.n	8000a08 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <NRF24_setDataRate+0x88>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000a08:	7bbb      	ldrb	r3, [r7, #14]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	2006      	movs	r0, #6
 8000a0e:	f7ff fc5f 	bl	80002d0 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000a12:	2006      	movs	r0, #6
 8000a14:	f7ff fc0c 	bl	8000230 <NRF24_read_register>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	7bbb      	ldrb	r3, [r7, #14]
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d102      	bne.n	8000a28 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000a22:	2301      	movs	r3, #1
 8000a24:	73fb      	strb	r3, [r7, #15]
 8000a26:	e002      	b.n	8000a2e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <NRF24_setDataRate+0x88>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200000b4 	.word	0x200000b4

08000a3c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000a46:	2000      	movs	r0, #0
 8000a48:	f7ff fbf2 	bl	8000230 <NRF24_read_register>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	f023 030c 	bic.w	r3, r3, #12
 8000a52:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d00f      	beq.n	8000a7a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d104      	bne.n	8000a6a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
 8000a62:	f043 0308 	orr.w	r3, r3, #8
 8000a66:	73fb      	strb	r3, [r7, #15]
 8000a68:	e007      	b.n	8000a7a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	f043 0308 	orr.w	r3, r3, #8
 8000a70:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f7ff fc26 	bl	80002d0 <NRF24_write_register>
}
 8000a84:	bf00      	nop
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fbcd 	bl	8000230 <NRF24_read_register>
 8000a96:	4603      	mov	r3, r0
 8000a98:	f023 0302 	bic.w	r3, r3, #2
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f7ff fc15 	bl	80002d0 <NRF24_write_register>
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b084      	sub	sp, #16
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000ab2:	f7ff fcb9 	bl	8000428 <NRF24_get_status>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	bf14      	ite	ne
 8000ac4:	2301      	movne	r3, #1
 8000ac6:	2300      	moveq	r3, #0
 8000ac8:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000aca:	7bbb      	ldrb	r3, [r7, #14]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d017      	beq.n	8000b00 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d007      	beq.n	8000ae6 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	085b      	lsrs	r3, r3, #1
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	f003 0307 	and.w	r3, r3, #7
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000ae6:	2140      	movs	r1, #64	; 0x40
 8000ae8:	2007      	movs	r0, #7
 8000aea:	f7ff fbf1 	bl	80002d0 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	f003 0320 	and.w	r3, r3, #32
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d003      	beq.n	8000b00 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000af8:	2120      	movs	r1, #32
 8000afa:	2007      	movs	r0, #7
 8000afc:	f7ff fbe8 	bl	80002d0 <NRF24_write_register>
    }
  }
  return result;
 8000b00:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	460b      	mov	r3, r1
 8000b14:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f7ff fb6a 	bl	80001f0 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fb87 	bl	8000230 <NRF24_read_register>
 8000b22:	4603      	mov	r3, r0
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	f023 0301 	bic.w	r3, r3, #1
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	4619      	mov	r1, r3
 8000b32:	2000      	movs	r0, #0
 8000b34:	f7ff fbcc 	bl	80002d0 <NRF24_write_register>
  NRF24_ce(1);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f7ff fb59 	bl	80001f0 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8000b3e:	2096      	movs	r0, #150	; 0x96
 8000b40:	f7ff fb16 	bl	8000170 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000b44:	78fb      	ldrb	r3, [r7, #3]
 8000b46:	4619      	mov	r1, r3
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff fc0b 	bl	8000364 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f7ff fb4e 	bl	80001f0 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000b54:	200f      	movs	r0, #15
 8000b56:	f7ff fb0b 	bl	8000170 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f7ff fb48 	bl	80001f0 <NRF24_ce>
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000b74:	f7ff fc58 	bl	8000428 <NRF24_get_status>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000b82:	2170      	movs	r1, #112	; 0x70
 8000b84:	2007      	movs	r0, #7
 8000b86:	f7ff fba3 	bl	80002d0 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000b8a:	7dfb      	ldrb	r3, [r7, #23]
 8000b8c:	f003 0320 	and.w	r3, r3, #32
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	bf14      	ite	ne
 8000b94:	2301      	movne	r3, #1
 8000b96:	2300      	moveq	r3, #0
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000b9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ba0:	f003 0310 	and.w	r3, r3, #16
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	bf14      	ite	ne
 8000ba8:	2301      	movne	r3, #1
 8000baa:	2300      	moveq	r3, #0
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000bb2:	7dfb      	ldrb	r3, [r7, #23]
 8000bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	bf14      	ite	ne
 8000bbc:	2301      	movne	r3, #1
 8000bbe:	2300      	moveq	r3, #0
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	701a      	strb	r2, [r3, #0]
}
 8000bc6:	bf00      	nop
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000bd2:	2170      	movs	r1, #112	; 0x70
 8000bd4:	2007      	movs	r0, #7
 8000bd6:	f7ff fb7b 	bl	80002d0 <NRF24_write_register>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000be6:	2000      	movs	r0, #0
 8000be8:	f7ff fae2 	bl	80001b0 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000bec:	2350      	movs	r3, #80	; 0x50
 8000bee:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000bf0:	2373      	movs	r3, #115	; 0x73
 8000bf2:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000bf4:	1d39      	adds	r1, r7, #4
 8000bf6:	2364      	movs	r3, #100	; 0x64
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <NRF24_ACTIVATE_cmd+0x30>)
 8000bfc:	f002 f940 	bl	8002e80 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000c00:	2001      	movs	r0, #1
 8000c02:	f7ff fad5 	bl	80001b0 <NRF24_csn>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000c0 	.word	0x200000c0

08000c14 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c16:	b0a1      	sub	sp, #132	; 0x84
 8000c18:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	49c3      	ldr	r1, [pc, #780]	; (8000f2c <printRadioSettings+0x318>)
 8000c20:	4618      	mov	r0, r3
 8000c22:	f003 fb8d 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fa98 	bl	8000160 <strlen>
 8000c30:	4603      	mov	r3, r0
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	f107 0108 	add.w	r1, r7, #8
 8000c38:	230a      	movs	r3, #10
 8000c3a:	48bd      	ldr	r0, [pc, #756]	; (8000f30 <printRadioSettings+0x31c>)
 8000c3c:	f002 fe55 	bl	80038ea <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000c40:	2000      	movs	r0, #0
 8000c42:	f7ff faf5 	bl	8000230 <NRF24_read_register>
 8000c46:	4603      	mov	r3, r0
 8000c48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000c4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c50:	f003 0308 	and.w	r3, r3, #8
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d013      	beq.n	8000c80 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000c58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d006      	beq.n	8000c72 <printRadioSettings+0x5e>
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	49b2      	ldr	r1, [pc, #712]	; (8000f34 <printRadioSettings+0x320>)
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f003 fb68 	bl	8004340 <siprintf>
 8000c70:	e00c      	b.n	8000c8c <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	49b0      	ldr	r1, [pc, #704]	; (8000f38 <printRadioSettings+0x324>)
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f003 fb61 	bl	8004340 <siprintf>
 8000c7e:	e005      	b.n	8000c8c <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	49ad      	ldr	r1, [pc, #692]	; (8000f3c <printRadioSettings+0x328>)
 8000c86:	4618      	mov	r0, r3
 8000c88:	f003 fb5a 	bl	8004340 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c8c:	f107 0308 	add.w	r3, r7, #8
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fa65 	bl	8000160 <strlen>
 8000c96:	4603      	mov	r3, r0
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	f107 0108 	add.w	r1, r7, #8
 8000c9e:	230a      	movs	r3, #10
 8000ca0:	48a3      	ldr	r0, [pc, #652]	; (8000f30 <printRadioSettings+0x31c>)
 8000ca2:	f002 fe22 	bl	80038ea <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f7ff fac2 	bl	8000230 <NRF24_read_register>
 8000cac:	4603      	mov	r3, r0
 8000cae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cb2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cb6:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	bfcc      	ite	gt
 8000cbe:	2301      	movgt	r3, #1
 8000cc0:	2300      	movle	r3, #0
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cc6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cca:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	bfcc      	ite	gt
 8000cd2:	2301      	movgt	r3, #1
 8000cd4:	2300      	movle	r3, #0
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cde:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bfcc      	ite	gt
 8000ce6:	2301      	movgt	r3, #1
 8000ce8:	2300      	movle	r3, #0
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cf2:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	bfcc      	ite	gt
 8000cfa:	2301      	movgt	r3, #1
 8000cfc:	2300      	movle	r3, #0
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d06:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	bfcc      	ite	gt
 8000d0e:	2301      	movgt	r3, #1
 8000d10:	2300      	movle	r3, #0
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d16:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d1a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	bfcc      	ite	gt
 8000d22:	2301      	movgt	r3, #1
 8000d24:	2300      	movle	r3, #0
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	f107 0008 	add.w	r0, r7, #8
 8000d2c:	9303      	str	r3, [sp, #12]
 8000d2e:	9402      	str	r4, [sp, #8]
 8000d30:	9101      	str	r1, [sp, #4]
 8000d32:	9200      	str	r2, [sp, #0]
 8000d34:	4633      	mov	r3, r6
 8000d36:	462a      	mov	r2, r5
 8000d38:	4981      	ldr	r1, [pc, #516]	; (8000f40 <printRadioSettings+0x32c>)
 8000d3a:	f003 fb01 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fa0c 	bl	8000160 <strlen>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	f107 0108 	add.w	r1, r7, #8
 8000d50:	230a      	movs	r3, #10
 8000d52:	4877      	ldr	r0, [pc, #476]	; (8000f30 <printRadioSettings+0x31c>)
 8000d54:	f002 fdc9 	bl	80038ea <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f7ff fa69 	bl	8000230 <NRF24_read_register>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d64:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d68:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	bfcc      	ite	gt
 8000d70:	2301      	movgt	r3, #1
 8000d72:	2300      	movle	r3, #0
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d78:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d7c:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	bfcc      	ite	gt
 8000d84:	2301      	movgt	r3, #1
 8000d86:	2300      	movle	r3, #0
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d8c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d90:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	bfcc      	ite	gt
 8000d98:	2301      	movgt	r3, #1
 8000d9a:	2300      	movle	r3, #0
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000da0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000da4:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	bfcc      	ite	gt
 8000dac:	2301      	movgt	r3, #1
 8000dae:	2300      	movle	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000db4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000db8:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	bfcc      	ite	gt
 8000dc0:	2301      	movgt	r3, #1
 8000dc2:	2300      	movle	r3, #0
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000dc8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dcc:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	bfcc      	ite	gt
 8000dd4:	2301      	movgt	r3, #1
 8000dd6:	2300      	movle	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	f107 0008 	add.w	r0, r7, #8
 8000dde:	9303      	str	r3, [sp, #12]
 8000de0:	9402      	str	r4, [sp, #8]
 8000de2:	9101      	str	r1, [sp, #4]
 8000de4:	9200      	str	r2, [sp, #0]
 8000de6:	4633      	mov	r3, r6
 8000de8:	462a      	mov	r2, r5
 8000dea:	4956      	ldr	r1, [pc, #344]	; (8000f44 <printRadioSettings+0x330>)
 8000dec:	f003 faa8 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000df0:	f107 0308 	add.w	r3, r7, #8
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff f9b3 	bl	8000160 <strlen>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	f107 0108 	add.w	r1, r7, #8
 8000e02:	230a      	movs	r3, #10
 8000e04:	484a      	ldr	r0, [pc, #296]	; (8000f30 <printRadioSettings+0x31c>)
 8000e06:	f002 fd70 	bl	80038ea <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8000e0a:	2003      	movs	r0, #3
 8000e0c:	f7ff fa10 	bl	8000230 <NRF24_read_register>
 8000e10:	4603      	mov	r3, r0
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8000e1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e1e:	3302      	adds	r3, #2
 8000e20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8000e24:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000e28:	f107 0308 	add.w	r3, r7, #8
 8000e2c:	4946      	ldr	r1, [pc, #280]	; (8000f48 <printRadioSettings+0x334>)
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f003 fa86 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff f991 	bl	8000160 <strlen>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	f107 0108 	add.w	r1, r7, #8
 8000e46:	230a      	movs	r3, #10
 8000e48:	4839      	ldr	r0, [pc, #228]	; (8000f30 <printRadioSettings+0x31c>)
 8000e4a:	f002 fd4e 	bl	80038ea <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8000e4e:	2005      	movs	r0, #5
 8000e50:	f7ff f9ee 	bl	8000230 <NRF24_read_register>
 8000e54:	4603      	mov	r3, r0
 8000e56:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8000e5a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	4939      	ldr	r1, [pc, #228]	; (8000f4c <printRadioSettings+0x338>)
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f003 fa69 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff f974 	bl	8000160 <strlen>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	f107 0108 	add.w	r1, r7, #8
 8000e80:	230a      	movs	r3, #10
 8000e82:	482b      	ldr	r0, [pc, #172]	; (8000f30 <printRadioSettings+0x31c>)
 8000e84:	f002 fd31 	bl	80038ea <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8000e88:	2006      	movs	r0, #6
 8000e8a:	f7ff f9d1 	bl	8000230 <NRF24_read_register>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8000e94:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e98:	f003 0308 	and.w	r3, r3, #8
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d006      	beq.n	8000eae <printRadioSettings+0x29a>
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	492a      	ldr	r1, [pc, #168]	; (8000f50 <printRadioSettings+0x33c>)
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f003 fa4a 	bl	8004340 <siprintf>
 8000eac:	e005      	b.n	8000eba <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8000eae:	f107 0308 	add.w	r3, r7, #8
 8000eb2:	4928      	ldr	r1, [pc, #160]	; (8000f54 <printRadioSettings+0x340>)
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f003 fa43 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000eba:	f107 0308 	add.w	r3, r7, #8
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff f94e 	bl	8000160 <strlen>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	f107 0108 	add.w	r1, r7, #8
 8000ecc:	230a      	movs	r3, #10
 8000ece:	4818      	ldr	r0, [pc, #96]	; (8000f30 <printRadioSettings+0x31c>)
 8000ed0:	f002 fd0b 	bl	80038ea <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8000ed4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ed8:	f003 0306 	and.w	r3, r3, #6
 8000edc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8000ee0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ee4:	085b      	lsrs	r3, r3, #1
 8000ee6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8000eea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d106      	bne.n	8000f00 <printRadioSettings+0x2ec>
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	4918      	ldr	r1, [pc, #96]	; (8000f58 <printRadioSettings+0x344>)
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f003 fa21 	bl	8004340 <siprintf>
 8000efe:	e03b      	b.n	8000f78 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8000f00:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d106      	bne.n	8000f16 <printRadioSettings+0x302>
 8000f08:	f107 0308 	add.w	r3, r7, #8
 8000f0c:	4913      	ldr	r1, [pc, #76]	; (8000f5c <printRadioSettings+0x348>)
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 fa16 	bl	8004340 <siprintf>
 8000f14:	e030      	b.n	8000f78 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8000f16:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d122      	bne.n	8000f64 <printRadioSettings+0x350>
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	490f      	ldr	r1, [pc, #60]	; (8000f60 <printRadioSettings+0x34c>)
 8000f24:	4618      	mov	r0, r3
 8000f26:	f003 fa0b 	bl	8004340 <siprintf>
 8000f2a:	e025      	b.n	8000f78 <printRadioSettings+0x364>
 8000f2c:	08004c30 	.word	0x08004c30
 8000f30:	20000118 	.word	0x20000118
 8000f34:	08004c64 	.word	0x08004c64
 8000f38:	08004c80 	.word	0x08004c80
 8000f3c:	08004c9c 	.word	0x08004c9c
 8000f40:	08004cb0 	.word	0x08004cb0
 8000f44:	08004cf4 	.word	0x08004cf4
 8000f48:	08004d40 	.word	0x08004d40
 8000f4c:	08004d5c 	.word	0x08004d5c
 8000f50:	08004d70 	.word	0x08004d70
 8000f54:	08004d88 	.word	0x08004d88
 8000f58:	08004da0 	.word	0x08004da0
 8000f5c:	08004db4 	.word	0x08004db4
 8000f60:	08004dc8 	.word	0x08004dc8
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8000f64:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f68:	2b03      	cmp	r3, #3
 8000f6a:	d105      	bne.n	8000f78 <printRadioSettings+0x364>
 8000f6c:	f107 0308 	add.w	r3, r7, #8
 8000f70:	49d7      	ldr	r1, [pc, #860]	; (80012d0 <printRadioSettings+0x6bc>)
 8000f72:	4618      	mov	r0, r3
 8000f74:	f003 f9e4 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff f8ef 	bl	8000160 <strlen>
 8000f82:	4603      	mov	r3, r0
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	f107 0108 	add.w	r1, r7, #8
 8000f8a:	230a      	movs	r3, #10
 8000f8c:	48d1      	ldr	r0, [pc, #836]	; (80012d4 <printRadioSettings+0x6c0>)
 8000f8e:	f002 fcac 	bl	80038ea <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8000f92:	463b      	mov	r3, r7
 8000f94:	2205      	movs	r2, #5
 8000f96:	4619      	mov	r1, r3
 8000f98:	200a      	movs	r0, #10
 8000f9a:	f7ff f971 	bl	8000280 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000f9e:	793b      	ldrb	r3, [r7, #4]
 8000fa0:	461c      	mov	r4, r3
 8000fa2:	78fb      	ldrb	r3, [r7, #3]
 8000fa4:	461d      	mov	r5, r3
 8000fa6:	78bb      	ldrb	r3, [r7, #2]
 8000fa8:	787a      	ldrb	r2, [r7, #1]
 8000faa:	7839      	ldrb	r1, [r7, #0]
 8000fac:	f107 0008 	add.w	r0, r7, #8
 8000fb0:	9102      	str	r1, [sp, #8]
 8000fb2:	9201      	str	r2, [sp, #4]
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	462b      	mov	r3, r5
 8000fb8:	4622      	mov	r2, r4
 8000fba:	49c7      	ldr	r1, [pc, #796]	; (80012d8 <printRadioSettings+0x6c4>)
 8000fbc:	f003 f9c0 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff f8cb 	bl	8000160 <strlen>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	f107 0108 	add.w	r1, r7, #8
 8000fd2:	230a      	movs	r3, #10
 8000fd4:	48bf      	ldr	r0, [pc, #764]	; (80012d4 <printRadioSettings+0x6c0>)
 8000fd6:	f002 fc88 	bl	80038ea <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8000fda:	463b      	mov	r3, r7
 8000fdc:	2205      	movs	r2, #5
 8000fde:	4619      	mov	r1, r3
 8000fe0:	200b      	movs	r0, #11
 8000fe2:	f7ff f94d 	bl	8000280 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000fe6:	793b      	ldrb	r3, [r7, #4]
 8000fe8:	461c      	mov	r4, r3
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	461d      	mov	r5, r3
 8000fee:	78bb      	ldrb	r3, [r7, #2]
 8000ff0:	787a      	ldrb	r2, [r7, #1]
 8000ff2:	7839      	ldrb	r1, [r7, #0]
 8000ff4:	f107 0008 	add.w	r0, r7, #8
 8000ff8:	9102      	str	r1, [sp, #8]
 8000ffa:	9201      	str	r2, [sp, #4]
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	462b      	mov	r3, r5
 8001000:	4622      	mov	r2, r4
 8001002:	49b6      	ldr	r1, [pc, #728]	; (80012dc <printRadioSettings+0x6c8>)
 8001004:	f003 f99c 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001008:	f107 0308 	add.w	r3, r7, #8
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff f8a7 	bl	8000160 <strlen>
 8001012:	4603      	mov	r3, r0
 8001014:	b29a      	uxth	r2, r3
 8001016:	f107 0108 	add.w	r1, r7, #8
 800101a:	230a      	movs	r3, #10
 800101c:	48ad      	ldr	r0, [pc, #692]	; (80012d4 <printRadioSettings+0x6c0>)
 800101e:	f002 fc64 	bl	80038ea <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001022:	463b      	mov	r3, r7
 8001024:	2201      	movs	r2, #1
 8001026:	4619      	mov	r1, r3
 8001028:	200c      	movs	r0, #12
 800102a:	f7ff f929 	bl	8000280 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800102e:	783b      	ldrb	r3, [r7, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	49aa      	ldr	r1, [pc, #680]	; (80012e0 <printRadioSettings+0x6cc>)
 8001038:	4618      	mov	r0, r3
 800103a:	f003 f981 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff f88c 	bl	8000160 <strlen>
 8001048:	4603      	mov	r3, r0
 800104a:	b29a      	uxth	r2, r3
 800104c:	f107 0108 	add.w	r1, r7, #8
 8001050:	230a      	movs	r3, #10
 8001052:	48a0      	ldr	r0, [pc, #640]	; (80012d4 <printRadioSettings+0x6c0>)
 8001054:	f002 fc49 	bl	80038ea <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001058:	463b      	mov	r3, r7
 800105a:	2201      	movs	r2, #1
 800105c:	4619      	mov	r1, r3
 800105e:	200d      	movs	r0, #13
 8001060:	f7ff f90e 	bl	8000280 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001064:	783b      	ldrb	r3, [r7, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	f107 0308 	add.w	r3, r7, #8
 800106c:	499d      	ldr	r1, [pc, #628]	; (80012e4 <printRadioSettings+0x6d0>)
 800106e:	4618      	mov	r0, r3
 8001070:	f003 f966 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff f871 	bl	8000160 <strlen>
 800107e:	4603      	mov	r3, r0
 8001080:	b29a      	uxth	r2, r3
 8001082:	f107 0108 	add.w	r1, r7, #8
 8001086:	230a      	movs	r3, #10
 8001088:	4892      	ldr	r0, [pc, #584]	; (80012d4 <printRadioSettings+0x6c0>)
 800108a:	f002 fc2e 	bl	80038ea <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800108e:	463b      	mov	r3, r7
 8001090:	2201      	movs	r2, #1
 8001092:	4619      	mov	r1, r3
 8001094:	200e      	movs	r0, #14
 8001096:	f7ff f8f3 	bl	8000280 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800109a:	783b      	ldrb	r3, [r7, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	f107 0308 	add.w	r3, r7, #8
 80010a2:	4991      	ldr	r1, [pc, #580]	; (80012e8 <printRadioSettings+0x6d4>)
 80010a4:	4618      	mov	r0, r3
 80010a6:	f003 f94b 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010aa:	f107 0308 	add.w	r3, r7, #8
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f856 	bl	8000160 <strlen>
 80010b4:	4603      	mov	r3, r0
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	f107 0108 	add.w	r1, r7, #8
 80010bc:	230a      	movs	r3, #10
 80010be:	4885      	ldr	r0, [pc, #532]	; (80012d4 <printRadioSettings+0x6c0>)
 80010c0:	f002 fc13 	bl	80038ea <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80010c4:	463b      	mov	r3, r7
 80010c6:	2201      	movs	r2, #1
 80010c8:	4619      	mov	r1, r3
 80010ca:	200f      	movs	r0, #15
 80010cc:	f7ff f8d8 	bl	8000280 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80010d0:	783b      	ldrb	r3, [r7, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	f107 0308 	add.w	r3, r7, #8
 80010d8:	4984      	ldr	r1, [pc, #528]	; (80012ec <printRadioSettings+0x6d8>)
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 f930 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010e0:	f107 0308 	add.w	r3, r7, #8
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff f83b 	bl	8000160 <strlen>
 80010ea:	4603      	mov	r3, r0
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	f107 0108 	add.w	r1, r7, #8
 80010f2:	230a      	movs	r3, #10
 80010f4:	4877      	ldr	r0, [pc, #476]	; (80012d4 <printRadioSettings+0x6c0>)
 80010f6:	f002 fbf8 	bl	80038ea <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80010fa:	463b      	mov	r3, r7
 80010fc:	2205      	movs	r2, #5
 80010fe:	4619      	mov	r1, r3
 8001100:	2010      	movs	r0, #16
 8001102:	f7ff f8bd 	bl	8000280 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001106:	793b      	ldrb	r3, [r7, #4]
 8001108:	461c      	mov	r4, r3
 800110a:	78fb      	ldrb	r3, [r7, #3]
 800110c:	461d      	mov	r5, r3
 800110e:	78bb      	ldrb	r3, [r7, #2]
 8001110:	787a      	ldrb	r2, [r7, #1]
 8001112:	7839      	ldrb	r1, [r7, #0]
 8001114:	f107 0008 	add.w	r0, r7, #8
 8001118:	9102      	str	r1, [sp, #8]
 800111a:	9201      	str	r2, [sp, #4]
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	462b      	mov	r3, r5
 8001120:	4622      	mov	r2, r4
 8001122:	4973      	ldr	r1, [pc, #460]	; (80012f0 <printRadioSettings+0x6dc>)
 8001124:	f003 f90c 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f817 	bl	8000160 <strlen>
 8001132:	4603      	mov	r3, r0
 8001134:	b29a      	uxth	r2, r3
 8001136:	f107 0108 	add.w	r1, r7, #8
 800113a:	230a      	movs	r3, #10
 800113c:	4865      	ldr	r0, [pc, #404]	; (80012d4 <printRadioSettings+0x6c0>)
 800113e:	f002 fbd4 	bl	80038ea <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001142:	2011      	movs	r0, #17
 8001144:	f7ff f874 	bl	8000230 <NRF24_read_register>
 8001148:	4603      	mov	r3, r0
 800114a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800114e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001152:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	4966      	ldr	r1, [pc, #408]	; (80012f4 <printRadioSettings+0x6e0>)
 800115c:	4618      	mov	r0, r3
 800115e:	f003 f8ef 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	4618      	mov	r0, r3
 8001168:	f7fe fffa 	bl	8000160 <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	b29a      	uxth	r2, r3
 8001170:	f107 0108 	add.w	r1, r7, #8
 8001174:	230a      	movs	r3, #10
 8001176:	4857      	ldr	r0, [pc, #348]	; (80012d4 <printRadioSettings+0x6c0>)
 8001178:	f002 fbb7 	bl	80038ea <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 800117c:	2012      	movs	r0, #18
 800117e:	f7ff f857 	bl	8000230 <NRF24_read_register>
 8001182:	4603      	mov	r3, r0
 8001184:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001188:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800118c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	4958      	ldr	r1, [pc, #352]	; (80012f8 <printRadioSettings+0x6e4>)
 8001196:	4618      	mov	r0, r3
 8001198:	f003 f8d2 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800119c:	f107 0308 	add.w	r3, r7, #8
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7fe ffdd 	bl	8000160 <strlen>
 80011a6:	4603      	mov	r3, r0
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	f107 0108 	add.w	r1, r7, #8
 80011ae:	230a      	movs	r3, #10
 80011b0:	4848      	ldr	r0, [pc, #288]	; (80012d4 <printRadioSettings+0x6c0>)
 80011b2:	f002 fb9a 	bl	80038ea <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 80011b6:	2013      	movs	r0, #19
 80011b8:	f7ff f83a 	bl	8000230 <NRF24_read_register>
 80011bc:	4603      	mov	r3, r0
 80011be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80011c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	494b      	ldr	r1, [pc, #300]	; (80012fc <printRadioSettings+0x6e8>)
 80011d0:	4618      	mov	r0, r3
 80011d2:	f003 f8b5 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	4618      	mov	r0, r3
 80011dc:	f7fe ffc0 	bl	8000160 <strlen>
 80011e0:	4603      	mov	r3, r0
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	f107 0108 	add.w	r1, r7, #8
 80011e8:	230a      	movs	r3, #10
 80011ea:	483a      	ldr	r0, [pc, #232]	; (80012d4 <printRadioSettings+0x6c0>)
 80011ec:	f002 fb7d 	bl	80038ea <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 80011f0:	2014      	movs	r0, #20
 80011f2:	f7ff f81d 	bl	8000230 <NRF24_read_register>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80011fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001200:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	493d      	ldr	r1, [pc, #244]	; (8001300 <printRadioSettings+0x6ec>)
 800120a:	4618      	mov	r0, r3
 800120c:	f003 f898 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	4618      	mov	r0, r3
 8001216:	f7fe ffa3 	bl	8000160 <strlen>
 800121a:	4603      	mov	r3, r0
 800121c:	b29a      	uxth	r2, r3
 800121e:	f107 0108 	add.w	r1, r7, #8
 8001222:	230a      	movs	r3, #10
 8001224:	482b      	ldr	r0, [pc, #172]	; (80012d4 <printRadioSettings+0x6c0>)
 8001226:	f002 fb60 	bl	80038ea <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 800122a:	2015      	movs	r0, #21
 800122c:	f7ff f800 	bl	8000230 <NRF24_read_register>
 8001230:	4603      	mov	r3, r0
 8001232:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001236:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800123a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	4930      	ldr	r1, [pc, #192]	; (8001304 <printRadioSettings+0x6f0>)
 8001244:	4618      	mov	r0, r3
 8001246:	f003 f87b 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	4618      	mov	r0, r3
 8001250:	f7fe ff86 	bl	8000160 <strlen>
 8001254:	4603      	mov	r3, r0
 8001256:	b29a      	uxth	r2, r3
 8001258:	f107 0108 	add.w	r1, r7, #8
 800125c:	230a      	movs	r3, #10
 800125e:	481d      	ldr	r0, [pc, #116]	; (80012d4 <printRadioSettings+0x6c0>)
 8001260:	f002 fb43 	bl	80038ea <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8001264:	2016      	movs	r0, #22
 8001266:	f7fe ffe3 	bl	8000230 <NRF24_read_register>
 800126a:	4603      	mov	r3, r0
 800126c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001270:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001274:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001278:	f107 0308 	add.w	r3, r7, #8
 800127c:	4922      	ldr	r1, [pc, #136]	; (8001308 <printRadioSettings+0x6f4>)
 800127e:	4618      	mov	r0, r3
 8001280:	f003 f85e 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	4618      	mov	r0, r3
 800128a:	f7fe ff69 	bl	8000160 <strlen>
 800128e:	4603      	mov	r3, r0
 8001290:	b29a      	uxth	r2, r3
 8001292:	f107 0108 	add.w	r1, r7, #8
 8001296:	230a      	movs	r3, #10
 8001298:	480e      	ldr	r0, [pc, #56]	; (80012d4 <printRadioSettings+0x6c0>)
 800129a:	f002 fb26 	bl	80038ea <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800129e:	201c      	movs	r0, #28
 80012a0:	f7fe ffc6 	bl	8000230 <NRF24_read_register>
 80012a4:	4603      	mov	r3, r0
 80012a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012ae:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bfcc      	ite	gt
 80012b6:	2301      	movgt	r3, #1
 80012b8:	2300      	movle	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012c2:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	bfcc      	ite	gt
 80012ca:	2301      	movgt	r3, #1
 80012cc:	2300      	movle	r3, #0
 80012ce:	e01d      	b.n	800130c <printRadioSettings+0x6f8>
 80012d0:	08004ddc 	.word	0x08004ddc
 80012d4:	20000118 	.word	0x20000118
 80012d8:	08004df0 	.word	0x08004df0
 80012dc:	08004e20 	.word	0x08004e20
 80012e0:	08004e50 	.word	0x08004e50
 80012e4:	08004e78 	.word	0x08004e78
 80012e8:	08004ea0 	.word	0x08004ea0
 80012ec:	08004ec8 	.word	0x08004ec8
 80012f0:	08004ef0 	.word	0x08004ef0
 80012f4:	08004f1c 	.word	0x08004f1c
 80012f8:	08004f38 	.word	0x08004f38
 80012fc:	08004f54 	.word	0x08004f54
 8001300:	08004f70 	.word	0x08004f70
 8001304:	08004f8c 	.word	0x08004f8c
 8001308:	08004fa8 	.word	0x08004fa8
 800130c:	b2db      	uxtb	r3, r3
 800130e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001310:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001314:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001318:	2b00      	cmp	r3, #0
 800131a:	bfcc      	ite	gt
 800131c:	2301      	movgt	r3, #1
 800131e:	2300      	movle	r3, #0
 8001320:	b2db      	uxtb	r3, r3
 8001322:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001324:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001328:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800132c:	2b00      	cmp	r3, #0
 800132e:	bfcc      	ite	gt
 8001330:	2301      	movgt	r3, #1
 8001332:	2300      	movle	r3, #0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001338:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800133c:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001340:	2b00      	cmp	r3, #0
 8001342:	bfcc      	ite	gt
 8001344:	2301      	movgt	r3, #1
 8001346:	2300      	movle	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800134c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001350:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001354:	2b00      	cmp	r3, #0
 8001356:	bfcc      	ite	gt
 8001358:	2301      	movgt	r3, #1
 800135a:	2300      	movle	r3, #0
 800135c:	b2db      	uxtb	r3, r3
 800135e:	f107 0008 	add.w	r0, r7, #8
 8001362:	9303      	str	r3, [sp, #12]
 8001364:	9402      	str	r4, [sp, #8]
 8001366:	9101      	str	r1, [sp, #4]
 8001368:	9200      	str	r2, [sp, #0]
 800136a:	4633      	mov	r3, r6
 800136c:	462a      	mov	r2, r5
 800136e:	4936      	ldr	r1, [pc, #216]	; (8001448 <printRadioSettings+0x834>)
 8001370:	f002 ffe6 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	4618      	mov	r0, r3
 800137a:	f7fe fef1 	bl	8000160 <strlen>
 800137e:	4603      	mov	r3, r0
 8001380:	b29a      	uxth	r2, r3
 8001382:	f107 0108 	add.w	r1, r7, #8
 8001386:	230a      	movs	r3, #10
 8001388:	4830      	ldr	r0, [pc, #192]	; (800144c <printRadioSettings+0x838>)
 800138a:	f002 faae 	bl	80038ea <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800138e:	201d      	movs	r0, #29
 8001390:	f7fe ff4e 	bl	8000230 <NRF24_read_register>
 8001394:	4603      	mov	r3, r0
 8001396:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800139a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d006      	beq.n	80013b4 <printRadioSettings+0x7a0>
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	4929      	ldr	r1, [pc, #164]	; (8001450 <printRadioSettings+0x83c>)
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 ffc7 	bl	8004340 <siprintf>
 80013b2:	e005      	b.n	80013c0 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80013b4:	f107 0308 	add.w	r3, r7, #8
 80013b8:	4926      	ldr	r1, [pc, #152]	; (8001454 <printRadioSettings+0x840>)
 80013ba:	4618      	mov	r0, r3
 80013bc:	f002 ffc0 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7fe fecb 	bl	8000160 <strlen>
 80013ca:	4603      	mov	r3, r0
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	f107 0108 	add.w	r1, r7, #8
 80013d2:	230a      	movs	r3, #10
 80013d4:	481d      	ldr	r0, [pc, #116]	; (800144c <printRadioSettings+0x838>)
 80013d6:	f002 fa88 	bl	80038ea <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80013da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d006      	beq.n	80013f4 <printRadioSettings+0x7e0>
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	491b      	ldr	r1, [pc, #108]	; (8001458 <printRadioSettings+0x844>)
 80013ec:	4618      	mov	r0, r3
 80013ee:	f002 ffa7 	bl	8004340 <siprintf>
 80013f2:	e005      	b.n	8001400 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80013f4:	f107 0308 	add.w	r3, r7, #8
 80013f8:	4918      	ldr	r1, [pc, #96]	; (800145c <printRadioSettings+0x848>)
 80013fa:	4618      	mov	r0, r3
 80013fc:	f002 ffa0 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001400:	f107 0308 	add.w	r3, r7, #8
 8001404:	4618      	mov	r0, r3
 8001406:	f7fe feab 	bl	8000160 <strlen>
 800140a:	4603      	mov	r3, r0
 800140c:	b29a      	uxth	r2, r3
 800140e:	f107 0108 	add.w	r1, r7, #8
 8001412:	230a      	movs	r3, #10
 8001414:	480d      	ldr	r0, [pc, #52]	; (800144c <printRadioSettings+0x838>)
 8001416:	f002 fa68 	bl	80038ea <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800141a:	f107 0308 	add.w	r3, r7, #8
 800141e:	4910      	ldr	r1, [pc, #64]	; (8001460 <printRadioSettings+0x84c>)
 8001420:	4618      	mov	r0, r3
 8001422:	f002 ff8d 	bl	8004340 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001426:	f107 0308 	add.w	r3, r7, #8
 800142a:	4618      	mov	r0, r3
 800142c:	f7fe fe98 	bl	8000160 <strlen>
 8001430:	4603      	mov	r3, r0
 8001432:	b29a      	uxth	r2, r3
 8001434:	f107 0108 	add.w	r1, r7, #8
 8001438:	230a      	movs	r3, #10
 800143a:	4804      	ldr	r0, [pc, #16]	; (800144c <printRadioSettings+0x838>)
 800143c:	f002 fa55 	bl	80038ea <HAL_UART_Transmit>
}
 8001440:	bf00      	nop
 8001442:	3774      	adds	r7, #116	; 0x74
 8001444:	46bd      	mov	sp, r7
 8001446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001448:	08004fc4 	.word	0x08004fc4
 800144c:	20000118 	.word	0x20000118
 8001450:	08005010 	.word	0x08005010
 8001454:	08005028 	.word	0x08005028
 8001458:	08005040 	.word	0x08005040
 800145c:	0800505c 	.word	0x0800505c
 8001460:	08004c30 	.word	0x08004c30

08001464 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001464:	b084      	sub	sp, #16
 8001466:	b580      	push	{r7, lr}
 8001468:	af00      	add	r7, sp, #0
 800146a:	f107 0c08 	add.w	ip, r7, #8
 800146e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001472:	4b07      	ldr	r3, [pc, #28]	; (8001490 <nrf24_DebugUART_Init+0x2c>)
 8001474:	4618      	mov	r0, r3
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	2244      	movs	r2, #68	; 0x44
 800147c:	4619      	mov	r1, r3
 800147e:	f002 ff49 	bl	8004314 <memcpy>
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800148a:	b004      	add	sp, #16
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000118 	.word	0x20000118

08001494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001498:	f000 fc62 	bl	8001d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800149c:	f000 f866 	bl	800156c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a0:	f000 f92a 	bl	80016f8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80014a4:	f000 f89e 	bl	80015e4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80014a8:	f000 f8fc 	bl	80016a4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80014ac:	f000 f8d0 	bl	8001650 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Gateway_NRF_Init();
 80014b0:	f000 fa04 	bl	80018bc <Gateway_NRF_Init>
  HAL_UART_Receive_IT(&huart1, received_data_from_srvr, 5);
 80014b4:	2205      	movs	r2, #5
 80014b6:	4926      	ldr	r1, [pc, #152]	; (8001550 <main+0xbc>)
 80014b8:	4826      	ldr	r0, [pc, #152]	; (8001554 <main+0xc0>)
 80014ba:	f002 faa8 	bl	8003a0e <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80014be:	2201      	movs	r2, #1
 80014c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c4:	4824      	ldr	r0, [pc, #144]	; (8001558 <main+0xc4>)
 80014c6:	f001 f80b 	bl	80024e0 <HAL_GPIO_WritePin>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (NRF24_available()) {
 80014ca:	f7ff f919 	bl	8000700 <NRF24_available>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d007      	beq.n	80014e4 <main+0x50>
			HAL_Delay(10);
 80014d4:	200a      	movs	r0, #10
 80014d6:	f000 fca5 	bl	8001e24 <HAL_Delay>
			process_received_data_from_node();
 80014da:	f000 fa31 	bl	8001940 <process_received_data_from_node>
			//and send data to server
			HAL_Delay(50);
 80014de:	2032      	movs	r0, #50	; 0x32
 80014e0:	f000 fca0 	bl	8001e24 <HAL_Delay>
		}
		if(data_avlbl_frm_srvr){
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <main+0xc8>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d027      	beq.n	800153c <main+0xa8>


			HAL_UART_Receive_IT(&huart1, received_data_from_srvr, 5);
 80014ec:	2205      	movs	r2, #5
 80014ee:	4918      	ldr	r1, [pc, #96]	; (8001550 <main+0xbc>)
 80014f0:	4818      	ldr	r0, [pc, #96]	; (8001554 <main+0xc0>)
 80014f2:	f002 fa8c 	bl	8003a0e <HAL_UART_Receive_IT>
			//check the id, and pass pipe address to transmitt mode accordingly
			HAL_UART_Transmit(&huart2, (uint8_t*)"msg received from server ::> ", strlen("msg received from server ::> "), 10);
 80014f6:	230a      	movs	r3, #10
 80014f8:	221d      	movs	r2, #29
 80014fa:	4919      	ldr	r1, [pc, #100]	; (8001560 <main+0xcc>)
 80014fc:	4819      	ldr	r0, [pc, #100]	; (8001564 <main+0xd0>)
 80014fe:	f002 f9f4 	bl	80038ea <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, received_data_from_srvr, 32, 10);
 8001502:	230a      	movs	r3, #10
 8001504:	2220      	movs	r2, #32
 8001506:	4912      	ldr	r1, [pc, #72]	; (8001550 <main+0xbc>)
 8001508:	4816      	ldr	r0, [pc, #88]	; (8001564 <main+0xd0>)
 800150a:	f002 f9ee 	bl	80038ea <HAL_UART_Transmit>
			process_data_rcvd_frm_srvr();
 800150e:	f000 fa3f 	bl	8001990 <process_data_rcvd_frm_srvr>
			check_id_for_tx_mode();
 8001512:	f000 fa57 	bl	80019c4 <check_id_for_tx_mode>
			Switch_to_Transmitt_mode(pip_add_for_data_tx);
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <main+0xd4>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f000 f96c 	bl	80017fc <Switch_to_Transmitt_mode>
			Transmitt_srvr_msg_to_node();
 8001524:	f000 f97c 	bl	8001820 <Transmitt_srvr_msg_to_node>
			Switch_to_Receiver_mode();
 8001528:	f000 f9b6 	bl	8001898 <Switch_to_Receiver_mode>
			data_avlbl_frm_srvr = 0;
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <main+0xc8>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
			memset(received_data_from_srvr, 0, sizeof(received_data_from_srvr));
 8001532:	2220      	movs	r2, #32
 8001534:	2100      	movs	r1, #0
 8001536:	4806      	ldr	r0, [pc, #24]	; (8001550 <main+0xbc>)
 8001538:	f002 fefa 	bl	8004330 <memset>
		}
		HAL_GPIO_TogglePin(LED_pin_GPIO_Port, LED_pin_Pin);
 800153c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <main+0xc4>)
 8001542:	f000 ffe5 	bl	8002510 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001546:	2064      	movs	r0, #100	; 0x64
 8001548:	f000 fc6c 	bl	8001e24 <HAL_Delay>
		if (NRF24_available()) {
 800154c:	e7bd      	b.n	80014ca <main+0x36>
 800154e:	bf00      	nop
 8001550:	20000278 	.word	0x20000278
 8001554:	200001b4 	.word	0x200001b4
 8001558:	40011000 	.word	0x40011000
 800155c:	200002ae 	.word	0x200002ae
 8001560:	08005174 	.word	0x08005174
 8001564:	200001f8 	.word	0x200001f8
 8001568:	20000298 	.word	0x20000298

0800156c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b090      	sub	sp, #64	; 0x40
 8001570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001572:	f107 0318 	add.w	r3, r7, #24
 8001576:	2228      	movs	r2, #40	; 0x28
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f002 fed8 	bl	8004330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800158e:	2302      	movs	r3, #2
 8001590:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001592:	2301      	movs	r3, #1
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001596:	2310      	movs	r3, #16
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800159a:	2300      	movs	r3, #0
 800159c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800159e:	f107 0318 	add.w	r3, r7, #24
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 ffce 	bl	8002544 <HAL_RCC_OscConfig>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80015ae:	f000 fa3b 	bl	8001a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b2:	230f      	movs	r3, #15
 80015b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f001 fa3c 	bl	8002a48 <HAL_RCC_ClockConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015d6:	f000 fa27 	bl	8001a28 <Error_Handler>
  }
}
 80015da:	bf00      	nop
 80015dc:	3740      	adds	r7, #64	; 0x40
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <MX_SPI1_Init+0x64>)
 80015ea:	4a18      	ldr	r2, [pc, #96]	; (800164c <MX_SPI1_Init+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <MX_SPI1_Init+0x64>)
 80015f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_SPI1_Init+0x64>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <MX_SPI1_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_SPI1_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <MX_SPI1_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_SPI1_Init+0x64>)
 8001610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001614:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <MX_SPI1_Init+0x64>)
 8001618:	2200      	movs	r2, #0
 800161a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <MX_SPI1_Init+0x64>)
 800161e:	2200      	movs	r2, #0
 8001620:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <MX_SPI1_Init+0x64>)
 8001624:	2200      	movs	r2, #0
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <MX_SPI1_Init+0x64>)
 800162a:	2200      	movs	r2, #0
 800162c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <MX_SPI1_Init+0x64>)
 8001630:	220a      	movs	r2, #10
 8001632:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <MX_SPI1_Init+0x64>)
 8001636:	f001 fb9f 	bl	8002d78 <HAL_SPI_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001640:	f000 f9f2 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	2000015c 	.word	0x2000015c
 800164c:	40013000 	.word	0x40013000

08001650 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <MX_USART1_UART_Init+0x4c>)
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <MX_USART1_UART_Init+0x50>)
 8001658:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <MX_USART1_UART_Init+0x4c>)
 800165c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001660:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_USART1_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <MX_USART1_UART_Init+0x4c>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <MX_USART1_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <MX_USART1_UART_Init+0x4c>)
 8001676:	220c      	movs	r2, #12
 8001678:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <MX_USART1_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_USART1_UART_Init+0x4c>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_USART1_UART_Init+0x4c>)
 8001688:	f002 f8e2 	bl	8003850 <HAL_UART_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001692:	f000 f9c9 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200001b4 	.word	0x200001b4
 80016a0:	40013800 	.word	0x40013800

080016a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_USART2_UART_Init+0x4c>)
 80016aa:	4a12      	ldr	r2, [pc, #72]	; (80016f4 <MX_USART2_UART_Init+0x50>)
 80016ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <MX_USART2_UART_Init+0x4c>)
 80016b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MX_USART2_UART_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_USART2_UART_Init+0x4c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <MX_USART2_UART_Init+0x4c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_USART2_UART_Init+0x4c>)
 80016ca:	220c      	movs	r2, #12
 80016cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <MX_USART2_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MX_USART2_UART_Init+0x4c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_USART2_UART_Init+0x4c>)
 80016dc:	f002 f8b8 	bl	8003850 <HAL_UART_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016e6:	f000 f99f 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200001f8 	.word	0x200001f8
 80016f4:	40004400 	.word	0x40004400

080016f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fe:	f107 0310 	add.w	r3, r7, #16
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800170c:	4b28      	ldr	r3, [pc, #160]	; (80017b0 <MX_GPIO_Init+0xb8>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	4a27      	ldr	r2, [pc, #156]	; (80017b0 <MX_GPIO_Init+0xb8>)
 8001712:	f043 0310 	orr.w	r3, r3, #16
 8001716:	6193      	str	r3, [r2, #24]
 8001718:	4b25      	ldr	r3, [pc, #148]	; (80017b0 <MX_GPIO_Init+0xb8>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	f003 0310 	and.w	r3, r3, #16
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001724:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <MX_GPIO_Init+0xb8>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	4a21      	ldr	r2, [pc, #132]	; (80017b0 <MX_GPIO_Init+0xb8>)
 800172a:	f043 0304 	orr.w	r3, r3, #4
 800172e:	6193      	str	r3, [r2, #24]
 8001730:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <MX_GPIO_Init+0xb8>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173c:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <MX_GPIO_Init+0xb8>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	4a1b      	ldr	r2, [pc, #108]	; (80017b0 <MX_GPIO_Init+0xb8>)
 8001742:	f043 0308 	orr.w	r3, r3, #8
 8001746:	6193      	str	r3, [r2, #24]
 8001748:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <MX_GPIO_Init+0xb8>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_pin_GPIO_Port, LED_pin_Pin, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
 8001756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800175a:	4816      	ldr	r0, [pc, #88]	; (80017b4 <MX_GPIO_Init+0xbc>)
 800175c:	f000 fec0 	bl	80024e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_pin_Pin|CE_pin_Pin, GPIO_PIN_RESET);
 8001760:	2200      	movs	r2, #0
 8001762:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001766:	4814      	ldr	r0, [pc, #80]	; (80017b8 <MX_GPIO_Init+0xc0>)
 8001768:	f000 feba 	bl	80024e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_pin_Pin */
  GPIO_InitStruct.Pin = LED_pin_Pin;
 800176c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001772:	2301      	movs	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2302      	movs	r3, #2
 800177c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_pin_GPIO_Port, &GPIO_InitStruct);
 800177e:	f107 0310 	add.w	r3, r7, #16
 8001782:	4619      	mov	r1, r3
 8001784:	480b      	ldr	r0, [pc, #44]	; (80017b4 <MX_GPIO_Init+0xbc>)
 8001786:	f000 fd2f 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_pin_Pin CE_pin_Pin */
  GPIO_InitStruct.Pin = CSN_pin_Pin|CE_pin_Pin;
 800178a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800178e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001790:	2301      	movs	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2302      	movs	r3, #2
 800179a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	4619      	mov	r1, r3
 80017a2:	4805      	ldr	r0, [pc, #20]	; (80017b8 <MX_GPIO_Init+0xc0>)
 80017a4:	f000 fd20 	bl	80021e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017a8:	bf00      	nop
 80017aa:	3720      	adds	r7, #32
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40011000 	.word	0x40011000
 80017b8:	40010c00 	.word	0x40010c00

080017bc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
   data_avlbl_frm_srvr = 1;
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_UART_RxCpltCallback+0x2c>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
   HAL_UART_Receive_IT(&huart1, received_data_from_srvr, 5);
 80017ca:	2205      	movs	r2, #5
 80017cc:	4907      	ldr	r1, [pc, #28]	; (80017ec <HAL_UART_RxCpltCallback+0x30>)
 80017ce:	4808      	ldr	r0, [pc, #32]	; (80017f0 <HAL_UART_RxCpltCallback+0x34>)
 80017d0:	f002 f91d 	bl	8003a0e <HAL_UART_Receive_IT>
   HAL_UART_Transmit(&huart2, (uint8_t*)"\n CALL BACK TRIGGERED", strlen("\n CALL BACK TRIGGERED"), 10);
 80017d4:	230a      	movs	r3, #10
 80017d6:	2215      	movs	r2, #21
 80017d8:	4906      	ldr	r1, [pc, #24]	; (80017f4 <HAL_UART_RxCpltCallback+0x38>)
 80017da:	4807      	ldr	r0, [pc, #28]	; (80017f8 <HAL_UART_RxCpltCallback+0x3c>)
 80017dc:	f002 f885 	bl	80038ea <HAL_UART_Transmit>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200002ae 	.word	0x200002ae
 80017ec:	20000278 	.word	0x20000278
 80017f0:	200001b4 	.word	0x200001b4
 80017f4:	08005194 	.word	0x08005194
 80017f8:	200001f8 	.word	0x200001f8

080017fc <Switch_to_Transmitt_mode>:
void Switch_to_Transmitt_mode(uint64_t pipe_addr_for_tx_mod){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	e9c7 0100 	strd	r0, r1, [r7]
    NRF24_stopListening();
 8001806:	f7fe ff23 	bl	8000650 <NRF24_stopListening>
    NRF24_openWritingPipe(pipe_addr_for_tx_mod);
 800180a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800180e:	f7fe ff9f 	bl	8000750 <NRF24_openWritingPipe>
    NRF24_setChannel(52);
 8001812:	2034      	movs	r0, #52	; 0x34
 8001814:	f7ff f829 	bl	800086a <NRF24_setChannel>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <Transmitt_srvr_msg_to_node>:
void Transmitt_srvr_msg_to_node(){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
	//uint8_t msg_to_node[32] = "001,0";
for(int i = 0; i<= 10; i++){
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	e025      	b.n	8001878 <Transmitt_srvr_msg_to_node+0x58>
	if(!NRF24_write(received_data_from_srvr,32)){
 800182c:	2120      	movs	r1, #32
 800182e:	4816      	ldr	r0, [pc, #88]	; (8001888 <Transmitt_srvr_msg_to_node+0x68>)
 8001830:	f7fe ff1a 	bl	8000668 <NRF24_write>
 8001834:	4603      	mov	r3, r0
 8001836:	f083 0301 	eor.w	r3, r3, #1
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00e      	beq.n	800185e <Transmitt_srvr_msg_to_node+0x3e>
		  NRF24_write(received_data_from_srvr,32);
 8001840:	2120      	movs	r1, #32
 8001842:	4811      	ldr	r0, [pc, #68]	; (8001888 <Transmitt_srvr_msg_to_node+0x68>)
 8001844:	f7fe ff10 	bl	8000668 <NRF24_write>
		  HAL_UART_Transmit(&huart2, (uint8_t *)"Transmitt to node waiting for ack\n", strlen("Transmitt to node waiting for ack\n"),10);
 8001848:	230a      	movs	r3, #10
 800184a:	2222      	movs	r2, #34	; 0x22
 800184c:	490f      	ldr	r1, [pc, #60]	; (800188c <Transmitt_srvr_msg_to_node+0x6c>)
 800184e:	4810      	ldr	r0, [pc, #64]	; (8001890 <Transmitt_srvr_msg_to_node+0x70>)
 8001850:	f002 f84b 	bl	80038ea <HAL_UART_Transmit>
		  HAL_Delay(400);
 8001854:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001858:	f000 fae4 	bl	8001e24 <HAL_Delay>
 800185c:	e009      	b.n	8001872 <Transmitt_srvr_msg_to_node+0x52>
		  }
	else{
		  HAL_UART_Transmit(&huart2, (uint8_t *)"Transmitt to node Transmitted successfully\n", strlen("Transmitt to node Transmitted successfully\n"),10);
 800185e:	230a      	movs	r3, #10
 8001860:	222b      	movs	r2, #43	; 0x2b
 8001862:	490c      	ldr	r1, [pc, #48]	; (8001894 <Transmitt_srvr_msg_to_node+0x74>)
 8001864:	480a      	ldr	r0, [pc, #40]	; (8001890 <Transmitt_srvr_msg_to_node+0x70>)
 8001866:	f002 f840 	bl	80038ea <HAL_UART_Transmit>
	      HAL_Delay(100);
 800186a:	2064      	movs	r0, #100	; 0x64
 800186c:	f000 fada 	bl	8001e24 <HAL_Delay>
		  break;
 8001870:	e006      	b.n	8001880 <Transmitt_srvr_msg_to_node+0x60>
for(int i = 0; i<= 10; i++){
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3301      	adds	r3, #1
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b0a      	cmp	r3, #10
 800187c:	ddd6      	ble.n	800182c <Transmitt_srvr_msg_to_node+0xc>
	}
	}
}
 800187e:	bf00      	nop
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000278 	.word	0x20000278
 800188c:	080051ac 	.word	0x080051ac
 8001890:	200001f8 	.word	0x200001f8
 8001894:	080051d0 	.word	0x080051d0

08001898 <Switch_to_Receiver_mode>:
void Switch_to_Receiver_mode(void){
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
NRF24_setChannel(52);
 800189c:	2034      	movs	r0, #52	; 0x34
 800189e:	f7fe ffe4 	bl	800086a <NRF24_setChannel>
NRF24_openReadingPipe(1, pipe_addr);
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <Switch_to_Receiver_mode+0x20>)
 80018a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a8:	2001      	movs	r0, #1
 80018aa:	f7fe ff75 	bl	8000798 <NRF24_openReadingPipe>
NRF24_startListening();
 80018ae:	f7fe fea9 	bl	8000604 <NRF24_startListening>
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000000 	.word	0x20000000

080018bc <Gateway_NRF_Init>:
void Gateway_NRF_Init(void){
 80018bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018be:	b097      	sub	sp, #92	; 0x5c
 80018c0:	af16      	add	r7, sp, #88	; 0x58
NRF24_begin(CE_pin_GPIO_Port, CSN_pin_Pin, CE_pin_Pin, hspi1);
 80018c2:	4c1b      	ldr	r4, [pc, #108]	; (8001930 <Gateway_NRF_Init+0x74>)
 80018c4:	4668      	mov	r0, sp
 80018c6:	1d23      	adds	r3, r4, #4
 80018c8:	2254      	movs	r2, #84	; 0x54
 80018ca:	4619      	mov	r1, r3
 80018cc:	f002 fd22 	bl	8004314 <memcpy>
 80018d0:	6823      	ldr	r3, [r4, #0]
 80018d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018da:	4816      	ldr	r0, [pc, #88]	; (8001934 <Gateway_NRF_Init+0x78>)
 80018dc:	f7fe fdb2 	bl	8000444 <NRF24_begin>
nrf24_DebugUART_Init(huart2);
 80018e0:	4e15      	ldr	r6, [pc, #84]	; (8001938 <Gateway_NRF_Init+0x7c>)
 80018e2:	466d      	mov	r5, sp
 80018e4:	f106 0410 	add.w	r4, r6, #16
 80018e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	602b      	str	r3, [r5, #0]
 80018f8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80018fc:	f7ff fdb2 	bl	8001464 <nrf24_DebugUART_Init>

NRF24_setAutoAck(true);
 8001900:	2001      	movs	r0, #1
 8001902:	f7ff f807 	bl	8000914 <NRF24_setAutoAck>
NRF24_setChannel(52);
 8001906:	2034      	movs	r0, #52	; 0x34
 8001908:	f7fe ffaf 	bl	800086a <NRF24_setChannel>
NRF24_setPayloadSize(32);
 800190c:	2020      	movs	r0, #32
 800190e:	f7fe ffc1 	bl	8000894 <NRF24_setPayloadSize>
NRF24_openReadingPipe(1, pipe_addr);
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <Gateway_NRF_Init+0x80>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	2001      	movs	r0, #1
 800191a:	f7fe ff3d 	bl	8000798 <NRF24_openReadingPipe>
NRF24_startListening();
 800191e:	f7fe fe71 	bl	8000604 <NRF24_startListening>
printRadioSettings();
 8001922:	f7ff f977 	bl	8000c14 <printRadioSettings>
}
 8001926:	bf00      	nop
 8001928:	3704      	adds	r7, #4
 800192a:	46bd      	mov	sp, r7
 800192c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800192e:	bf00      	nop
 8001930:	2000015c 	.word	0x2000015c
 8001934:	40010c00 	.word	0x40010c00
 8001938:	200001f8 	.word	0x200001f8
 800193c:	20000000 	.word	0x20000000

08001940 <process_received_data_from_node>:
void process_received_data_from_node(void){
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	NRF24_read(received_data_from_nodes, 32); //store received data
 8001944:	2120      	movs	r1, #32
 8001946:	480e      	ldr	r0, [pc, #56]	; (8001980 <process_received_data_from_node+0x40>)
 8001948:	f7fe fee2 	bl	8000710 <NRF24_read>
	received_data_from_nodes[31] = '\r'; //add \n in the data
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <process_received_data_from_node+0x40>)
 800194e:	220d      	movs	r2, #13
 8001950:	77da      	strb	r2, [r3, #31]
	received_data_from_nodes[32] = '\n'; //add \n in the data
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <process_received_data_from_node+0x40>)
 8001954:	220a      	movs	r2, #10
 8001956:	f883 2020 	strb.w	r2, [r3, #32]
	//trim message to 6 char and send it to server
	memcpy(trimmed_data_received_from_node,&received_data_from_nodes,5);
 800195a:	2205      	movs	r2, #5
 800195c:	4908      	ldr	r1, [pc, #32]	; (8001980 <process_received_data_from_node+0x40>)
 800195e:	4809      	ldr	r0, [pc, #36]	; (8001984 <process_received_data_from_node+0x44>)
 8001960:	f002 fcd8 	bl	8004314 <memcpy>
	//send data to debug port
	HAL_UART_Transmit(&huart2, (uint8_t*) trimmed_data_received_from_node, 5,10); //send data to debug port
 8001964:	230a      	movs	r3, #10
 8001966:	2205      	movs	r2, #5
 8001968:	4906      	ldr	r1, [pc, #24]	; (8001984 <process_received_data_from_node+0x44>)
 800196a:	4807      	ldr	r0, [pc, #28]	; (8001988 <process_received_data_from_node+0x48>)
 800196c:	f001 ffbd 	bl	80038ea <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*) trimmed_data_received_from_node, 5,10); //send data to debug port
 8001970:	230a      	movs	r3, #10
 8001972:	2205      	movs	r2, #5
 8001974:	4903      	ldr	r1, [pc, #12]	; (8001984 <process_received_data_from_node+0x44>)
 8001976:	4805      	ldr	r0, [pc, #20]	; (800198c <process_received_data_from_node+0x4c>)
 8001978:	f001 ffb7 	bl	80038ea <HAL_UART_Transmit>
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	2000023c 	.word	0x2000023c
 8001984:	20000270 	.word	0x20000270
 8001988:	200001f8 	.word	0x200001f8
 800198c:	200001b4 	.word	0x200001b4

08001990 <process_data_rcvd_frm_srvr>:
void process_data_rcvd_frm_srvr(void){
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <process_data_rcvd_frm_srvr+0x24>)
 8001996:	681b      	ldr	r3, [r3, #0]
	memcpy(trimmed_data_rcvd_from_srvr,&received_data_from_srvr,4);
 8001998:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <process_data_rcvd_frm_srvr+0x28>)
 800199a:	6013      	str	r3, [r2, #0]
	memcpy(node_id_drom_srvr,&trimmed_data_rcvd_from_srvr,3);
 800199c:	2203      	movs	r2, #3
 800199e:	4906      	ldr	r1, [pc, #24]	; (80019b8 <process_data_rcvd_frm_srvr+0x28>)
 80019a0:	4806      	ldr	r0, [pc, #24]	; (80019bc <process_data_rcvd_frm_srvr+0x2c>)
 80019a2:	f002 fcb7 	bl	8004314 <memcpy>
	node_status_from_srvr[0] =  trimmed_data_rcvd_from_srvr[4];
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <process_data_rcvd_frm_srvr+0x28>)
 80019a8:	791a      	ldrb	r2, [r3, #4]
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <process_data_rcvd_frm_srvr+0x30>)
 80019ac:	701a      	strb	r2, [r3, #0]
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000278 	.word	0x20000278
 80019b8:	200002a0 	.word	0x200002a0
 80019bc:	200002a8 	.word	0x200002a8
 80019c0:	200002ac 	.word	0x200002ac

080019c4 <check_id_for_tx_mode>:
void check_id_for_tx_mode(){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
HAL_GPIO_TogglePin(LED_pin_GPIO_Port, LED_pin_Pin);
 80019c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019cc:	480f      	ldr	r0, [pc, #60]	; (8001a0c <check_id_for_tx_mode+0x48>)
 80019ce:	f000 fd9f 	bl	8002510 <HAL_GPIO_TogglePin>
if((strcmp((char*) node_id_drom_srvr, "001") == 0)){
 80019d2:	490f      	ldr	r1, [pc, #60]	; (8001a10 <check_id_for_tx_mode+0x4c>)
 80019d4:	480f      	ldr	r0, [pc, #60]	; (8001a14 <check_id_for_tx_mode+0x50>)
 80019d6:	f7fe fbb9 	bl	800014c <strcmp>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d105      	bne.n	80019ec <check_id_for_tx_mode+0x28>
	pip_add_for_data_tx = n_add_1;
 80019e0:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <check_id_for_tx_mode+0x54>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	490d      	ldr	r1, [pc, #52]	; (8001a1c <check_id_for_tx_mode+0x58>)
 80019e8:	e9c1 2300 	strd	r2, r3, [r1]
}
if((strcmp((char*) node_id_drom_srvr, "002") == 0)){
 80019ec:	490c      	ldr	r1, [pc, #48]	; (8001a20 <check_id_for_tx_mode+0x5c>)
 80019ee:	4809      	ldr	r0, [pc, #36]	; (8001a14 <check_id_for_tx_mode+0x50>)
 80019f0:	f7fe fbac 	bl	800014c <strcmp>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d105      	bne.n	8001a06 <check_id_for_tx_mode+0x42>
	pip_add_for_data_tx = n_add_2;
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <check_id_for_tx_mode+0x60>)
 80019fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a00:	4906      	ldr	r1, [pc, #24]	; (8001a1c <check_id_for_tx_mode+0x58>)
 8001a02:	e9c1 2300 	strd	r2, r3, [r1]
}
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40011000 	.word	0x40011000
 8001a10:	080051fc 	.word	0x080051fc
 8001a14:	200002a8 	.word	0x200002a8
 8001a18:	20000008 	.word	0x20000008
 8001a1c:	20000298 	.word	0x20000298
 8001a20:	08005200 	.word	0x08005200
 8001a24:	20000010 	.word	0x20000010

08001a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a2c:	b672      	cpsid	i
}
 8001a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_TogglePin(LED_pin_GPIO_Port, LED_pin_Pin);
 8001a30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a34:	4803      	ldr	r0, [pc, #12]	; (8001a44 <Error_Handler+0x1c>)
 8001a36:	f000 fd6b 	bl	8002510 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8001a3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a3e:	f000 f9f1 	bl	8001e24 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_pin_GPIO_Port, LED_pin_Pin);
 8001a42:	e7f5      	b.n	8001a30 <Error_Handler+0x8>
 8001a44:	40011000 	.word	0x40011000

08001a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <HAL_MspInit+0x40>)
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	4a0d      	ldr	r2, [pc, #52]	; (8001a88 <HAL_MspInit+0x40>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6193      	str	r3, [r2, #24]
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_MspInit+0x40>)
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <HAL_MspInit+0x40>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	4a07      	ldr	r2, [pc, #28]	; (8001a88 <HAL_MspInit+0x40>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	61d3      	str	r3, [r2, #28]
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_MspInit+0x40>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	40021000 	.word	0x40021000

08001a8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0310 	add.w	r3, r7, #16
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a1b      	ldr	r2, [pc, #108]	; (8001b14 <HAL_SPI_MspInit+0x88>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d12f      	bne.n	8001b0c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aac:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <HAL_SPI_MspInit+0x8c>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	4a19      	ldr	r2, [pc, #100]	; (8001b18 <HAL_SPI_MspInit+0x8c>)
 8001ab2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ab6:	6193      	str	r3, [r2, #24]
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <HAL_SPI_MspInit+0x8c>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <HAL_SPI_MspInit+0x8c>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	4a13      	ldr	r2, [pc, #76]	; (8001b18 <HAL_SPI_MspInit+0x8c>)
 8001aca:	f043 0304 	orr.w	r3, r3, #4
 8001ace:	6193      	str	r3, [r2, #24]
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <HAL_SPI_MspInit+0x8c>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001adc:	23a0      	movs	r3, #160	; 0xa0
 8001ade:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	4619      	mov	r1, r3
 8001aee:	480b      	ldr	r0, [pc, #44]	; (8001b1c <HAL_SPI_MspInit+0x90>)
 8001af0:	f000 fb7a 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001af4:	2340      	movs	r3, #64	; 0x40
 8001af6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f107 0310 	add.w	r3, r7, #16
 8001b04:	4619      	mov	r1, r3
 8001b06:	4805      	ldr	r0, [pc, #20]	; (8001b1c <HAL_SPI_MspInit+0x90>)
 8001b08:	f000 fb6e 	bl	80021e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b0c:	bf00      	nop
 8001b0e:	3720      	adds	r7, #32
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40013000 	.word	0x40013000
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40010800 	.word	0x40010800

08001b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	; 0x28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0318 	add.w	r3, r7, #24
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a3b      	ldr	r2, [pc, #236]	; (8001c28 <HAL_UART_MspInit+0x108>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d13a      	bne.n	8001bb6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b40:	4b3a      	ldr	r3, [pc, #232]	; (8001c2c <HAL_UART_MspInit+0x10c>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	4a39      	ldr	r2, [pc, #228]	; (8001c2c <HAL_UART_MspInit+0x10c>)
 8001b46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4a:	6193      	str	r3, [r2, #24]
 8001b4c:	4b37      	ldr	r3, [pc, #220]	; (8001c2c <HAL_UART_MspInit+0x10c>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b58:	4b34      	ldr	r3, [pc, #208]	; (8001c2c <HAL_UART_MspInit+0x10c>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	4a33      	ldr	r2, [pc, #204]	; (8001c2c <HAL_UART_MspInit+0x10c>)
 8001b5e:	f043 0304 	orr.w	r3, r3, #4
 8001b62:	6193      	str	r3, [r2, #24]
 8001b64:	4b31      	ldr	r3, [pc, #196]	; (8001c2c <HAL_UART_MspInit+0x10c>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	2302      	movs	r3, #2
 8001b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7e:	f107 0318 	add.w	r3, r7, #24
 8001b82:	4619      	mov	r1, r3
 8001b84:	482a      	ldr	r0, [pc, #168]	; (8001c30 <HAL_UART_MspInit+0x110>)
 8001b86:	f000 fb2f 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b98:	f107 0318 	add.w	r3, r7, #24
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4824      	ldr	r0, [pc, #144]	; (8001c30 <HAL_UART_MspInit+0x110>)
 8001ba0:	f000 fb22 	bl	80021e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	2025      	movs	r0, #37	; 0x25
 8001baa:	f000 fa36 	bl	800201a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bae:	2025      	movs	r0, #37	; 0x25
 8001bb0:	f000 fa4f 	bl	8002052 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bb4:	e034      	b.n	8001c20 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a1e      	ldr	r2, [pc, #120]	; (8001c34 <HAL_UART_MspInit+0x114>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d12f      	bne.n	8001c20 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bc0:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <HAL_UART_MspInit+0x10c>)
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	4a19      	ldr	r2, [pc, #100]	; (8001c2c <HAL_UART_MspInit+0x10c>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	61d3      	str	r3, [r2, #28]
 8001bcc:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <HAL_UART_MspInit+0x10c>)
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd8:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <HAL_UART_MspInit+0x10c>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	4a13      	ldr	r2, [pc, #76]	; (8001c2c <HAL_UART_MspInit+0x10c>)
 8001bde:	f043 0304 	orr.w	r3, r3, #4
 8001be2:	6193      	str	r3, [r2, #24]
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_UART_MspInit+0x10c>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfc:	f107 0318 	add.w	r3, r7, #24
 8001c00:	4619      	mov	r1, r3
 8001c02:	480b      	ldr	r0, [pc, #44]	; (8001c30 <HAL_UART_MspInit+0x110>)
 8001c04:	f000 faf0 	bl	80021e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c08:	2308      	movs	r3, #8
 8001c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c14:	f107 0318 	add.w	r3, r7, #24
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <HAL_UART_MspInit+0x110>)
 8001c1c:	f000 fae4 	bl	80021e8 <HAL_GPIO_Init>
}
 8001c20:	bf00      	nop
 8001c22:	3728      	adds	r7, #40	; 0x28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40013800 	.word	0x40013800
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40010800 	.word	0x40010800
 8001c34:	40004400 	.word	0x40004400

08001c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <NMI_Handler+0x4>

08001c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <HardFault_Handler+0x4>

08001c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <MemManage_Handler+0x4>

08001c4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <BusFault_Handler+0x4>

08001c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <UsageFault_Handler+0x4>

08001c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr

08001c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c7e:	f000 f8b5 	bl	8001dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <USART1_IRQHandler+0x10>)
 8001c8e:	f001 feef 	bl	8003a70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200001b4 	.word	0x200001b4

08001c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca4:	4a14      	ldr	r2, [pc, #80]	; (8001cf8 <_sbrk+0x5c>)
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <_sbrk+0x60>)
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <_sbrk+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d102      	bne.n	8001cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <_sbrk+0x64>)
 8001cba:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <_sbrk+0x68>)
 8001cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d207      	bcs.n	8001cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ccc:	f002 faf8 	bl	80042c0 <__errno>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cda:	e009      	b.n	8001cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cdc:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <_sbrk+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <_sbrk+0x64>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <_sbrk+0x64>)
 8001cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cee:	68fb      	ldr	r3, [r7, #12]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20002800 	.word	0x20002800
 8001cfc:	00000400 	.word	0x00000400
 8001d00:	200002b0 	.word	0x200002b0
 8001d04:	200002c8 	.word	0x200002c8

08001d08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d14:	480c      	ldr	r0, [pc, #48]	; (8001d48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d16:	490d      	ldr	r1, [pc, #52]	; (8001d4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d18:	4a0d      	ldr	r2, [pc, #52]	; (8001d50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d1c:	e002      	b.n	8001d24 <LoopCopyDataInit>

08001d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d22:	3304      	adds	r3, #4

08001d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d28:	d3f9      	bcc.n	8001d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d2c:	4c0a      	ldr	r4, [pc, #40]	; (8001d58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d30:	e001      	b.n	8001d36 <LoopFillZerobss>

08001d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d34:	3204      	adds	r2, #4

08001d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d38:	d3fb      	bcc.n	8001d32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d3a:	f7ff ffe5 	bl	8001d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d3e:	f002 fac5 	bl	80042cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d42:	f7ff fba7 	bl	8001494 <main>
  bx lr
 8001d46:	4770      	bx	lr
  ldr r0, =_sdata
 8001d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d4c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001d50:	08005278 	.word	0x08005278
  ldr r2, =_sbss
 8001d54:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001d58:	200002c8 	.word	0x200002c8

08001d5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d5c:	e7fe      	b.n	8001d5c <ADC1_2_IRQHandler>
	...

08001d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <HAL_Init+0x28>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a07      	ldr	r2, [pc, #28]	; (8001d88 <HAL_Init+0x28>)
 8001d6a:	f043 0310 	orr.w	r3, r3, #16
 8001d6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d70:	2003      	movs	r0, #3
 8001d72:	f000 f947 	bl	8002004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d76:	200f      	movs	r0, #15
 8001d78:	f000 f808 	bl	8001d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d7c:	f7ff fe64 	bl	8001a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40022000 	.word	0x40022000

08001d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_InitTick+0x54>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_InitTick+0x58>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 f95f 	bl	800206e <HAL_SYSTICK_Config>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00e      	b.n	8001dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b0f      	cmp	r3, #15
 8001dbe:	d80a      	bhi.n	8001dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f000 f927 	bl	800201a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dcc:	4a06      	ldr	r2, [pc, #24]	; (8001de8 <HAL_InitTick+0x5c>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e000      	b.n	8001dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000018 	.word	0x20000018
 8001de4:	20000020 	.word	0x20000020
 8001de8:	2000001c 	.word	0x2000001c

08001dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_IncTick+0x1c>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_IncTick+0x20>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	4a03      	ldr	r2, [pc, #12]	; (8001e0c <HAL_IncTick+0x20>)
 8001dfe:	6013      	str	r3, [r2, #0]
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr
 8001e08:	20000020 	.word	0x20000020
 8001e0c:	200002b4 	.word	0x200002b4

08001e10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return uwTick;
 8001e14:	4b02      	ldr	r3, [pc, #8]	; (8001e20 <HAL_GetTick+0x10>)
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr
 8001e20:	200002b4 	.word	0x200002b4

08001e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e2c:	f7ff fff0 	bl	8001e10 <HAL_GetTick>
 8001e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3c:	d005      	beq.n	8001e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_Delay+0x44>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e4a:	bf00      	nop
 8001e4c:	f7ff ffe0 	bl	8001e10 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d8f7      	bhi.n	8001e4c <HAL_Delay+0x28>
  {
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000020 	.word	0x20000020

08001e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	60d3      	str	r3, [r2, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <__NVIC_GetPriorityGrouping+0x18>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 0307 	and.w	r3, r3, #7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	db0b      	blt.n	8001efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	f003 021f 	and.w	r2, r3, #31
 8001ee8:	4906      	ldr	r1, [pc, #24]	; (8001f04 <__NVIC_EnableIRQ+0x34>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	e000e100 	.word	0xe000e100

08001f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	6039      	str	r1, [r7, #0]
 8001f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	db0a      	blt.n	8001f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	490c      	ldr	r1, [pc, #48]	; (8001f54 <__NVIC_SetPriority+0x4c>)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	0112      	lsls	r2, r2, #4
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f30:	e00a      	b.n	8001f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	4908      	ldr	r1, [pc, #32]	; (8001f58 <__NVIC_SetPriority+0x50>)
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	3b04      	subs	r3, #4
 8001f40:	0112      	lsls	r2, r2, #4
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	440b      	add	r3, r1
 8001f46:	761a      	strb	r2, [r3, #24]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	e000e100 	.word	0xe000e100
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b089      	sub	sp, #36	; 0x24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f1c3 0307 	rsb	r3, r3, #7
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	bf28      	it	cs
 8001f7a:	2304      	movcs	r3, #4
 8001f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3304      	adds	r3, #4
 8001f82:	2b06      	cmp	r3, #6
 8001f84:	d902      	bls.n	8001f8c <NVIC_EncodePriority+0x30>
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3b03      	subs	r3, #3
 8001f8a:	e000      	b.n	8001f8e <NVIC_EncodePriority+0x32>
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f90:	f04f 32ff 	mov.w	r2, #4294967295
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43da      	mvns	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	fa01 f303 	lsl.w	r3, r1, r3
 8001fae:	43d9      	mvns	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	4313      	orrs	r3, r2
         );
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3724      	adds	r7, #36	; 0x24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd0:	d301      	bcc.n	8001fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00f      	b.n	8001ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <SysTick_Config+0x40>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fde:	210f      	movs	r1, #15
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	f7ff ff90 	bl	8001f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <SysTick_Config+0x40>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fee:	4b04      	ldr	r3, [pc, #16]	; (8002000 <SysTick_Config+0x40>)
 8001ff0:	2207      	movs	r2, #7
 8001ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	e000e010 	.word	0xe000e010

08002004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff ff2d 	bl	8001e6c <__NVIC_SetPriorityGrouping>
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	4603      	mov	r3, r0
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
 8002026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800202c:	f7ff ff42 	bl	8001eb4 <__NVIC_GetPriorityGrouping>
 8002030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	6978      	ldr	r0, [r7, #20]
 8002038:	f7ff ff90 	bl	8001f5c <NVIC_EncodePriority>
 800203c:	4602      	mov	r2, r0
 800203e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff5f 	bl	8001f08 <__NVIC_SetPriority>
}
 800204a:	bf00      	nop
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	4603      	mov	r3, r0
 800205a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800205c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff35 	bl	8001ed0 <__NVIC_EnableIRQ>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff ffa2 	bl	8001fc0 <SysTick_Config>
 800207c:	4603      	mov	r3, r0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002086:	b480      	push	{r7}
 8002088:	b085      	sub	sp, #20
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002098:	2b02      	cmp	r3, #2
 800209a:	d008      	beq.n	80020ae <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2204      	movs	r2, #4
 80020a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e020      	b.n	80020f0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 020e 	bic.w	r2, r2, #14
 80020bc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0201 	bic.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d6:	2101      	movs	r1, #1
 80020d8:	fa01 f202 	lsl.w	r2, r1, r2
 80020dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
	...

080020fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800210e:	2b02      	cmp	r3, #2
 8002110:	d005      	beq.n	800211e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2204      	movs	r2, #4
 8002116:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	e051      	b.n	80021c2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 020e 	bic.w	r2, r2, #14
 800212c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0201 	bic.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a22      	ldr	r2, [pc, #136]	; (80021cc <HAL_DMA_Abort_IT+0xd0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d029      	beq.n	800219c <HAL_DMA_Abort_IT+0xa0>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a20      	ldr	r2, [pc, #128]	; (80021d0 <HAL_DMA_Abort_IT+0xd4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d022      	beq.n	8002198 <HAL_DMA_Abort_IT+0x9c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a1f      	ldr	r2, [pc, #124]	; (80021d4 <HAL_DMA_Abort_IT+0xd8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d01a      	beq.n	8002192 <HAL_DMA_Abort_IT+0x96>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1d      	ldr	r2, [pc, #116]	; (80021d8 <HAL_DMA_Abort_IT+0xdc>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d012      	beq.n	800218c <HAL_DMA_Abort_IT+0x90>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a1c      	ldr	r2, [pc, #112]	; (80021dc <HAL_DMA_Abort_IT+0xe0>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00a      	beq.n	8002186 <HAL_DMA_Abort_IT+0x8a>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1a      	ldr	r2, [pc, #104]	; (80021e0 <HAL_DMA_Abort_IT+0xe4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d102      	bne.n	8002180 <HAL_DMA_Abort_IT+0x84>
 800217a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800217e:	e00e      	b.n	800219e <HAL_DMA_Abort_IT+0xa2>
 8002180:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002184:	e00b      	b.n	800219e <HAL_DMA_Abort_IT+0xa2>
 8002186:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800218a:	e008      	b.n	800219e <HAL_DMA_Abort_IT+0xa2>
 800218c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002190:	e005      	b.n	800219e <HAL_DMA_Abort_IT+0xa2>
 8002192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002196:	e002      	b.n	800219e <HAL_DMA_Abort_IT+0xa2>
 8002198:	2310      	movs	r3, #16
 800219a:	e000      	b.n	800219e <HAL_DMA_Abort_IT+0xa2>
 800219c:	2301      	movs	r3, #1
 800219e:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <HAL_DMA_Abort_IT+0xe8>)
 80021a0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	4798      	blx	r3
    } 
  }
  return status;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40020008 	.word	0x40020008
 80021d0:	4002001c 	.word	0x4002001c
 80021d4:	40020030 	.word	0x40020030
 80021d8:	40020044 	.word	0x40020044
 80021dc:	40020058 	.word	0x40020058
 80021e0:	4002006c 	.word	0x4002006c
 80021e4:	40020000 	.word	0x40020000

080021e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b08b      	sub	sp, #44	; 0x2c
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021f2:	2300      	movs	r3, #0
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021fa:	e161      	b.n	80024c0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021fc:	2201      	movs	r2, #1
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	69fa      	ldr	r2, [r7, #28]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	429a      	cmp	r2, r3
 8002216:	f040 8150 	bne.w	80024ba <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4a97      	ldr	r2, [pc, #604]	; (800247c <HAL_GPIO_Init+0x294>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d05e      	beq.n	80022e2 <HAL_GPIO_Init+0xfa>
 8002224:	4a95      	ldr	r2, [pc, #596]	; (800247c <HAL_GPIO_Init+0x294>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d875      	bhi.n	8002316 <HAL_GPIO_Init+0x12e>
 800222a:	4a95      	ldr	r2, [pc, #596]	; (8002480 <HAL_GPIO_Init+0x298>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d058      	beq.n	80022e2 <HAL_GPIO_Init+0xfa>
 8002230:	4a93      	ldr	r2, [pc, #588]	; (8002480 <HAL_GPIO_Init+0x298>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d86f      	bhi.n	8002316 <HAL_GPIO_Init+0x12e>
 8002236:	4a93      	ldr	r2, [pc, #588]	; (8002484 <HAL_GPIO_Init+0x29c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d052      	beq.n	80022e2 <HAL_GPIO_Init+0xfa>
 800223c:	4a91      	ldr	r2, [pc, #580]	; (8002484 <HAL_GPIO_Init+0x29c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d869      	bhi.n	8002316 <HAL_GPIO_Init+0x12e>
 8002242:	4a91      	ldr	r2, [pc, #580]	; (8002488 <HAL_GPIO_Init+0x2a0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d04c      	beq.n	80022e2 <HAL_GPIO_Init+0xfa>
 8002248:	4a8f      	ldr	r2, [pc, #572]	; (8002488 <HAL_GPIO_Init+0x2a0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d863      	bhi.n	8002316 <HAL_GPIO_Init+0x12e>
 800224e:	4a8f      	ldr	r2, [pc, #572]	; (800248c <HAL_GPIO_Init+0x2a4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d046      	beq.n	80022e2 <HAL_GPIO_Init+0xfa>
 8002254:	4a8d      	ldr	r2, [pc, #564]	; (800248c <HAL_GPIO_Init+0x2a4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d85d      	bhi.n	8002316 <HAL_GPIO_Init+0x12e>
 800225a:	2b12      	cmp	r3, #18
 800225c:	d82a      	bhi.n	80022b4 <HAL_GPIO_Init+0xcc>
 800225e:	2b12      	cmp	r3, #18
 8002260:	d859      	bhi.n	8002316 <HAL_GPIO_Init+0x12e>
 8002262:	a201      	add	r2, pc, #4	; (adr r2, 8002268 <HAL_GPIO_Init+0x80>)
 8002264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002268:	080022e3 	.word	0x080022e3
 800226c:	080022bd 	.word	0x080022bd
 8002270:	080022cf 	.word	0x080022cf
 8002274:	08002311 	.word	0x08002311
 8002278:	08002317 	.word	0x08002317
 800227c:	08002317 	.word	0x08002317
 8002280:	08002317 	.word	0x08002317
 8002284:	08002317 	.word	0x08002317
 8002288:	08002317 	.word	0x08002317
 800228c:	08002317 	.word	0x08002317
 8002290:	08002317 	.word	0x08002317
 8002294:	08002317 	.word	0x08002317
 8002298:	08002317 	.word	0x08002317
 800229c:	08002317 	.word	0x08002317
 80022a0:	08002317 	.word	0x08002317
 80022a4:	08002317 	.word	0x08002317
 80022a8:	08002317 	.word	0x08002317
 80022ac:	080022c5 	.word	0x080022c5
 80022b0:	080022d9 	.word	0x080022d9
 80022b4:	4a76      	ldr	r2, [pc, #472]	; (8002490 <HAL_GPIO_Init+0x2a8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022ba:	e02c      	b.n	8002316 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	623b      	str	r3, [r7, #32]
          break;
 80022c2:	e029      	b.n	8002318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	3304      	adds	r3, #4
 80022ca:	623b      	str	r3, [r7, #32]
          break;
 80022cc:	e024      	b.n	8002318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	3308      	adds	r3, #8
 80022d4:	623b      	str	r3, [r7, #32]
          break;
 80022d6:	e01f      	b.n	8002318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	330c      	adds	r3, #12
 80022de:	623b      	str	r3, [r7, #32]
          break;
 80022e0:	e01a      	b.n	8002318 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d102      	bne.n	80022f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022ea:	2304      	movs	r3, #4
 80022ec:	623b      	str	r3, [r7, #32]
          break;
 80022ee:	e013      	b.n	8002318 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d105      	bne.n	8002304 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022f8:	2308      	movs	r3, #8
 80022fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	611a      	str	r2, [r3, #16]
          break;
 8002302:	e009      	b.n	8002318 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002304:	2308      	movs	r3, #8
 8002306:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69fa      	ldr	r2, [r7, #28]
 800230c:	615a      	str	r2, [r3, #20]
          break;
 800230e:	e003      	b.n	8002318 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002310:	2300      	movs	r3, #0
 8002312:	623b      	str	r3, [r7, #32]
          break;
 8002314:	e000      	b.n	8002318 <HAL_GPIO_Init+0x130>
          break;
 8002316:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	2bff      	cmp	r3, #255	; 0xff
 800231c:	d801      	bhi.n	8002322 <HAL_GPIO_Init+0x13a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	e001      	b.n	8002326 <HAL_GPIO_Init+0x13e>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3304      	adds	r3, #4
 8002326:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	2bff      	cmp	r3, #255	; 0xff
 800232c:	d802      	bhi.n	8002334 <HAL_GPIO_Init+0x14c>
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	e002      	b.n	800233a <HAL_GPIO_Init+0x152>
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	3b08      	subs	r3, #8
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	210f      	movs	r1, #15
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	fa01 f303 	lsl.w	r3, r1, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	401a      	ands	r2, r3
 800234c:	6a39      	ldr	r1, [r7, #32]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	fa01 f303 	lsl.w	r3, r1, r3
 8002354:	431a      	orrs	r2, r3
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 80a9 	beq.w	80024ba <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002368:	4b4a      	ldr	r3, [pc, #296]	; (8002494 <HAL_GPIO_Init+0x2ac>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	4a49      	ldr	r2, [pc, #292]	; (8002494 <HAL_GPIO_Init+0x2ac>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6193      	str	r3, [r2, #24]
 8002374:	4b47      	ldr	r3, [pc, #284]	; (8002494 <HAL_GPIO_Init+0x2ac>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002380:	4a45      	ldr	r2, [pc, #276]	; (8002498 <HAL_GPIO_Init+0x2b0>)
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	089b      	lsrs	r3, r3, #2
 8002386:	3302      	adds	r3, #2
 8002388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	220f      	movs	r2, #15
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4013      	ands	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a3d      	ldr	r2, [pc, #244]	; (800249c <HAL_GPIO_Init+0x2b4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d00d      	beq.n	80023c8 <HAL_GPIO_Init+0x1e0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a3c      	ldr	r2, [pc, #240]	; (80024a0 <HAL_GPIO_Init+0x2b8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d007      	beq.n	80023c4 <HAL_GPIO_Init+0x1dc>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a3b      	ldr	r2, [pc, #236]	; (80024a4 <HAL_GPIO_Init+0x2bc>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d101      	bne.n	80023c0 <HAL_GPIO_Init+0x1d8>
 80023bc:	2302      	movs	r3, #2
 80023be:	e004      	b.n	80023ca <HAL_GPIO_Init+0x1e2>
 80023c0:	2303      	movs	r3, #3
 80023c2:	e002      	b.n	80023ca <HAL_GPIO_Init+0x1e2>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <HAL_GPIO_Init+0x1e2>
 80023c8:	2300      	movs	r3, #0
 80023ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023cc:	f002 0203 	and.w	r2, r2, #3
 80023d0:	0092      	lsls	r2, r2, #2
 80023d2:	4093      	lsls	r3, r2
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023da:	492f      	ldr	r1, [pc, #188]	; (8002498 <HAL_GPIO_Init+0x2b0>)
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	089b      	lsrs	r3, r3, #2
 80023e0:	3302      	adds	r3, #2
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d006      	beq.n	8002402 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023f4:	4b2c      	ldr	r3, [pc, #176]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	492b      	ldr	r1, [pc, #172]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	600b      	str	r3, [r1, #0]
 8002400:	e006      	b.n	8002410 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002402:	4b29      	ldr	r3, [pc, #164]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	43db      	mvns	r3, r3
 800240a:	4927      	ldr	r1, [pc, #156]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 800240c:	4013      	ands	r3, r2
 800240e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d006      	beq.n	800242a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800241c:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	4921      	ldr	r1, [pc, #132]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
 8002428:	e006      	b.n	8002438 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800242a:	4b1f      	ldr	r3, [pc, #124]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	43db      	mvns	r3, r3
 8002432:	491d      	ldr	r1, [pc, #116]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 8002434:	4013      	ands	r3, r2
 8002436:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d006      	beq.n	8002452 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002444:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	4917      	ldr	r1, [pc, #92]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	608b      	str	r3, [r1, #8]
 8002450:	e006      	b.n	8002460 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002452:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	43db      	mvns	r3, r3
 800245a:	4913      	ldr	r1, [pc, #76]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 800245c:	4013      	ands	r3, r2
 800245e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01f      	beq.n	80024ac <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800246c:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	490d      	ldr	r1, [pc, #52]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	60cb      	str	r3, [r1, #12]
 8002478:	e01f      	b.n	80024ba <HAL_GPIO_Init+0x2d2>
 800247a:	bf00      	nop
 800247c:	10320000 	.word	0x10320000
 8002480:	10310000 	.word	0x10310000
 8002484:	10220000 	.word	0x10220000
 8002488:	10210000 	.word	0x10210000
 800248c:	10120000 	.word	0x10120000
 8002490:	10110000 	.word	0x10110000
 8002494:	40021000 	.word	0x40021000
 8002498:	40010000 	.word	0x40010000
 800249c:	40010800 	.word	0x40010800
 80024a0:	40010c00 	.word	0x40010c00
 80024a4:	40011000 	.word	0x40011000
 80024a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_GPIO_Init+0x2f4>)
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	4909      	ldr	r1, [pc, #36]	; (80024dc <HAL_GPIO_Init+0x2f4>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	3301      	adds	r3, #1
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f47f ae96 	bne.w	80021fc <HAL_GPIO_Init+0x14>
  }
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	372c      	adds	r7, #44	; 0x2c
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	40010400 	.word	0x40010400

080024e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	807b      	strh	r3, [r7, #2]
 80024ec:	4613      	mov	r3, r2
 80024ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024f0:	787b      	ldrb	r3, [r7, #1]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024f6:	887a      	ldrh	r2, [r7, #2]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024fc:	e003      	b.n	8002506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024fe:	887b      	ldrh	r3, [r7, #2]
 8002500:	041a      	lsls	r2, r3, #16
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	611a      	str	r2, [r3, #16]
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4013      	ands	r3, r2
 8002528:	041a      	lsls	r2, r3, #16
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	43d9      	mvns	r1, r3
 800252e:	887b      	ldrh	r3, [r7, #2]
 8002530:	400b      	ands	r3, r1
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	611a      	str	r2, [r3, #16]
}
 8002538:	bf00      	nop
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
	...

08002544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e272      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 8087 	beq.w	8002672 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002564:	4b92      	ldr	r3, [pc, #584]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 030c 	and.w	r3, r3, #12
 800256c:	2b04      	cmp	r3, #4
 800256e:	d00c      	beq.n	800258a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002570:	4b8f      	ldr	r3, [pc, #572]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 030c 	and.w	r3, r3, #12
 8002578:	2b08      	cmp	r3, #8
 800257a:	d112      	bne.n	80025a2 <HAL_RCC_OscConfig+0x5e>
 800257c:	4b8c      	ldr	r3, [pc, #560]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002588:	d10b      	bne.n	80025a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258a:	4b89      	ldr	r3, [pc, #548]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d06c      	beq.n	8002670 <HAL_RCC_OscConfig+0x12c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d168      	bne.n	8002670 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e24c      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025aa:	d106      	bne.n	80025ba <HAL_RCC_OscConfig+0x76>
 80025ac:	4b80      	ldr	r3, [pc, #512]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a7f      	ldr	r2, [pc, #508]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	e02e      	b.n	8002618 <HAL_RCC_OscConfig+0xd4>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10c      	bne.n	80025dc <HAL_RCC_OscConfig+0x98>
 80025c2:	4b7b      	ldr	r3, [pc, #492]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a7a      	ldr	r2, [pc, #488]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	4b78      	ldr	r3, [pc, #480]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a77      	ldr	r2, [pc, #476]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	e01d      	b.n	8002618 <HAL_RCC_OscConfig+0xd4>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0xbc>
 80025e6:	4b72      	ldr	r3, [pc, #456]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a71      	ldr	r2, [pc, #452]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	4b6f      	ldr	r3, [pc, #444]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a6e      	ldr	r2, [pc, #440]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e00b      	b.n	8002618 <HAL_RCC_OscConfig+0xd4>
 8002600:	4b6b      	ldr	r3, [pc, #428]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a6a      	ldr	r2, [pc, #424]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	4b68      	ldr	r3, [pc, #416]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a67      	ldr	r2, [pc, #412]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002616:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d013      	beq.n	8002648 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7ff fbf6 	bl	8001e10 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002628:	f7ff fbf2 	bl	8001e10 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	; 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e200      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	4b5d      	ldr	r3, [pc, #372]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0xe4>
 8002646:	e014      	b.n	8002672 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7ff fbe2 	bl	8001e10 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002650:	f7ff fbde 	bl	8001e10 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	; 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e1ec      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002662:	4b53      	ldr	r3, [pc, #332]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x10c>
 800266e:	e000      	b.n	8002672 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d063      	beq.n	8002746 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800267e:	4b4c      	ldr	r3, [pc, #304]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00b      	beq.n	80026a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800268a:	4b49      	ldr	r3, [pc, #292]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b08      	cmp	r3, #8
 8002694:	d11c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x18c>
 8002696:	4b46      	ldr	r3, [pc, #280]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d116      	bne.n	80026d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a2:	4b43      	ldr	r3, [pc, #268]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <HAL_RCC_OscConfig+0x176>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d001      	beq.n	80026ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e1c0      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ba:	4b3d      	ldr	r3, [pc, #244]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4939      	ldr	r1, [pc, #228]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ce:	e03a      	b.n	8002746 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d020      	beq.n	800271a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d8:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <HAL_RCC_OscConfig+0x270>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026de:	f7ff fb97 	bl	8001e10 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e6:	f7ff fb93 	bl	8001e10 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e1a1      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f8:	4b2d      	ldr	r3, [pc, #180]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002704:	4b2a      	ldr	r3, [pc, #168]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4927      	ldr	r1, [pc, #156]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002714:	4313      	orrs	r3, r2
 8002716:	600b      	str	r3, [r1, #0]
 8002718:	e015      	b.n	8002746 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800271a:	4b26      	ldr	r3, [pc, #152]	; (80027b4 <HAL_RCC_OscConfig+0x270>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7ff fb76 	bl	8001e10 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002728:	f7ff fb72 	bl	8001e10 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e180      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273a:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d03a      	beq.n	80027c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d019      	beq.n	800278e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800275a:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <HAL_RCC_OscConfig+0x274>)
 800275c:	2201      	movs	r2, #1
 800275e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002760:	f7ff fb56 	bl	8001e10 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002768:	f7ff fb52 	bl	8001e10 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e160      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277a:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <HAL_RCC_OscConfig+0x26c>)
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002786:	2001      	movs	r0, #1
 8002788:	f000 fad8 	bl	8002d3c <RCC_Delay>
 800278c:	e01c      	b.n	80027c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800278e:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <HAL_RCC_OscConfig+0x274>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002794:	f7ff fb3c 	bl	8001e10 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800279a:	e00f      	b.n	80027bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800279c:	f7ff fb38 	bl	8001e10 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d908      	bls.n	80027bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e146      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000
 80027b4:	42420000 	.word	0x42420000
 80027b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027bc:	4b92      	ldr	r3, [pc, #584]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1e9      	bne.n	800279c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 80a6 	beq.w	8002922 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d6:	2300      	movs	r3, #0
 80027d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027da:	4b8b      	ldr	r3, [pc, #556]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10d      	bne.n	8002802 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e6:	4b88      	ldr	r3, [pc, #544]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	4a87      	ldr	r2, [pc, #540]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f0:	61d3      	str	r3, [r2, #28]
 80027f2:	4b85      	ldr	r3, [pc, #532]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fe:	2301      	movs	r3, #1
 8002800:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002802:	4b82      	ldr	r3, [pc, #520]	; (8002a0c <HAL_RCC_OscConfig+0x4c8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280a:	2b00      	cmp	r3, #0
 800280c:	d118      	bne.n	8002840 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800280e:	4b7f      	ldr	r3, [pc, #508]	; (8002a0c <HAL_RCC_OscConfig+0x4c8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a7e      	ldr	r2, [pc, #504]	; (8002a0c <HAL_RCC_OscConfig+0x4c8>)
 8002814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800281a:	f7ff faf9 	bl	8001e10 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002822:	f7ff faf5 	bl	8001e10 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b64      	cmp	r3, #100	; 0x64
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e103      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002834:	4b75      	ldr	r3, [pc, #468]	; (8002a0c <HAL_RCC_OscConfig+0x4c8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0f0      	beq.n	8002822 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d106      	bne.n	8002856 <HAL_RCC_OscConfig+0x312>
 8002848:	4b6f      	ldr	r3, [pc, #444]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	4a6e      	ldr	r2, [pc, #440]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6213      	str	r3, [r2, #32]
 8002854:	e02d      	b.n	80028b2 <HAL_RCC_OscConfig+0x36e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10c      	bne.n	8002878 <HAL_RCC_OscConfig+0x334>
 800285e:	4b6a      	ldr	r3, [pc, #424]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	4a69      	ldr	r2, [pc, #420]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	f023 0301 	bic.w	r3, r3, #1
 8002868:	6213      	str	r3, [r2, #32]
 800286a:	4b67      	ldr	r3, [pc, #412]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	4a66      	ldr	r2, [pc, #408]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	f023 0304 	bic.w	r3, r3, #4
 8002874:	6213      	str	r3, [r2, #32]
 8002876:	e01c      	b.n	80028b2 <HAL_RCC_OscConfig+0x36e>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	2b05      	cmp	r3, #5
 800287e:	d10c      	bne.n	800289a <HAL_RCC_OscConfig+0x356>
 8002880:	4b61      	ldr	r3, [pc, #388]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	4a60      	ldr	r2, [pc, #384]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	f043 0304 	orr.w	r3, r3, #4
 800288a:	6213      	str	r3, [r2, #32]
 800288c:	4b5e      	ldr	r3, [pc, #376]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	4a5d      	ldr	r2, [pc, #372]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	6213      	str	r3, [r2, #32]
 8002898:	e00b      	b.n	80028b2 <HAL_RCC_OscConfig+0x36e>
 800289a:	4b5b      	ldr	r3, [pc, #364]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	4a5a      	ldr	r2, [pc, #360]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	f023 0301 	bic.w	r3, r3, #1
 80028a4:	6213      	str	r3, [r2, #32]
 80028a6:	4b58      	ldr	r3, [pc, #352]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	4a57      	ldr	r2, [pc, #348]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	f023 0304 	bic.w	r3, r3, #4
 80028b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d015      	beq.n	80028e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ba:	f7ff faa9 	bl	8001e10 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c2:	f7ff faa5 	bl	8001e10 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e0b1      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d8:	4b4b      	ldr	r3, [pc, #300]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0ee      	beq.n	80028c2 <HAL_RCC_OscConfig+0x37e>
 80028e4:	e014      	b.n	8002910 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e6:	f7ff fa93 	bl	8001e10 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ec:	e00a      	b.n	8002904 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ee:	f7ff fa8f 	bl	8001e10 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e09b      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002904:	4b40      	ldr	r3, [pc, #256]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1ee      	bne.n	80028ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002910:	7dfb      	ldrb	r3, [r7, #23]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d105      	bne.n	8002922 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002916:	4b3c      	ldr	r3, [pc, #240]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	4a3b      	ldr	r2, [pc, #236]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002920:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 8087 	beq.w	8002a3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800292c:	4b36      	ldr	r3, [pc, #216]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 030c 	and.w	r3, r3, #12
 8002934:	2b08      	cmp	r3, #8
 8002936:	d061      	beq.n	80029fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	2b02      	cmp	r3, #2
 800293e:	d146      	bne.n	80029ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002940:	4b33      	ldr	r3, [pc, #204]	; (8002a10 <HAL_RCC_OscConfig+0x4cc>)
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002946:	f7ff fa63 	bl	8001e10 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294e:	f7ff fa5f 	bl	8001e10 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e06d      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002960:	4b29      	ldr	r3, [pc, #164]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f0      	bne.n	800294e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002974:	d108      	bne.n	8002988 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002976:	4b24      	ldr	r3, [pc, #144]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	4921      	ldr	r1, [pc, #132]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002984:	4313      	orrs	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002988:	4b1f      	ldr	r3, [pc, #124]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a19      	ldr	r1, [r3, #32]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	430b      	orrs	r3, r1
 800299a:	491b      	ldr	r1, [pc, #108]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a0:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <HAL_RCC_OscConfig+0x4cc>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a6:	f7ff fa33 	bl	8001e10 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ae:	f7ff fa2f 	bl	8001e10 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e03d      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x46a>
 80029cc:	e035      	b.n	8002a3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <HAL_RCC_OscConfig+0x4cc>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7ff fa1c 	bl	8001e10 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029dc:	f7ff fa18 	bl	8001e10 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e026      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x498>
 80029fa:	e01e      	b.n	8002a3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d107      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e019      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40007000 	.word	0x40007000
 8002a10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_RCC_OscConfig+0x500>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d106      	bne.n	8002a36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d001      	beq.n	8002a3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40021000 	.word	0x40021000

08002a48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0d0      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a5c:	4b6a      	ldr	r3, [pc, #424]	; (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d910      	bls.n	8002a8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	4b67      	ldr	r3, [pc, #412]	; (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f023 0207 	bic.w	r2, r3, #7
 8002a72:	4965      	ldr	r1, [pc, #404]	; (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	4b63      	ldr	r3, [pc, #396]	; (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0b8      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d020      	beq.n	8002ada <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa4:	4b59      	ldr	r3, [pc, #356]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4a58      	ldr	r2, [pc, #352]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002aae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002abc:	4b53      	ldr	r3, [pc, #332]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4a52      	ldr	r2, [pc, #328]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ac2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ac6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac8:	4b50      	ldr	r3, [pc, #320]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	494d      	ldr	r1, [pc, #308]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d040      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	4b47      	ldr	r3, [pc, #284]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d115      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e07f      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b06:	4b41      	ldr	r3, [pc, #260]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e073      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b16:	4b3d      	ldr	r3, [pc, #244]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e06b      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b26:	4b39      	ldr	r3, [pc, #228]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f023 0203 	bic.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4936      	ldr	r1, [pc, #216]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b38:	f7ff f96a 	bl	8001e10 <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b40:	f7ff f966 	bl	8001e10 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e053      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	4b2d      	ldr	r3, [pc, #180]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 020c 	and.w	r2, r3, #12
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d1eb      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b68:	4b27      	ldr	r3, [pc, #156]	; (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d210      	bcs.n	8002b98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 0207 	bic.w	r2, r3, #7
 8002b7e:	4922      	ldr	r1, [pc, #136]	; (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e032      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4916      	ldr	r1, [pc, #88]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bc2:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	490e      	ldr	r1, [pc, #56]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bd6:	f000 f821 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	490a      	ldr	r1, [pc, #40]	; (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002be8:	5ccb      	ldrb	r3, [r1, r3]
 8002bea:	fa22 f303 	lsr.w	r3, r2, r3
 8002bee:	4a09      	ldr	r2, [pc, #36]	; (8002c14 <HAL_RCC_ClockConfig+0x1cc>)
 8002bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_RCC_ClockConfig+0x1d0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff f8c8 	bl	8001d8c <HAL_InitTick>

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40022000 	.word	0x40022000
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	08005224 	.word	0x08005224
 8002c14:	20000018 	.word	0x20000018
 8002c18:	2000001c 	.word	0x2000001c

08002c1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c1c:	b490      	push	{r4, r7}
 8002c1e:	b08a      	sub	sp, #40	; 0x28
 8002c20:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c22:	4b29      	ldr	r3, [pc, #164]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002c24:	1d3c      	adds	r4, r7, #4
 8002c26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c2c:	f240 2301 	movw	r3, #513	; 0x201
 8002c30:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	2300      	movs	r3, #0
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c46:	4b21      	ldr	r3, [pc, #132]	; (8002ccc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d002      	beq.n	8002c5c <HAL_RCC_GetSysClockFreq+0x40>
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d003      	beq.n	8002c62 <HAL_RCC_GetSysClockFreq+0x46>
 8002c5a:	e02b      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c5c:	4b1c      	ldr	r3, [pc, #112]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c5e:	623b      	str	r3, [r7, #32]
      break;
 8002c60:	e02b      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	0c9b      	lsrs	r3, r3, #18
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	3328      	adds	r3, #40	; 0x28
 8002c6c:	443b      	add	r3, r7
 8002c6e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c72:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d012      	beq.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c7e:	4b13      	ldr	r3, [pc, #76]	; (8002ccc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	0c5b      	lsrs	r3, r3, #17
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	3328      	adds	r3, #40	; 0x28
 8002c8a:	443b      	add	r3, r7
 8002c8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c90:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	4a0e      	ldr	r2, [pc, #56]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c96:	fb03 f202 	mul.w	r2, r3, r2
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca2:	e004      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	4a0b      	ldr	r2, [pc, #44]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ca8:	fb02 f303 	mul.w	r3, r2, r3
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	623b      	str	r3, [r7, #32]
      break;
 8002cb2:	e002      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cb6:	623b      	str	r3, [r7, #32]
      break;
 8002cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cba:	6a3b      	ldr	r3, [r7, #32]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3728      	adds	r7, #40	; 0x28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc90      	pop	{r4, r7}
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	08005204 	.word	0x08005204
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	007a1200 	.word	0x007a1200
 8002cd4:	003d0900 	.word	0x003d0900

08002cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cdc:	4b02      	ldr	r3, [pc, #8]	; (8002ce8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr
 8002ce8:	20000018 	.word	0x20000018

08002cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cf0:	f7ff fff2 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	0a1b      	lsrs	r3, r3, #8
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	4903      	ldr	r1, [pc, #12]	; (8002d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d02:	5ccb      	ldrb	r3, [r1, r3]
 8002d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	08005234 	.word	0x08005234

08002d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d18:	f7ff ffde 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	0adb      	lsrs	r3, r3, #11
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	4903      	ldr	r1, [pc, #12]	; (8002d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d2a:	5ccb      	ldrb	r3, [r1, r3]
 8002d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40021000 	.word	0x40021000
 8002d38:	08005234 	.word	0x08005234

08002d3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d44:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <RCC_Delay+0x34>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a0a      	ldr	r2, [pc, #40]	; (8002d74 <RCC_Delay+0x38>)
 8002d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4e:	0a5b      	lsrs	r3, r3, #9
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	fb02 f303 	mul.w	r3, r2, r3
 8002d56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d58:	bf00      	nop
  }
  while (Delay --);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1e5a      	subs	r2, r3, #1
 8002d5e:	60fa      	str	r2, [r7, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f9      	bne.n	8002d58 <RCC_Delay+0x1c>
}
 8002d64:	bf00      	nop
 8002d66:	bf00      	nop
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr
 8002d70:	20000018 	.word	0x20000018
 8002d74:	10624dd3 	.word	0x10624dd3

08002d78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e076      	b.n	8002e78 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d108      	bne.n	8002da4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d9a:	d009      	beq.n	8002db0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	61da      	str	r2, [r3, #28]
 8002da2:	e005      	b.n	8002db0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fe fe5e 	bl	8001a8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002de6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e34:	ea42 0103 	orr.w	r1, r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	0c1a      	lsrs	r2, r3, #16
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f002 0204 	and.w	r2, r2, #4
 8002e56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	69da      	ldr	r2, [r3, #28]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_SPI_Transmit+0x22>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e126      	b.n	80030f0 <HAL_SPI_Transmit+0x270>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eaa:	f7fe ffb1 	bl	8001e10 <HAL_GetTick>
 8002eae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d002      	beq.n	8002ec6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ec4:	e10b      	b.n	80030de <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <HAL_SPI_Transmit+0x52>
 8002ecc:	88fb      	ldrh	r3, [r7, #6]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d102      	bne.n	8002ed8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ed6:	e102      	b.n	80030de <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2203      	movs	r2, #3
 8002edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	88fa      	ldrh	r2, [r7, #6]
 8002ef0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	88fa      	ldrh	r2, [r7, #6]
 8002ef6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f1e:	d10f      	bne.n	8002f40 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f3e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4a:	2b40      	cmp	r3, #64	; 0x40
 8002f4c:	d007      	beq.n	8002f5e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f66:	d14b      	bne.n	8003000 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <HAL_SPI_Transmit+0xf6>
 8002f70:	8afb      	ldrh	r3, [r7, #22]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d13e      	bne.n	8002ff4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	881a      	ldrh	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	1c9a      	adds	r2, r3, #2
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f9a:	e02b      	b.n	8002ff4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d112      	bne.n	8002fd0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	881a      	ldrh	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	1c9a      	adds	r2, r3, #2
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	86da      	strh	r2, [r3, #54]	; 0x36
 8002fce:	e011      	b.n	8002ff4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fd0:	f7fe ff1e 	bl	8001e10 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d803      	bhi.n	8002fe8 <HAL_SPI_Transmit+0x168>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe6:	d102      	bne.n	8002fee <HAL_SPI_Transmit+0x16e>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ff2:	e074      	b.n	80030de <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1ce      	bne.n	8002f9c <HAL_SPI_Transmit+0x11c>
 8002ffe:	e04c      	b.n	800309a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <HAL_SPI_Transmit+0x18e>
 8003008:	8afb      	ldrh	r3, [r7, #22]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d140      	bne.n	8003090 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	330c      	adds	r3, #12
 8003018:	7812      	ldrb	r2, [r2, #0]
 800301a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003034:	e02c      	b.n	8003090 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b02      	cmp	r3, #2
 8003042:	d113      	bne.n	800306c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	330c      	adds	r3, #12
 800304e:	7812      	ldrb	r2, [r2, #0]
 8003050:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	86da      	strh	r2, [r3, #54]	; 0x36
 800306a:	e011      	b.n	8003090 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800306c:	f7fe fed0 	bl	8001e10 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d803      	bhi.n	8003084 <HAL_SPI_Transmit+0x204>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003082:	d102      	bne.n	800308a <HAL_SPI_Transmit+0x20a>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d102      	bne.n	8003090 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800308e:	e026      	b.n	80030de <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1cd      	bne.n	8003036 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	6839      	ldr	r1, [r7, #0]
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 fbb8 	bl	8003814 <SPI_EndRxTxTransaction>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10a      	bne.n	80030ce <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030b8:	2300      	movs	r3, #0
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	77fb      	strb	r3, [r7, #31]
 80030da:	e000      	b.n	80030de <HAL_SPI_Transmit+0x25e>
  }

error:
 80030dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3720      	adds	r7, #32
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af02      	add	r7, sp, #8
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	4613      	mov	r3, r2
 8003106:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003114:	d112      	bne.n	800313c <HAL_SPI_Receive+0x44>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10e      	bne.n	800313c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2204      	movs	r2, #4
 8003122:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003126:	88fa      	ldrh	r2, [r7, #6]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	4613      	mov	r3, r2
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f8f1 	bl	800331a <HAL_SPI_TransmitReceive>
 8003138:	4603      	mov	r3, r0
 800313a:	e0ea      	b.n	8003312 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_SPI_Receive+0x52>
 8003146:	2302      	movs	r3, #2
 8003148:	e0e3      	b.n	8003312 <HAL_SPI_Receive+0x21a>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003152:	f7fe fe5d 	bl	8001e10 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b01      	cmp	r3, #1
 8003162:	d002      	beq.n	800316a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003164:	2302      	movs	r3, #2
 8003166:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003168:	e0ca      	b.n	8003300 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <HAL_SPI_Receive+0x7e>
 8003170:	88fb      	ldrh	r3, [r7, #6]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d102      	bne.n	800317c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	75fb      	strb	r3, [r7, #23]
    goto error;
 800317a:	e0c1      	b.n	8003300 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2204      	movs	r2, #4
 8003180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	88fa      	ldrh	r2, [r7, #6]
 8003194:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	88fa      	ldrh	r2, [r7, #6]
 800319a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c2:	d10f      	bne.n	80031e4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031e2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ee:	2b40      	cmp	r3, #64	; 0x40
 80031f0:	d007      	beq.n	8003202 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003200:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d162      	bne.n	80032d0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800320a:	e02e      	b.n	800326a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b01      	cmp	r3, #1
 8003218:	d115      	bne.n	8003246 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f103 020c 	add.w	r2, r3, #12
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	7812      	ldrb	r2, [r2, #0]
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800323a:	b29b      	uxth	r3, r3
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003244:	e011      	b.n	800326a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003246:	f7fe fde3 	bl	8001e10 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d803      	bhi.n	800325e <HAL_SPI_Receive+0x166>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d102      	bne.n	8003264 <HAL_SPI_Receive+0x16c>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d102      	bne.n	800326a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003268:	e04a      	b.n	8003300 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800326e:	b29b      	uxth	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1cb      	bne.n	800320c <HAL_SPI_Receive+0x114>
 8003274:	e031      	b.n	80032da <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b01      	cmp	r3, #1
 8003282:	d113      	bne.n	80032ac <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328e:	b292      	uxth	r2, r2
 8003290:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	1c9a      	adds	r2, r3, #2
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032aa:	e011      	b.n	80032d0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032ac:	f7fe fdb0 	bl	8001e10 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d803      	bhi.n	80032c4 <HAL_SPI_Receive+0x1cc>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c2:	d102      	bne.n	80032ca <HAL_SPI_Receive+0x1d2>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d102      	bne.n	80032d0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80032ce:	e017      	b.n	8003300 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1cd      	bne.n	8003276 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	6839      	ldr	r1, [r7, #0]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fa46 	bl	8003770 <SPI_EndRxTransaction>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2220      	movs	r2, #32
 80032ee:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	75fb      	strb	r3, [r7, #23]
 80032fc:	e000      	b.n	8003300 <HAL_SPI_Receive+0x208>
  }

error :
 80032fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003310:	7dfb      	ldrb	r3, [r7, #23]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b08c      	sub	sp, #48	; 0x30
 800331e:	af00      	add	r7, sp, #0
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003328:	2301      	movs	r3, #1
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_SPI_TransmitReceive+0x26>
 800333c:	2302      	movs	r3, #2
 800333e:	e18a      	b.n	8003656 <HAL_SPI_TransmitReceive+0x33c>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003348:	f7fe fd62 	bl	8001e10 <HAL_GetTick>
 800334c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003354:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800335e:	887b      	ldrh	r3, [r7, #2]
 8003360:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003362:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003366:	2b01      	cmp	r3, #1
 8003368:	d00f      	beq.n	800338a <HAL_SPI_TransmitReceive+0x70>
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003370:	d107      	bne.n	8003382 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d103      	bne.n	8003382 <HAL_SPI_TransmitReceive+0x68>
 800337a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800337e:	2b04      	cmp	r3, #4
 8003380:	d003      	beq.n	800338a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003382:	2302      	movs	r3, #2
 8003384:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003388:	e15b      	b.n	8003642 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_SPI_TransmitReceive+0x82>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <HAL_SPI_TransmitReceive+0x82>
 8003396:	887b      	ldrh	r3, [r7, #2]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d103      	bne.n	80033a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80033a2:	e14e      	b.n	8003642 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d003      	beq.n	80033b8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2205      	movs	r2, #5
 80033b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	887a      	ldrh	r2, [r7, #2]
 80033c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	887a      	ldrh	r2, [r7, #2]
 80033ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	887a      	ldrh	r2, [r7, #2]
 80033da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	887a      	ldrh	r2, [r7, #2]
 80033e0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f8:	2b40      	cmp	r3, #64	; 0x40
 80033fa:	d007      	beq.n	800340c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800340a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003414:	d178      	bne.n	8003508 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <HAL_SPI_TransmitReceive+0x10a>
 800341e:	8b7b      	ldrh	r3, [r7, #26]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d166      	bne.n	80034f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	881a      	ldrh	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	1c9a      	adds	r2, r3, #2
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003448:	e053      	b.n	80034f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b02      	cmp	r3, #2
 8003456:	d11b      	bne.n	8003490 <HAL_SPI_TransmitReceive+0x176>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d016      	beq.n	8003490 <HAL_SPI_TransmitReceive+0x176>
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d113      	bne.n	8003490 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	881a      	ldrh	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	1c9a      	adds	r2, r3, #2
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b01      	cmp	r3, #1
 800349c:	d119      	bne.n	80034d2 <HAL_SPI_TransmitReceive+0x1b8>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d014      	beq.n	80034d2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b2:	b292      	uxth	r2, r2
 80034b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	1c9a      	adds	r2, r3, #2
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034ce:	2301      	movs	r3, #1
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034d2:	f7fe fc9d 	bl	8001e10 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034de:	429a      	cmp	r2, r3
 80034e0:	d807      	bhi.n	80034f2 <HAL_SPI_TransmitReceive+0x1d8>
 80034e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e8:	d003      	beq.n	80034f2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034f0:	e0a7      	b.n	8003642 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1a6      	bne.n	800344a <HAL_SPI_TransmitReceive+0x130>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1a1      	bne.n	800344a <HAL_SPI_TransmitReceive+0x130>
 8003506:	e07c      	b.n	8003602 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <HAL_SPI_TransmitReceive+0x1fc>
 8003510:	8b7b      	ldrh	r3, [r7, #26]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d16b      	bne.n	80035ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	330c      	adds	r3, #12
 8003520:	7812      	ldrb	r2, [r2, #0]
 8003522:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800353c:	e057      	b.n	80035ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b02      	cmp	r3, #2
 800354a:	d11c      	bne.n	8003586 <HAL_SPI_TransmitReceive+0x26c>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d017      	beq.n	8003586 <HAL_SPI_TransmitReceive+0x26c>
 8003556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003558:	2b01      	cmp	r3, #1
 800355a:	d114      	bne.n	8003586 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	330c      	adds	r3, #12
 8003566:	7812      	ldrb	r2, [r2, #0]
 8003568:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	1c5a      	adds	r2, r3, #1
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b01      	cmp	r3, #1
 8003592:	d119      	bne.n	80035c8 <HAL_SPI_TransmitReceive+0x2ae>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d014      	beq.n	80035c8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035c4:	2301      	movs	r3, #1
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035c8:	f7fe fc22 	bl	8001e10 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d803      	bhi.n	80035e0 <HAL_SPI_TransmitReceive+0x2c6>
 80035d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035de:	d102      	bne.n	80035e6 <HAL_SPI_TransmitReceive+0x2cc>
 80035e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d103      	bne.n	80035ee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80035ec:	e029      	b.n	8003642 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1a2      	bne.n	800353e <HAL_SPI_TransmitReceive+0x224>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d19d      	bne.n	800353e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003604:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 f904 	bl	8003814 <SPI_EndRxTxTransaction>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d006      	beq.n	8003620 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800361e:	e010      	b.n	8003642 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10b      	bne.n	8003640 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	e000      	b.n	8003642 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003640:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003652:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003656:	4618      	mov	r0, r3
 8003658:	3730      	adds	r7, #48	; 0x30
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003670:	f7fe fbce 	bl	8001e10 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	4413      	add	r3, r2
 800367e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003680:	f7fe fbc6 	bl	8001e10 <HAL_GetTick>
 8003684:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003686:	4b39      	ldr	r3, [pc, #228]	; (800376c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	015b      	lsls	r3, r3, #5
 800368c:	0d1b      	lsrs	r3, r3, #20
 800368e:	69fa      	ldr	r2, [r7, #28]
 8003690:	fb02 f303 	mul.w	r3, r2, r3
 8003694:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003696:	e054      	b.n	8003742 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369e:	d050      	beq.n	8003742 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036a0:	f7fe fbb6 	bl	8001e10 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d902      	bls.n	80036b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d13d      	bne.n	8003732 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ce:	d111      	bne.n	80036f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036d8:	d004      	beq.n	80036e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e2:	d107      	bne.n	80036f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036fc:	d10f      	bne.n	800371e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800371c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e017      	b.n	8003762 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	3b01      	subs	r3, #1
 8003740:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4013      	ands	r3, r2
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	429a      	cmp	r2, r3
 8003750:	bf0c      	ite	eq
 8003752:	2301      	moveq	r3, #1
 8003754:	2300      	movne	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	429a      	cmp	r2, r3
 800375e:	d19b      	bne.n	8003698 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3720      	adds	r7, #32
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20000018 	.word	0x20000018

08003770 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af02      	add	r7, sp, #8
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003784:	d111      	bne.n	80037aa <SPI_EndRxTransaction+0x3a>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800378e:	d004      	beq.n	800379a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003798:	d107      	bne.n	80037aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037a8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037b2:	d117      	bne.n	80037e4 <SPI_EndRxTransaction+0x74>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037bc:	d112      	bne.n	80037e4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2200      	movs	r2, #0
 80037c6:	2101      	movs	r1, #1
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f7ff ff49 	bl	8003660 <SPI_WaitFlagStateUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01a      	beq.n	800380a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d8:	f043 0220 	orr.w	r2, r3, #32
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e013      	b.n	800380c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2200      	movs	r2, #0
 80037ec:	2180      	movs	r1, #128	; 0x80
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f7ff ff36 	bl	8003660 <SPI_WaitFlagStateUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d007      	beq.n	800380a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fe:	f043 0220 	orr.w	r2, r3, #32
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e000      	b.n	800380c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af02      	add	r7, sp, #8
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2200      	movs	r2, #0
 8003828:	2180      	movs	r1, #128	; 0x80
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f7ff ff18 	bl	8003660 <SPI_WaitFlagStateUntilTimeout>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d007      	beq.n	8003846 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383a:	f043 0220 	orr.w	r2, r3, #32
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e000      	b.n	8003848 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e03f      	b.n	80038e2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fe f952 	bl	8001b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2224      	movs	r2, #36	; 0x24
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003892:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 fc85 	bl	80041a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695a      	ldr	r2, [r3, #20]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b08a      	sub	sp, #40	; 0x28
 80038ee:	af02      	add	r7, sp, #8
 80038f0:	60f8      	str	r0, [r7, #12]
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	603b      	str	r3, [r7, #0]
 80038f6:	4613      	mov	r3, r2
 80038f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b20      	cmp	r3, #32
 8003908:	d17c      	bne.n	8003a04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <HAL_UART_Transmit+0x2c>
 8003910:	88fb      	ldrh	r3, [r7, #6]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e075      	b.n	8003a06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_UART_Transmit+0x3e>
 8003924:	2302      	movs	r3, #2
 8003926:	e06e      	b.n	8003a06 <HAL_UART_Transmit+0x11c>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2221      	movs	r2, #33	; 0x21
 800393a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800393e:	f7fe fa67 	bl	8001e10 <HAL_GetTick>
 8003942:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	88fa      	ldrh	r2, [r7, #6]
 8003948:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	88fa      	ldrh	r2, [r7, #6]
 800394e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003958:	d108      	bne.n	800396c <HAL_UART_Transmit+0x82>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d104      	bne.n	800396c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	61bb      	str	r3, [r7, #24]
 800396a:	e003      	b.n	8003974 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003970:	2300      	movs	r3, #0
 8003972:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800397c:	e02a      	b.n	80039d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2200      	movs	r2, #0
 8003986:	2180      	movs	r1, #128	; 0x80
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 fa38 	bl	8003dfe <UART_WaitOnFlagUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e036      	b.n	8003a06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10b      	bne.n	80039b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	3302      	adds	r3, #2
 80039b2:	61bb      	str	r3, [r7, #24]
 80039b4:	e007      	b.n	80039c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	781a      	ldrb	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	3301      	adds	r3, #1
 80039c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1cf      	bne.n	800397e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2200      	movs	r2, #0
 80039e6:	2140      	movs	r1, #64	; 0x40
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 fa08 	bl	8003dfe <UART_WaitOnFlagUntilTimeout>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e006      	b.n	8003a06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	e000      	b.n	8003a06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a04:	2302      	movs	r3, #2
  }
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3720      	adds	r7, #32
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	d11d      	bne.n	8003a64 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <HAL_UART_Receive_IT+0x26>
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e016      	b.n	8003a66 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_UART_Receive_IT+0x38>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e00f      	b.n	8003a66 <HAL_UART_Receive_IT+0x58>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003a54:	88fb      	ldrh	r3, [r7, #6]
 8003a56:	461a      	mov	r2, r3
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 fa19 	bl	8003e92 <UART_Start_Receive_IT>
 8003a60:	4603      	mov	r3, r0
 8003a62:	e000      	b.n	8003a66 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003a64:	2302      	movs	r3, #2
  }
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08a      	sub	sp, #40	; 0x28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10d      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	f003 0320 	and.w	r3, r3, #32
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x52>
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fac9 	bl	8004052 <UART_Receive_IT>
      return;
 8003ac0:	e17b      	b.n	8003dba <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80b1 	beq.w	8003c2c <HAL_UART_IRQHandler+0x1bc>
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d105      	bne.n	8003ae0 <HAL_UART_IRQHandler+0x70>
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 80a6 	beq.w	8003c2c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HAL_UART_IRQHandler+0x90>
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	f043 0201 	orr.w	r2, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <HAL_UART_IRQHandler+0xb0>
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	f043 0202 	orr.w	r2, r3, #2
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_UART_IRQHandler+0xd0>
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	f043 0204 	orr.w	r2, r3, #4
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00f      	beq.n	8003b6a <HAL_UART_IRQHandler+0xfa>
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d104      	bne.n	8003b5e <HAL_UART_IRQHandler+0xee>
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f043 0208 	orr.w	r2, r3, #8
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 811e 	beq.w	8003db0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d007      	beq.n	8003b8e <HAL_UART_IRQHandler+0x11e>
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 fa62 	bl	8004052 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bf14      	ite	ne
 8003b9c:	2301      	movne	r3, #1
 8003b9e:	2300      	moveq	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d102      	bne.n	8003bb6 <HAL_UART_IRQHandler+0x146>
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d031      	beq.n	8003c1a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f9a4 	bl	8003f04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d023      	beq.n	8003c12 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695a      	ldr	r2, [r3, #20]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bd8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d013      	beq.n	8003c0a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be6:	4a76      	ldr	r2, [pc, #472]	; (8003dc0 <HAL_UART_IRQHandler+0x350>)
 8003be8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe fa84 	bl	80020fc <HAL_DMA_Abort_IT>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d016      	beq.n	8003c28 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c04:	4610      	mov	r0, r2
 8003c06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c08:	e00e      	b.n	8003c28 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f8e3 	bl	8003dd6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c10:	e00a      	b.n	8003c28 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f8df 	bl	8003dd6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c18:	e006      	b.n	8003c28 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f8db 	bl	8003dd6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c26:	e0c3      	b.n	8003db0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c28:	bf00      	nop
    return;
 8003c2a:	e0c1      	b.n	8003db0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	f040 80a1 	bne.w	8003d78 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	f003 0310 	and.w	r3, r3, #16
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 809b 	beq.w	8003d78 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	f003 0310 	and.w	r3, r3, #16
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 8095 	beq.w	8003d78 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d04e      	beq.n	8003d10 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003c7c:	8a3b      	ldrh	r3, [r7, #16]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 8098 	beq.w	8003db4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c88:	8a3a      	ldrh	r2, [r7, #16]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	f080 8092 	bcs.w	8003db4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8a3a      	ldrh	r2, [r7, #16]
 8003c94:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	d02b      	beq.n	8003cf8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cae:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695a      	ldr	r2, [r3, #20]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0201 	bic.w	r2, r2, #1
 8003cbe:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cce:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0210 	bic.w	r2, r2, #16
 8003cec:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe f9c7 	bl	8002086 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	4619      	mov	r1, r3
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f86d 	bl	8003de8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d0e:	e051      	b.n	8003db4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d047      	beq.n	8003db8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003d28:	8a7b      	ldrh	r3, [r7, #18]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d044      	beq.n	8003db8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d3c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695a      	ldr	r2, [r3, #20]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0201 	bic.w	r2, r2, #1
 8003d4c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0210 	bic.w	r2, r2, #16
 8003d6a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d6c:	8a7b      	ldrh	r3, [r7, #18]
 8003d6e:	4619      	mov	r1, r3
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f839 	bl	8003de8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d76:	e01f      	b.n	8003db8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d008      	beq.n	8003d94 <HAL_UART_IRQHandler+0x324>
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f8f9 	bl	8003f84 <UART_Transmit_IT>
    return;
 8003d92:	e012      	b.n	8003dba <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00d      	beq.n	8003dba <HAL_UART_IRQHandler+0x34a>
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d008      	beq.n	8003dba <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f93a 	bl	8004022 <UART_EndTransmit_IT>
    return;
 8003dae:	e004      	b.n	8003dba <HAL_UART_IRQHandler+0x34a>
    return;
 8003db0:	bf00      	nop
 8003db2:	e002      	b.n	8003dba <HAL_UART_IRQHandler+0x34a>
      return;
 8003db4:	bf00      	nop
 8003db6:	e000      	b.n	8003dba <HAL_UART_IRQHandler+0x34a>
      return;
 8003db8:	bf00      	nop
  }
}
 8003dba:	3728      	adds	r7, #40	; 0x28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	08003f5d 	.word	0x08003f5d

08003dc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr

08003de8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc80      	pop	{r7}
 8003dfc:	4770      	bx	lr

08003dfe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	603b      	str	r3, [r7, #0]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e0e:	e02c      	b.n	8003e6a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e16:	d028      	beq.n	8003e6a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d007      	beq.n	8003e2e <UART_WaitOnFlagUntilTimeout+0x30>
 8003e1e:	f7fd fff7 	bl	8001e10 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d21d      	bcs.n	8003e6a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e3c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695a      	ldr	r2, [r3, #20]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0201 	bic.w	r2, r2, #1
 8003e4c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e00f      	b.n	8003e8a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	4013      	ands	r3, r2
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	bf0c      	ite	eq
 8003e7a:	2301      	moveq	r3, #1
 8003e7c:	2300      	movne	r3, #0
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	461a      	mov	r2, r3
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d0c3      	beq.n	8003e10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b085      	sub	sp, #20
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	88fa      	ldrh	r2, [r7, #6]
 8003eaa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	88fa      	ldrh	r2, [r7, #6]
 8003eb0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2222      	movs	r2, #34	; 0x22
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ed6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695a      	ldr	r2, [r3, #20]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0220 	orr.w	r2, r2, #32
 8003ef6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr

08003f04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f1a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	695a      	ldr	r2, [r3, #20]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0201 	bic.w	r2, r2, #1
 8003f2a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d107      	bne.n	8003f44 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0210 	bic.w	r2, r2, #16
 8003f42:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr

08003f5c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f7ff ff2d 	bl	8003dd6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f7c:	bf00      	nop
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b21      	cmp	r3, #33	; 0x21
 8003f96:	d13e      	bne.n	8004016 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa0:	d114      	bne.n	8003fcc <UART_Transmit_IT+0x48>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d110      	bne.n	8003fcc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fbe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	1c9a      	adds	r2, r3, #2
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	621a      	str	r2, [r3, #32]
 8003fca:	e008      	b.n	8003fde <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	1c59      	adds	r1, r3, #1
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6211      	str	r1, [r2, #32]
 8003fd6:	781a      	ldrb	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	4619      	mov	r1, r3
 8003fec:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10f      	bne.n	8004012 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004000:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004010:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	e000      	b.n	8004018 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004016:	2302      	movs	r3, #2
  }
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr

08004022 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004038:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff febe 	bl	8003dc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b086      	sub	sp, #24
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b22      	cmp	r3, #34	; 0x22
 8004064:	f040 8099 	bne.w	800419a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004070:	d117      	bne.n	80040a2 <UART_Receive_IT+0x50>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d113      	bne.n	80040a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004082:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	b29b      	uxth	r3, r3
 800408c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004090:	b29a      	uxth	r2, r3
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409a:	1c9a      	adds	r2, r3, #2
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	629a      	str	r2, [r3, #40]	; 0x28
 80040a0:	e026      	b.n	80040f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80040a8:	2300      	movs	r3, #0
 80040aa:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b4:	d007      	beq.n	80040c6 <UART_Receive_IT+0x74>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10a      	bne.n	80040d4 <UART_Receive_IT+0x82>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	701a      	strb	r2, [r3, #0]
 80040d2:	e008      	b.n	80040e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	4619      	mov	r1, r3
 80040fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004100:	2b00      	cmp	r3, #0
 8004102:	d148      	bne.n	8004196 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0220 	bic.w	r2, r2, #32
 8004112:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004122:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695a      	ldr	r2, [r3, #20]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0201 	bic.w	r2, r2, #1
 8004132:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	2b01      	cmp	r3, #1
 8004142:	d123      	bne.n	800418c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0210 	bic.w	r2, r2, #16
 8004158:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0310 	and.w	r3, r3, #16
 8004164:	2b10      	cmp	r3, #16
 8004166:	d10a      	bne.n	800417e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004182:	4619      	mov	r1, r3
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff fe2f 	bl	8003de8 <HAL_UARTEx_RxEventCallback>
 800418a:	e002      	b.n	8004192 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7fd fb15 	bl	80017bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	e002      	b.n	800419c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	e000      	b.n	800419c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800419a:	2302      	movs	r3, #2
  }
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80041de:	f023 030c 	bic.w	r3, r3, #12
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6812      	ldr	r2, [r2, #0]
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	430b      	orrs	r3, r1
 80041ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a2c      	ldr	r2, [pc, #176]	; (80042b8 <UART_SetConfig+0x114>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d103      	bne.n	8004214 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800420c:	f7fe fd82 	bl	8002d14 <HAL_RCC_GetPCLK2Freq>
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	e002      	b.n	800421a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004214:	f7fe fd6a 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 8004218:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	4613      	mov	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	009a      	lsls	r2, r3, #2
 8004224:	441a      	add	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004230:	4a22      	ldr	r2, [pc, #136]	; (80042bc <UART_SetConfig+0x118>)
 8004232:	fba2 2303 	umull	r2, r3, r2, r3
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	0119      	lsls	r1, r3, #4
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	009a      	lsls	r2, r3, #2
 8004244:	441a      	add	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004250:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <UART_SetConfig+0x118>)
 8004252:	fba3 0302 	umull	r0, r3, r3, r2
 8004256:	095b      	lsrs	r3, r3, #5
 8004258:	2064      	movs	r0, #100	; 0x64
 800425a:	fb00 f303 	mul.w	r3, r0, r3
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	3332      	adds	r3, #50	; 0x32
 8004264:	4a15      	ldr	r2, [pc, #84]	; (80042bc <UART_SetConfig+0x118>)
 8004266:	fba2 2303 	umull	r2, r3, r2, r3
 800426a:	095b      	lsrs	r3, r3, #5
 800426c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004270:	4419      	add	r1, r3
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4613      	mov	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	009a      	lsls	r2, r3, #2
 800427c:	441a      	add	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	fbb2 f2f3 	udiv	r2, r2, r3
 8004288:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <UART_SetConfig+0x118>)
 800428a:	fba3 0302 	umull	r0, r3, r3, r2
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	2064      	movs	r0, #100	; 0x64
 8004292:	fb00 f303 	mul.w	r3, r0, r3
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	3332      	adds	r3, #50	; 0x32
 800429c:	4a07      	ldr	r2, [pc, #28]	; (80042bc <UART_SetConfig+0x118>)
 800429e:	fba2 2303 	umull	r2, r3, r2, r3
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	f003 020f 	and.w	r2, r3, #15
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	440a      	add	r2, r1
 80042ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042b0:	bf00      	nop
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40013800 	.word	0x40013800
 80042bc:	51eb851f 	.word	0x51eb851f

080042c0 <__errno>:
 80042c0:	4b01      	ldr	r3, [pc, #4]	; (80042c8 <__errno+0x8>)
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	20000024 	.word	0x20000024

080042cc <__libc_init_array>:
 80042cc:	b570      	push	{r4, r5, r6, lr}
 80042ce:	2600      	movs	r6, #0
 80042d0:	4d0c      	ldr	r5, [pc, #48]	; (8004304 <__libc_init_array+0x38>)
 80042d2:	4c0d      	ldr	r4, [pc, #52]	; (8004308 <__libc_init_array+0x3c>)
 80042d4:	1b64      	subs	r4, r4, r5
 80042d6:	10a4      	asrs	r4, r4, #2
 80042d8:	42a6      	cmp	r6, r4
 80042da:	d109      	bne.n	80042f0 <__libc_init_array+0x24>
 80042dc:	f000 fc9c 	bl	8004c18 <_init>
 80042e0:	2600      	movs	r6, #0
 80042e2:	4d0a      	ldr	r5, [pc, #40]	; (800430c <__libc_init_array+0x40>)
 80042e4:	4c0a      	ldr	r4, [pc, #40]	; (8004310 <__libc_init_array+0x44>)
 80042e6:	1b64      	subs	r4, r4, r5
 80042e8:	10a4      	asrs	r4, r4, #2
 80042ea:	42a6      	cmp	r6, r4
 80042ec:	d105      	bne.n	80042fa <__libc_init_array+0x2e>
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
 80042f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80042f4:	4798      	blx	r3
 80042f6:	3601      	adds	r6, #1
 80042f8:	e7ee      	b.n	80042d8 <__libc_init_array+0xc>
 80042fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80042fe:	4798      	blx	r3
 8004300:	3601      	adds	r6, #1
 8004302:	e7f2      	b.n	80042ea <__libc_init_array+0x1e>
 8004304:	08005270 	.word	0x08005270
 8004308:	08005270 	.word	0x08005270
 800430c:	08005270 	.word	0x08005270
 8004310:	08005274 	.word	0x08005274

08004314 <memcpy>:
 8004314:	440a      	add	r2, r1
 8004316:	4291      	cmp	r1, r2
 8004318:	f100 33ff 	add.w	r3, r0, #4294967295
 800431c:	d100      	bne.n	8004320 <memcpy+0xc>
 800431e:	4770      	bx	lr
 8004320:	b510      	push	{r4, lr}
 8004322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004326:	4291      	cmp	r1, r2
 8004328:	f803 4f01 	strb.w	r4, [r3, #1]!
 800432c:	d1f9      	bne.n	8004322 <memcpy+0xe>
 800432e:	bd10      	pop	{r4, pc}

08004330 <memset>:
 8004330:	4603      	mov	r3, r0
 8004332:	4402      	add	r2, r0
 8004334:	4293      	cmp	r3, r2
 8004336:	d100      	bne.n	800433a <memset+0xa>
 8004338:	4770      	bx	lr
 800433a:	f803 1b01 	strb.w	r1, [r3], #1
 800433e:	e7f9      	b.n	8004334 <memset+0x4>

08004340 <siprintf>:
 8004340:	b40e      	push	{r1, r2, r3}
 8004342:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004346:	b500      	push	{lr}
 8004348:	b09c      	sub	sp, #112	; 0x70
 800434a:	ab1d      	add	r3, sp, #116	; 0x74
 800434c:	9002      	str	r0, [sp, #8]
 800434e:	9006      	str	r0, [sp, #24]
 8004350:	9107      	str	r1, [sp, #28]
 8004352:	9104      	str	r1, [sp, #16]
 8004354:	4808      	ldr	r0, [pc, #32]	; (8004378 <siprintf+0x38>)
 8004356:	4909      	ldr	r1, [pc, #36]	; (800437c <siprintf+0x3c>)
 8004358:	f853 2b04 	ldr.w	r2, [r3], #4
 800435c:	9105      	str	r1, [sp, #20]
 800435e:	6800      	ldr	r0, [r0, #0]
 8004360:	a902      	add	r1, sp, #8
 8004362:	9301      	str	r3, [sp, #4]
 8004364:	f000 f868 	bl	8004438 <_svfiprintf_r>
 8004368:	2200      	movs	r2, #0
 800436a:	9b02      	ldr	r3, [sp, #8]
 800436c:	701a      	strb	r2, [r3, #0]
 800436e:	b01c      	add	sp, #112	; 0x70
 8004370:	f85d eb04 	ldr.w	lr, [sp], #4
 8004374:	b003      	add	sp, #12
 8004376:	4770      	bx	lr
 8004378:	20000024 	.word	0x20000024
 800437c:	ffff0208 	.word	0xffff0208

08004380 <__ssputs_r>:
 8004380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004384:	688e      	ldr	r6, [r1, #8]
 8004386:	4682      	mov	sl, r0
 8004388:	429e      	cmp	r6, r3
 800438a:	460c      	mov	r4, r1
 800438c:	4690      	mov	r8, r2
 800438e:	461f      	mov	r7, r3
 8004390:	d838      	bhi.n	8004404 <__ssputs_r+0x84>
 8004392:	898a      	ldrh	r2, [r1, #12]
 8004394:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004398:	d032      	beq.n	8004400 <__ssputs_r+0x80>
 800439a:	6825      	ldr	r5, [r4, #0]
 800439c:	6909      	ldr	r1, [r1, #16]
 800439e:	3301      	adds	r3, #1
 80043a0:	eba5 0901 	sub.w	r9, r5, r1
 80043a4:	6965      	ldr	r5, [r4, #20]
 80043a6:	444b      	add	r3, r9
 80043a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043b0:	106d      	asrs	r5, r5, #1
 80043b2:	429d      	cmp	r5, r3
 80043b4:	bf38      	it	cc
 80043b6:	461d      	movcc	r5, r3
 80043b8:	0553      	lsls	r3, r2, #21
 80043ba:	d531      	bpl.n	8004420 <__ssputs_r+0xa0>
 80043bc:	4629      	mov	r1, r5
 80043be:	f000 fb61 	bl	8004a84 <_malloc_r>
 80043c2:	4606      	mov	r6, r0
 80043c4:	b950      	cbnz	r0, 80043dc <__ssputs_r+0x5c>
 80043c6:	230c      	movs	r3, #12
 80043c8:	f04f 30ff 	mov.w	r0, #4294967295
 80043cc:	f8ca 3000 	str.w	r3, [sl]
 80043d0:	89a3      	ldrh	r3, [r4, #12]
 80043d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043d6:	81a3      	strh	r3, [r4, #12]
 80043d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043dc:	464a      	mov	r2, r9
 80043de:	6921      	ldr	r1, [r4, #16]
 80043e0:	f7ff ff98 	bl	8004314 <memcpy>
 80043e4:	89a3      	ldrh	r3, [r4, #12]
 80043e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ee:	81a3      	strh	r3, [r4, #12]
 80043f0:	6126      	str	r6, [r4, #16]
 80043f2:	444e      	add	r6, r9
 80043f4:	6026      	str	r6, [r4, #0]
 80043f6:	463e      	mov	r6, r7
 80043f8:	6165      	str	r5, [r4, #20]
 80043fa:	eba5 0509 	sub.w	r5, r5, r9
 80043fe:	60a5      	str	r5, [r4, #8]
 8004400:	42be      	cmp	r6, r7
 8004402:	d900      	bls.n	8004406 <__ssputs_r+0x86>
 8004404:	463e      	mov	r6, r7
 8004406:	4632      	mov	r2, r6
 8004408:	4641      	mov	r1, r8
 800440a:	6820      	ldr	r0, [r4, #0]
 800440c:	f000 fab8 	bl	8004980 <memmove>
 8004410:	68a3      	ldr	r3, [r4, #8]
 8004412:	2000      	movs	r0, #0
 8004414:	1b9b      	subs	r3, r3, r6
 8004416:	60a3      	str	r3, [r4, #8]
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	4433      	add	r3, r6
 800441c:	6023      	str	r3, [r4, #0]
 800441e:	e7db      	b.n	80043d8 <__ssputs_r+0x58>
 8004420:	462a      	mov	r2, r5
 8004422:	f000 fba3 	bl	8004b6c <_realloc_r>
 8004426:	4606      	mov	r6, r0
 8004428:	2800      	cmp	r0, #0
 800442a:	d1e1      	bne.n	80043f0 <__ssputs_r+0x70>
 800442c:	4650      	mov	r0, sl
 800442e:	6921      	ldr	r1, [r4, #16]
 8004430:	f000 fac0 	bl	80049b4 <_free_r>
 8004434:	e7c7      	b.n	80043c6 <__ssputs_r+0x46>
	...

08004438 <_svfiprintf_r>:
 8004438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443c:	4698      	mov	r8, r3
 800443e:	898b      	ldrh	r3, [r1, #12]
 8004440:	4607      	mov	r7, r0
 8004442:	061b      	lsls	r3, r3, #24
 8004444:	460d      	mov	r5, r1
 8004446:	4614      	mov	r4, r2
 8004448:	b09d      	sub	sp, #116	; 0x74
 800444a:	d50e      	bpl.n	800446a <_svfiprintf_r+0x32>
 800444c:	690b      	ldr	r3, [r1, #16]
 800444e:	b963      	cbnz	r3, 800446a <_svfiprintf_r+0x32>
 8004450:	2140      	movs	r1, #64	; 0x40
 8004452:	f000 fb17 	bl	8004a84 <_malloc_r>
 8004456:	6028      	str	r0, [r5, #0]
 8004458:	6128      	str	r0, [r5, #16]
 800445a:	b920      	cbnz	r0, 8004466 <_svfiprintf_r+0x2e>
 800445c:	230c      	movs	r3, #12
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	f04f 30ff 	mov.w	r0, #4294967295
 8004464:	e0d1      	b.n	800460a <_svfiprintf_r+0x1d2>
 8004466:	2340      	movs	r3, #64	; 0x40
 8004468:	616b      	str	r3, [r5, #20]
 800446a:	2300      	movs	r3, #0
 800446c:	9309      	str	r3, [sp, #36]	; 0x24
 800446e:	2320      	movs	r3, #32
 8004470:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004474:	2330      	movs	r3, #48	; 0x30
 8004476:	f04f 0901 	mov.w	r9, #1
 800447a:	f8cd 800c 	str.w	r8, [sp, #12]
 800447e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004624 <_svfiprintf_r+0x1ec>
 8004482:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004486:	4623      	mov	r3, r4
 8004488:	469a      	mov	sl, r3
 800448a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800448e:	b10a      	cbz	r2, 8004494 <_svfiprintf_r+0x5c>
 8004490:	2a25      	cmp	r2, #37	; 0x25
 8004492:	d1f9      	bne.n	8004488 <_svfiprintf_r+0x50>
 8004494:	ebba 0b04 	subs.w	fp, sl, r4
 8004498:	d00b      	beq.n	80044b2 <_svfiprintf_r+0x7a>
 800449a:	465b      	mov	r3, fp
 800449c:	4622      	mov	r2, r4
 800449e:	4629      	mov	r1, r5
 80044a0:	4638      	mov	r0, r7
 80044a2:	f7ff ff6d 	bl	8004380 <__ssputs_r>
 80044a6:	3001      	adds	r0, #1
 80044a8:	f000 80aa 	beq.w	8004600 <_svfiprintf_r+0x1c8>
 80044ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044ae:	445a      	add	r2, fp
 80044b0:	9209      	str	r2, [sp, #36]	; 0x24
 80044b2:	f89a 3000 	ldrb.w	r3, [sl]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 80a2 	beq.w	8004600 <_svfiprintf_r+0x1c8>
 80044bc:	2300      	movs	r3, #0
 80044be:	f04f 32ff 	mov.w	r2, #4294967295
 80044c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044c6:	f10a 0a01 	add.w	sl, sl, #1
 80044ca:	9304      	str	r3, [sp, #16]
 80044cc:	9307      	str	r3, [sp, #28]
 80044ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044d2:	931a      	str	r3, [sp, #104]	; 0x68
 80044d4:	4654      	mov	r4, sl
 80044d6:	2205      	movs	r2, #5
 80044d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044dc:	4851      	ldr	r0, [pc, #324]	; (8004624 <_svfiprintf_r+0x1ec>)
 80044de:	f000 fa41 	bl	8004964 <memchr>
 80044e2:	9a04      	ldr	r2, [sp, #16]
 80044e4:	b9d8      	cbnz	r0, 800451e <_svfiprintf_r+0xe6>
 80044e6:	06d0      	lsls	r0, r2, #27
 80044e8:	bf44      	itt	mi
 80044ea:	2320      	movmi	r3, #32
 80044ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044f0:	0711      	lsls	r1, r2, #28
 80044f2:	bf44      	itt	mi
 80044f4:	232b      	movmi	r3, #43	; 0x2b
 80044f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044fa:	f89a 3000 	ldrb.w	r3, [sl]
 80044fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004500:	d015      	beq.n	800452e <_svfiprintf_r+0xf6>
 8004502:	4654      	mov	r4, sl
 8004504:	2000      	movs	r0, #0
 8004506:	f04f 0c0a 	mov.w	ip, #10
 800450a:	9a07      	ldr	r2, [sp, #28]
 800450c:	4621      	mov	r1, r4
 800450e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004512:	3b30      	subs	r3, #48	; 0x30
 8004514:	2b09      	cmp	r3, #9
 8004516:	d94e      	bls.n	80045b6 <_svfiprintf_r+0x17e>
 8004518:	b1b0      	cbz	r0, 8004548 <_svfiprintf_r+0x110>
 800451a:	9207      	str	r2, [sp, #28]
 800451c:	e014      	b.n	8004548 <_svfiprintf_r+0x110>
 800451e:	eba0 0308 	sub.w	r3, r0, r8
 8004522:	fa09 f303 	lsl.w	r3, r9, r3
 8004526:	4313      	orrs	r3, r2
 8004528:	46a2      	mov	sl, r4
 800452a:	9304      	str	r3, [sp, #16]
 800452c:	e7d2      	b.n	80044d4 <_svfiprintf_r+0x9c>
 800452e:	9b03      	ldr	r3, [sp, #12]
 8004530:	1d19      	adds	r1, r3, #4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	9103      	str	r1, [sp, #12]
 8004536:	2b00      	cmp	r3, #0
 8004538:	bfbb      	ittet	lt
 800453a:	425b      	neglt	r3, r3
 800453c:	f042 0202 	orrlt.w	r2, r2, #2
 8004540:	9307      	strge	r3, [sp, #28]
 8004542:	9307      	strlt	r3, [sp, #28]
 8004544:	bfb8      	it	lt
 8004546:	9204      	strlt	r2, [sp, #16]
 8004548:	7823      	ldrb	r3, [r4, #0]
 800454a:	2b2e      	cmp	r3, #46	; 0x2e
 800454c:	d10c      	bne.n	8004568 <_svfiprintf_r+0x130>
 800454e:	7863      	ldrb	r3, [r4, #1]
 8004550:	2b2a      	cmp	r3, #42	; 0x2a
 8004552:	d135      	bne.n	80045c0 <_svfiprintf_r+0x188>
 8004554:	9b03      	ldr	r3, [sp, #12]
 8004556:	3402      	adds	r4, #2
 8004558:	1d1a      	adds	r2, r3, #4
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	9203      	str	r2, [sp, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	bfb8      	it	lt
 8004562:	f04f 33ff 	movlt.w	r3, #4294967295
 8004566:	9305      	str	r3, [sp, #20]
 8004568:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004628 <_svfiprintf_r+0x1f0>
 800456c:	2203      	movs	r2, #3
 800456e:	4650      	mov	r0, sl
 8004570:	7821      	ldrb	r1, [r4, #0]
 8004572:	f000 f9f7 	bl	8004964 <memchr>
 8004576:	b140      	cbz	r0, 800458a <_svfiprintf_r+0x152>
 8004578:	2340      	movs	r3, #64	; 0x40
 800457a:	eba0 000a 	sub.w	r0, r0, sl
 800457e:	fa03 f000 	lsl.w	r0, r3, r0
 8004582:	9b04      	ldr	r3, [sp, #16]
 8004584:	3401      	adds	r4, #1
 8004586:	4303      	orrs	r3, r0
 8004588:	9304      	str	r3, [sp, #16]
 800458a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800458e:	2206      	movs	r2, #6
 8004590:	4826      	ldr	r0, [pc, #152]	; (800462c <_svfiprintf_r+0x1f4>)
 8004592:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004596:	f000 f9e5 	bl	8004964 <memchr>
 800459a:	2800      	cmp	r0, #0
 800459c:	d038      	beq.n	8004610 <_svfiprintf_r+0x1d8>
 800459e:	4b24      	ldr	r3, [pc, #144]	; (8004630 <_svfiprintf_r+0x1f8>)
 80045a0:	bb1b      	cbnz	r3, 80045ea <_svfiprintf_r+0x1b2>
 80045a2:	9b03      	ldr	r3, [sp, #12]
 80045a4:	3307      	adds	r3, #7
 80045a6:	f023 0307 	bic.w	r3, r3, #7
 80045aa:	3308      	adds	r3, #8
 80045ac:	9303      	str	r3, [sp, #12]
 80045ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045b0:	4433      	add	r3, r6
 80045b2:	9309      	str	r3, [sp, #36]	; 0x24
 80045b4:	e767      	b.n	8004486 <_svfiprintf_r+0x4e>
 80045b6:	460c      	mov	r4, r1
 80045b8:	2001      	movs	r0, #1
 80045ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80045be:	e7a5      	b.n	800450c <_svfiprintf_r+0xd4>
 80045c0:	2300      	movs	r3, #0
 80045c2:	f04f 0c0a 	mov.w	ip, #10
 80045c6:	4619      	mov	r1, r3
 80045c8:	3401      	adds	r4, #1
 80045ca:	9305      	str	r3, [sp, #20]
 80045cc:	4620      	mov	r0, r4
 80045ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045d2:	3a30      	subs	r2, #48	; 0x30
 80045d4:	2a09      	cmp	r2, #9
 80045d6:	d903      	bls.n	80045e0 <_svfiprintf_r+0x1a8>
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0c5      	beq.n	8004568 <_svfiprintf_r+0x130>
 80045dc:	9105      	str	r1, [sp, #20]
 80045de:	e7c3      	b.n	8004568 <_svfiprintf_r+0x130>
 80045e0:	4604      	mov	r4, r0
 80045e2:	2301      	movs	r3, #1
 80045e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80045e8:	e7f0      	b.n	80045cc <_svfiprintf_r+0x194>
 80045ea:	ab03      	add	r3, sp, #12
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	462a      	mov	r2, r5
 80045f0:	4638      	mov	r0, r7
 80045f2:	4b10      	ldr	r3, [pc, #64]	; (8004634 <_svfiprintf_r+0x1fc>)
 80045f4:	a904      	add	r1, sp, #16
 80045f6:	f3af 8000 	nop.w
 80045fa:	1c42      	adds	r2, r0, #1
 80045fc:	4606      	mov	r6, r0
 80045fe:	d1d6      	bne.n	80045ae <_svfiprintf_r+0x176>
 8004600:	89ab      	ldrh	r3, [r5, #12]
 8004602:	065b      	lsls	r3, r3, #25
 8004604:	f53f af2c 	bmi.w	8004460 <_svfiprintf_r+0x28>
 8004608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800460a:	b01d      	add	sp, #116	; 0x74
 800460c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004610:	ab03      	add	r3, sp, #12
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	462a      	mov	r2, r5
 8004616:	4638      	mov	r0, r7
 8004618:	4b06      	ldr	r3, [pc, #24]	; (8004634 <_svfiprintf_r+0x1fc>)
 800461a:	a904      	add	r1, sp, #16
 800461c:	f000 f87c 	bl	8004718 <_printf_i>
 8004620:	e7eb      	b.n	80045fa <_svfiprintf_r+0x1c2>
 8004622:	bf00      	nop
 8004624:	0800523c 	.word	0x0800523c
 8004628:	08005242 	.word	0x08005242
 800462c:	08005246 	.word	0x08005246
 8004630:	00000000 	.word	0x00000000
 8004634:	08004381 	.word	0x08004381

08004638 <_printf_common>:
 8004638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800463c:	4616      	mov	r6, r2
 800463e:	4699      	mov	r9, r3
 8004640:	688a      	ldr	r2, [r1, #8]
 8004642:	690b      	ldr	r3, [r1, #16]
 8004644:	4607      	mov	r7, r0
 8004646:	4293      	cmp	r3, r2
 8004648:	bfb8      	it	lt
 800464a:	4613      	movlt	r3, r2
 800464c:	6033      	str	r3, [r6, #0]
 800464e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004652:	460c      	mov	r4, r1
 8004654:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004658:	b10a      	cbz	r2, 800465e <_printf_common+0x26>
 800465a:	3301      	adds	r3, #1
 800465c:	6033      	str	r3, [r6, #0]
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	0699      	lsls	r1, r3, #26
 8004662:	bf42      	ittt	mi
 8004664:	6833      	ldrmi	r3, [r6, #0]
 8004666:	3302      	addmi	r3, #2
 8004668:	6033      	strmi	r3, [r6, #0]
 800466a:	6825      	ldr	r5, [r4, #0]
 800466c:	f015 0506 	ands.w	r5, r5, #6
 8004670:	d106      	bne.n	8004680 <_printf_common+0x48>
 8004672:	f104 0a19 	add.w	sl, r4, #25
 8004676:	68e3      	ldr	r3, [r4, #12]
 8004678:	6832      	ldr	r2, [r6, #0]
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	42ab      	cmp	r3, r5
 800467e:	dc28      	bgt.n	80046d2 <_printf_common+0x9a>
 8004680:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004684:	1e13      	subs	r3, r2, #0
 8004686:	6822      	ldr	r2, [r4, #0]
 8004688:	bf18      	it	ne
 800468a:	2301      	movne	r3, #1
 800468c:	0692      	lsls	r2, r2, #26
 800468e:	d42d      	bmi.n	80046ec <_printf_common+0xb4>
 8004690:	4649      	mov	r1, r9
 8004692:	4638      	mov	r0, r7
 8004694:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004698:	47c0      	blx	r8
 800469a:	3001      	adds	r0, #1
 800469c:	d020      	beq.n	80046e0 <_printf_common+0xa8>
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	68e5      	ldr	r5, [r4, #12]
 80046a2:	f003 0306 	and.w	r3, r3, #6
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	bf18      	it	ne
 80046aa:	2500      	movne	r5, #0
 80046ac:	6832      	ldr	r2, [r6, #0]
 80046ae:	f04f 0600 	mov.w	r6, #0
 80046b2:	68a3      	ldr	r3, [r4, #8]
 80046b4:	bf08      	it	eq
 80046b6:	1aad      	subeq	r5, r5, r2
 80046b8:	6922      	ldr	r2, [r4, #16]
 80046ba:	bf08      	it	eq
 80046bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046c0:	4293      	cmp	r3, r2
 80046c2:	bfc4      	itt	gt
 80046c4:	1a9b      	subgt	r3, r3, r2
 80046c6:	18ed      	addgt	r5, r5, r3
 80046c8:	341a      	adds	r4, #26
 80046ca:	42b5      	cmp	r5, r6
 80046cc:	d11a      	bne.n	8004704 <_printf_common+0xcc>
 80046ce:	2000      	movs	r0, #0
 80046d0:	e008      	b.n	80046e4 <_printf_common+0xac>
 80046d2:	2301      	movs	r3, #1
 80046d4:	4652      	mov	r2, sl
 80046d6:	4649      	mov	r1, r9
 80046d8:	4638      	mov	r0, r7
 80046da:	47c0      	blx	r8
 80046dc:	3001      	adds	r0, #1
 80046de:	d103      	bne.n	80046e8 <_printf_common+0xb0>
 80046e0:	f04f 30ff 	mov.w	r0, #4294967295
 80046e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e8:	3501      	adds	r5, #1
 80046ea:	e7c4      	b.n	8004676 <_printf_common+0x3e>
 80046ec:	2030      	movs	r0, #48	; 0x30
 80046ee:	18e1      	adds	r1, r4, r3
 80046f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046fa:	4422      	add	r2, r4
 80046fc:	3302      	adds	r3, #2
 80046fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004702:	e7c5      	b.n	8004690 <_printf_common+0x58>
 8004704:	2301      	movs	r3, #1
 8004706:	4622      	mov	r2, r4
 8004708:	4649      	mov	r1, r9
 800470a:	4638      	mov	r0, r7
 800470c:	47c0      	blx	r8
 800470e:	3001      	adds	r0, #1
 8004710:	d0e6      	beq.n	80046e0 <_printf_common+0xa8>
 8004712:	3601      	adds	r6, #1
 8004714:	e7d9      	b.n	80046ca <_printf_common+0x92>
	...

08004718 <_printf_i>:
 8004718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800471c:	7e0f      	ldrb	r7, [r1, #24]
 800471e:	4691      	mov	r9, r2
 8004720:	2f78      	cmp	r7, #120	; 0x78
 8004722:	4680      	mov	r8, r0
 8004724:	460c      	mov	r4, r1
 8004726:	469a      	mov	sl, r3
 8004728:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800472a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800472e:	d807      	bhi.n	8004740 <_printf_i+0x28>
 8004730:	2f62      	cmp	r7, #98	; 0x62
 8004732:	d80a      	bhi.n	800474a <_printf_i+0x32>
 8004734:	2f00      	cmp	r7, #0
 8004736:	f000 80d9 	beq.w	80048ec <_printf_i+0x1d4>
 800473a:	2f58      	cmp	r7, #88	; 0x58
 800473c:	f000 80a4 	beq.w	8004888 <_printf_i+0x170>
 8004740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004744:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004748:	e03a      	b.n	80047c0 <_printf_i+0xa8>
 800474a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800474e:	2b15      	cmp	r3, #21
 8004750:	d8f6      	bhi.n	8004740 <_printf_i+0x28>
 8004752:	a101      	add	r1, pc, #4	; (adr r1, 8004758 <_printf_i+0x40>)
 8004754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004758:	080047b1 	.word	0x080047b1
 800475c:	080047c5 	.word	0x080047c5
 8004760:	08004741 	.word	0x08004741
 8004764:	08004741 	.word	0x08004741
 8004768:	08004741 	.word	0x08004741
 800476c:	08004741 	.word	0x08004741
 8004770:	080047c5 	.word	0x080047c5
 8004774:	08004741 	.word	0x08004741
 8004778:	08004741 	.word	0x08004741
 800477c:	08004741 	.word	0x08004741
 8004780:	08004741 	.word	0x08004741
 8004784:	080048d3 	.word	0x080048d3
 8004788:	080047f5 	.word	0x080047f5
 800478c:	080048b5 	.word	0x080048b5
 8004790:	08004741 	.word	0x08004741
 8004794:	08004741 	.word	0x08004741
 8004798:	080048f5 	.word	0x080048f5
 800479c:	08004741 	.word	0x08004741
 80047a0:	080047f5 	.word	0x080047f5
 80047a4:	08004741 	.word	0x08004741
 80047a8:	08004741 	.word	0x08004741
 80047ac:	080048bd 	.word	0x080048bd
 80047b0:	682b      	ldr	r3, [r5, #0]
 80047b2:	1d1a      	adds	r2, r3, #4
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	602a      	str	r2, [r5, #0]
 80047b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0a4      	b.n	800490e <_printf_i+0x1f6>
 80047c4:	6820      	ldr	r0, [r4, #0]
 80047c6:	6829      	ldr	r1, [r5, #0]
 80047c8:	0606      	lsls	r6, r0, #24
 80047ca:	f101 0304 	add.w	r3, r1, #4
 80047ce:	d50a      	bpl.n	80047e6 <_printf_i+0xce>
 80047d0:	680e      	ldr	r6, [r1, #0]
 80047d2:	602b      	str	r3, [r5, #0]
 80047d4:	2e00      	cmp	r6, #0
 80047d6:	da03      	bge.n	80047e0 <_printf_i+0xc8>
 80047d8:	232d      	movs	r3, #45	; 0x2d
 80047da:	4276      	negs	r6, r6
 80047dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047e0:	230a      	movs	r3, #10
 80047e2:	485e      	ldr	r0, [pc, #376]	; (800495c <_printf_i+0x244>)
 80047e4:	e019      	b.n	800481a <_printf_i+0x102>
 80047e6:	680e      	ldr	r6, [r1, #0]
 80047e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047ec:	602b      	str	r3, [r5, #0]
 80047ee:	bf18      	it	ne
 80047f0:	b236      	sxthne	r6, r6
 80047f2:	e7ef      	b.n	80047d4 <_printf_i+0xbc>
 80047f4:	682b      	ldr	r3, [r5, #0]
 80047f6:	6820      	ldr	r0, [r4, #0]
 80047f8:	1d19      	adds	r1, r3, #4
 80047fa:	6029      	str	r1, [r5, #0]
 80047fc:	0601      	lsls	r1, r0, #24
 80047fe:	d501      	bpl.n	8004804 <_printf_i+0xec>
 8004800:	681e      	ldr	r6, [r3, #0]
 8004802:	e002      	b.n	800480a <_printf_i+0xf2>
 8004804:	0646      	lsls	r6, r0, #25
 8004806:	d5fb      	bpl.n	8004800 <_printf_i+0xe8>
 8004808:	881e      	ldrh	r6, [r3, #0]
 800480a:	2f6f      	cmp	r7, #111	; 0x6f
 800480c:	bf0c      	ite	eq
 800480e:	2308      	moveq	r3, #8
 8004810:	230a      	movne	r3, #10
 8004812:	4852      	ldr	r0, [pc, #328]	; (800495c <_printf_i+0x244>)
 8004814:	2100      	movs	r1, #0
 8004816:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800481a:	6865      	ldr	r5, [r4, #4]
 800481c:	2d00      	cmp	r5, #0
 800481e:	bfa8      	it	ge
 8004820:	6821      	ldrge	r1, [r4, #0]
 8004822:	60a5      	str	r5, [r4, #8]
 8004824:	bfa4      	itt	ge
 8004826:	f021 0104 	bicge.w	r1, r1, #4
 800482a:	6021      	strge	r1, [r4, #0]
 800482c:	b90e      	cbnz	r6, 8004832 <_printf_i+0x11a>
 800482e:	2d00      	cmp	r5, #0
 8004830:	d04d      	beq.n	80048ce <_printf_i+0x1b6>
 8004832:	4615      	mov	r5, r2
 8004834:	fbb6 f1f3 	udiv	r1, r6, r3
 8004838:	fb03 6711 	mls	r7, r3, r1, r6
 800483c:	5dc7      	ldrb	r7, [r0, r7]
 800483e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004842:	4637      	mov	r7, r6
 8004844:	42bb      	cmp	r3, r7
 8004846:	460e      	mov	r6, r1
 8004848:	d9f4      	bls.n	8004834 <_printf_i+0x11c>
 800484a:	2b08      	cmp	r3, #8
 800484c:	d10b      	bne.n	8004866 <_printf_i+0x14e>
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	07de      	lsls	r6, r3, #31
 8004852:	d508      	bpl.n	8004866 <_printf_i+0x14e>
 8004854:	6923      	ldr	r3, [r4, #16]
 8004856:	6861      	ldr	r1, [r4, #4]
 8004858:	4299      	cmp	r1, r3
 800485a:	bfde      	ittt	le
 800485c:	2330      	movle	r3, #48	; 0x30
 800485e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004862:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004866:	1b52      	subs	r2, r2, r5
 8004868:	6122      	str	r2, [r4, #16]
 800486a:	464b      	mov	r3, r9
 800486c:	4621      	mov	r1, r4
 800486e:	4640      	mov	r0, r8
 8004870:	f8cd a000 	str.w	sl, [sp]
 8004874:	aa03      	add	r2, sp, #12
 8004876:	f7ff fedf 	bl	8004638 <_printf_common>
 800487a:	3001      	adds	r0, #1
 800487c:	d14c      	bne.n	8004918 <_printf_i+0x200>
 800487e:	f04f 30ff 	mov.w	r0, #4294967295
 8004882:	b004      	add	sp, #16
 8004884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004888:	4834      	ldr	r0, [pc, #208]	; (800495c <_printf_i+0x244>)
 800488a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800488e:	6829      	ldr	r1, [r5, #0]
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	f851 6b04 	ldr.w	r6, [r1], #4
 8004896:	6029      	str	r1, [r5, #0]
 8004898:	061d      	lsls	r5, r3, #24
 800489a:	d514      	bpl.n	80048c6 <_printf_i+0x1ae>
 800489c:	07df      	lsls	r7, r3, #31
 800489e:	bf44      	itt	mi
 80048a0:	f043 0320 	orrmi.w	r3, r3, #32
 80048a4:	6023      	strmi	r3, [r4, #0]
 80048a6:	b91e      	cbnz	r6, 80048b0 <_printf_i+0x198>
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	f023 0320 	bic.w	r3, r3, #32
 80048ae:	6023      	str	r3, [r4, #0]
 80048b0:	2310      	movs	r3, #16
 80048b2:	e7af      	b.n	8004814 <_printf_i+0xfc>
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	f043 0320 	orr.w	r3, r3, #32
 80048ba:	6023      	str	r3, [r4, #0]
 80048bc:	2378      	movs	r3, #120	; 0x78
 80048be:	4828      	ldr	r0, [pc, #160]	; (8004960 <_printf_i+0x248>)
 80048c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048c4:	e7e3      	b.n	800488e <_printf_i+0x176>
 80048c6:	0659      	lsls	r1, r3, #25
 80048c8:	bf48      	it	mi
 80048ca:	b2b6      	uxthmi	r6, r6
 80048cc:	e7e6      	b.n	800489c <_printf_i+0x184>
 80048ce:	4615      	mov	r5, r2
 80048d0:	e7bb      	b.n	800484a <_printf_i+0x132>
 80048d2:	682b      	ldr	r3, [r5, #0]
 80048d4:	6826      	ldr	r6, [r4, #0]
 80048d6:	1d18      	adds	r0, r3, #4
 80048d8:	6961      	ldr	r1, [r4, #20]
 80048da:	6028      	str	r0, [r5, #0]
 80048dc:	0635      	lsls	r5, r6, #24
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	d501      	bpl.n	80048e6 <_printf_i+0x1ce>
 80048e2:	6019      	str	r1, [r3, #0]
 80048e4:	e002      	b.n	80048ec <_printf_i+0x1d4>
 80048e6:	0670      	lsls	r0, r6, #25
 80048e8:	d5fb      	bpl.n	80048e2 <_printf_i+0x1ca>
 80048ea:	8019      	strh	r1, [r3, #0]
 80048ec:	2300      	movs	r3, #0
 80048ee:	4615      	mov	r5, r2
 80048f0:	6123      	str	r3, [r4, #16]
 80048f2:	e7ba      	b.n	800486a <_printf_i+0x152>
 80048f4:	682b      	ldr	r3, [r5, #0]
 80048f6:	2100      	movs	r1, #0
 80048f8:	1d1a      	adds	r2, r3, #4
 80048fa:	602a      	str	r2, [r5, #0]
 80048fc:	681d      	ldr	r5, [r3, #0]
 80048fe:	6862      	ldr	r2, [r4, #4]
 8004900:	4628      	mov	r0, r5
 8004902:	f000 f82f 	bl	8004964 <memchr>
 8004906:	b108      	cbz	r0, 800490c <_printf_i+0x1f4>
 8004908:	1b40      	subs	r0, r0, r5
 800490a:	6060      	str	r0, [r4, #4]
 800490c:	6863      	ldr	r3, [r4, #4]
 800490e:	6123      	str	r3, [r4, #16]
 8004910:	2300      	movs	r3, #0
 8004912:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004916:	e7a8      	b.n	800486a <_printf_i+0x152>
 8004918:	462a      	mov	r2, r5
 800491a:	4649      	mov	r1, r9
 800491c:	4640      	mov	r0, r8
 800491e:	6923      	ldr	r3, [r4, #16]
 8004920:	47d0      	blx	sl
 8004922:	3001      	adds	r0, #1
 8004924:	d0ab      	beq.n	800487e <_printf_i+0x166>
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	079b      	lsls	r3, r3, #30
 800492a:	d413      	bmi.n	8004954 <_printf_i+0x23c>
 800492c:	68e0      	ldr	r0, [r4, #12]
 800492e:	9b03      	ldr	r3, [sp, #12]
 8004930:	4298      	cmp	r0, r3
 8004932:	bfb8      	it	lt
 8004934:	4618      	movlt	r0, r3
 8004936:	e7a4      	b.n	8004882 <_printf_i+0x16a>
 8004938:	2301      	movs	r3, #1
 800493a:	4632      	mov	r2, r6
 800493c:	4649      	mov	r1, r9
 800493e:	4640      	mov	r0, r8
 8004940:	47d0      	blx	sl
 8004942:	3001      	adds	r0, #1
 8004944:	d09b      	beq.n	800487e <_printf_i+0x166>
 8004946:	3501      	adds	r5, #1
 8004948:	68e3      	ldr	r3, [r4, #12]
 800494a:	9903      	ldr	r1, [sp, #12]
 800494c:	1a5b      	subs	r3, r3, r1
 800494e:	42ab      	cmp	r3, r5
 8004950:	dcf2      	bgt.n	8004938 <_printf_i+0x220>
 8004952:	e7eb      	b.n	800492c <_printf_i+0x214>
 8004954:	2500      	movs	r5, #0
 8004956:	f104 0619 	add.w	r6, r4, #25
 800495a:	e7f5      	b.n	8004948 <_printf_i+0x230>
 800495c:	0800524d 	.word	0x0800524d
 8004960:	0800525e 	.word	0x0800525e

08004964 <memchr>:
 8004964:	4603      	mov	r3, r0
 8004966:	b510      	push	{r4, lr}
 8004968:	b2c9      	uxtb	r1, r1
 800496a:	4402      	add	r2, r0
 800496c:	4293      	cmp	r3, r2
 800496e:	4618      	mov	r0, r3
 8004970:	d101      	bne.n	8004976 <memchr+0x12>
 8004972:	2000      	movs	r0, #0
 8004974:	e003      	b.n	800497e <memchr+0x1a>
 8004976:	7804      	ldrb	r4, [r0, #0]
 8004978:	3301      	adds	r3, #1
 800497a:	428c      	cmp	r4, r1
 800497c:	d1f6      	bne.n	800496c <memchr+0x8>
 800497e:	bd10      	pop	{r4, pc}

08004980 <memmove>:
 8004980:	4288      	cmp	r0, r1
 8004982:	b510      	push	{r4, lr}
 8004984:	eb01 0402 	add.w	r4, r1, r2
 8004988:	d902      	bls.n	8004990 <memmove+0x10>
 800498a:	4284      	cmp	r4, r0
 800498c:	4623      	mov	r3, r4
 800498e:	d807      	bhi.n	80049a0 <memmove+0x20>
 8004990:	1e43      	subs	r3, r0, #1
 8004992:	42a1      	cmp	r1, r4
 8004994:	d008      	beq.n	80049a8 <memmove+0x28>
 8004996:	f811 2b01 	ldrb.w	r2, [r1], #1
 800499a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800499e:	e7f8      	b.n	8004992 <memmove+0x12>
 80049a0:	4601      	mov	r1, r0
 80049a2:	4402      	add	r2, r0
 80049a4:	428a      	cmp	r2, r1
 80049a6:	d100      	bne.n	80049aa <memmove+0x2a>
 80049a8:	bd10      	pop	{r4, pc}
 80049aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049b2:	e7f7      	b.n	80049a4 <memmove+0x24>

080049b4 <_free_r>:
 80049b4:	b538      	push	{r3, r4, r5, lr}
 80049b6:	4605      	mov	r5, r0
 80049b8:	2900      	cmp	r1, #0
 80049ba:	d040      	beq.n	8004a3e <_free_r+0x8a>
 80049bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049c0:	1f0c      	subs	r4, r1, #4
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	bfb8      	it	lt
 80049c6:	18e4      	addlt	r4, r4, r3
 80049c8:	f000 f910 	bl	8004bec <__malloc_lock>
 80049cc:	4a1c      	ldr	r2, [pc, #112]	; (8004a40 <_free_r+0x8c>)
 80049ce:	6813      	ldr	r3, [r2, #0]
 80049d0:	b933      	cbnz	r3, 80049e0 <_free_r+0x2c>
 80049d2:	6063      	str	r3, [r4, #4]
 80049d4:	6014      	str	r4, [r2, #0]
 80049d6:	4628      	mov	r0, r5
 80049d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049dc:	f000 b90c 	b.w	8004bf8 <__malloc_unlock>
 80049e0:	42a3      	cmp	r3, r4
 80049e2:	d908      	bls.n	80049f6 <_free_r+0x42>
 80049e4:	6820      	ldr	r0, [r4, #0]
 80049e6:	1821      	adds	r1, r4, r0
 80049e8:	428b      	cmp	r3, r1
 80049ea:	bf01      	itttt	eq
 80049ec:	6819      	ldreq	r1, [r3, #0]
 80049ee:	685b      	ldreq	r3, [r3, #4]
 80049f0:	1809      	addeq	r1, r1, r0
 80049f2:	6021      	streq	r1, [r4, #0]
 80049f4:	e7ed      	b.n	80049d2 <_free_r+0x1e>
 80049f6:	461a      	mov	r2, r3
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	b10b      	cbz	r3, 8004a00 <_free_r+0x4c>
 80049fc:	42a3      	cmp	r3, r4
 80049fe:	d9fa      	bls.n	80049f6 <_free_r+0x42>
 8004a00:	6811      	ldr	r1, [r2, #0]
 8004a02:	1850      	adds	r0, r2, r1
 8004a04:	42a0      	cmp	r0, r4
 8004a06:	d10b      	bne.n	8004a20 <_free_r+0x6c>
 8004a08:	6820      	ldr	r0, [r4, #0]
 8004a0a:	4401      	add	r1, r0
 8004a0c:	1850      	adds	r0, r2, r1
 8004a0e:	4283      	cmp	r3, r0
 8004a10:	6011      	str	r1, [r2, #0]
 8004a12:	d1e0      	bne.n	80049d6 <_free_r+0x22>
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	4401      	add	r1, r0
 8004a1a:	6011      	str	r1, [r2, #0]
 8004a1c:	6053      	str	r3, [r2, #4]
 8004a1e:	e7da      	b.n	80049d6 <_free_r+0x22>
 8004a20:	d902      	bls.n	8004a28 <_free_r+0x74>
 8004a22:	230c      	movs	r3, #12
 8004a24:	602b      	str	r3, [r5, #0]
 8004a26:	e7d6      	b.n	80049d6 <_free_r+0x22>
 8004a28:	6820      	ldr	r0, [r4, #0]
 8004a2a:	1821      	adds	r1, r4, r0
 8004a2c:	428b      	cmp	r3, r1
 8004a2e:	bf01      	itttt	eq
 8004a30:	6819      	ldreq	r1, [r3, #0]
 8004a32:	685b      	ldreq	r3, [r3, #4]
 8004a34:	1809      	addeq	r1, r1, r0
 8004a36:	6021      	streq	r1, [r4, #0]
 8004a38:	6063      	str	r3, [r4, #4]
 8004a3a:	6054      	str	r4, [r2, #4]
 8004a3c:	e7cb      	b.n	80049d6 <_free_r+0x22>
 8004a3e:	bd38      	pop	{r3, r4, r5, pc}
 8004a40:	200002b8 	.word	0x200002b8

08004a44 <sbrk_aligned>:
 8004a44:	b570      	push	{r4, r5, r6, lr}
 8004a46:	4e0e      	ldr	r6, [pc, #56]	; (8004a80 <sbrk_aligned+0x3c>)
 8004a48:	460c      	mov	r4, r1
 8004a4a:	6831      	ldr	r1, [r6, #0]
 8004a4c:	4605      	mov	r5, r0
 8004a4e:	b911      	cbnz	r1, 8004a56 <sbrk_aligned+0x12>
 8004a50:	f000 f8bc 	bl	8004bcc <_sbrk_r>
 8004a54:	6030      	str	r0, [r6, #0]
 8004a56:	4621      	mov	r1, r4
 8004a58:	4628      	mov	r0, r5
 8004a5a:	f000 f8b7 	bl	8004bcc <_sbrk_r>
 8004a5e:	1c43      	adds	r3, r0, #1
 8004a60:	d00a      	beq.n	8004a78 <sbrk_aligned+0x34>
 8004a62:	1cc4      	adds	r4, r0, #3
 8004a64:	f024 0403 	bic.w	r4, r4, #3
 8004a68:	42a0      	cmp	r0, r4
 8004a6a:	d007      	beq.n	8004a7c <sbrk_aligned+0x38>
 8004a6c:	1a21      	subs	r1, r4, r0
 8004a6e:	4628      	mov	r0, r5
 8004a70:	f000 f8ac 	bl	8004bcc <_sbrk_r>
 8004a74:	3001      	adds	r0, #1
 8004a76:	d101      	bne.n	8004a7c <sbrk_aligned+0x38>
 8004a78:	f04f 34ff 	mov.w	r4, #4294967295
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	bd70      	pop	{r4, r5, r6, pc}
 8004a80:	200002bc 	.word	0x200002bc

08004a84 <_malloc_r>:
 8004a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a88:	1ccd      	adds	r5, r1, #3
 8004a8a:	f025 0503 	bic.w	r5, r5, #3
 8004a8e:	3508      	adds	r5, #8
 8004a90:	2d0c      	cmp	r5, #12
 8004a92:	bf38      	it	cc
 8004a94:	250c      	movcc	r5, #12
 8004a96:	2d00      	cmp	r5, #0
 8004a98:	4607      	mov	r7, r0
 8004a9a:	db01      	blt.n	8004aa0 <_malloc_r+0x1c>
 8004a9c:	42a9      	cmp	r1, r5
 8004a9e:	d905      	bls.n	8004aac <_malloc_r+0x28>
 8004aa0:	230c      	movs	r3, #12
 8004aa2:	2600      	movs	r6, #0
 8004aa4:	603b      	str	r3, [r7, #0]
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aac:	4e2e      	ldr	r6, [pc, #184]	; (8004b68 <_malloc_r+0xe4>)
 8004aae:	f000 f89d 	bl	8004bec <__malloc_lock>
 8004ab2:	6833      	ldr	r3, [r6, #0]
 8004ab4:	461c      	mov	r4, r3
 8004ab6:	bb34      	cbnz	r4, 8004b06 <_malloc_r+0x82>
 8004ab8:	4629      	mov	r1, r5
 8004aba:	4638      	mov	r0, r7
 8004abc:	f7ff ffc2 	bl	8004a44 <sbrk_aligned>
 8004ac0:	1c43      	adds	r3, r0, #1
 8004ac2:	4604      	mov	r4, r0
 8004ac4:	d14d      	bne.n	8004b62 <_malloc_r+0xde>
 8004ac6:	6834      	ldr	r4, [r6, #0]
 8004ac8:	4626      	mov	r6, r4
 8004aca:	2e00      	cmp	r6, #0
 8004acc:	d140      	bne.n	8004b50 <_malloc_r+0xcc>
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	4631      	mov	r1, r6
 8004ad2:	4638      	mov	r0, r7
 8004ad4:	eb04 0803 	add.w	r8, r4, r3
 8004ad8:	f000 f878 	bl	8004bcc <_sbrk_r>
 8004adc:	4580      	cmp	r8, r0
 8004ade:	d13a      	bne.n	8004b56 <_malloc_r+0xd2>
 8004ae0:	6821      	ldr	r1, [r4, #0]
 8004ae2:	3503      	adds	r5, #3
 8004ae4:	1a6d      	subs	r5, r5, r1
 8004ae6:	f025 0503 	bic.w	r5, r5, #3
 8004aea:	3508      	adds	r5, #8
 8004aec:	2d0c      	cmp	r5, #12
 8004aee:	bf38      	it	cc
 8004af0:	250c      	movcc	r5, #12
 8004af2:	4638      	mov	r0, r7
 8004af4:	4629      	mov	r1, r5
 8004af6:	f7ff ffa5 	bl	8004a44 <sbrk_aligned>
 8004afa:	3001      	adds	r0, #1
 8004afc:	d02b      	beq.n	8004b56 <_malloc_r+0xd2>
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	442b      	add	r3, r5
 8004b02:	6023      	str	r3, [r4, #0]
 8004b04:	e00e      	b.n	8004b24 <_malloc_r+0xa0>
 8004b06:	6822      	ldr	r2, [r4, #0]
 8004b08:	1b52      	subs	r2, r2, r5
 8004b0a:	d41e      	bmi.n	8004b4a <_malloc_r+0xc6>
 8004b0c:	2a0b      	cmp	r2, #11
 8004b0e:	d916      	bls.n	8004b3e <_malloc_r+0xba>
 8004b10:	1961      	adds	r1, r4, r5
 8004b12:	42a3      	cmp	r3, r4
 8004b14:	6025      	str	r5, [r4, #0]
 8004b16:	bf18      	it	ne
 8004b18:	6059      	strne	r1, [r3, #4]
 8004b1a:	6863      	ldr	r3, [r4, #4]
 8004b1c:	bf08      	it	eq
 8004b1e:	6031      	streq	r1, [r6, #0]
 8004b20:	5162      	str	r2, [r4, r5]
 8004b22:	604b      	str	r3, [r1, #4]
 8004b24:	4638      	mov	r0, r7
 8004b26:	f104 060b 	add.w	r6, r4, #11
 8004b2a:	f000 f865 	bl	8004bf8 <__malloc_unlock>
 8004b2e:	f026 0607 	bic.w	r6, r6, #7
 8004b32:	1d23      	adds	r3, r4, #4
 8004b34:	1af2      	subs	r2, r6, r3
 8004b36:	d0b6      	beq.n	8004aa6 <_malloc_r+0x22>
 8004b38:	1b9b      	subs	r3, r3, r6
 8004b3a:	50a3      	str	r3, [r4, r2]
 8004b3c:	e7b3      	b.n	8004aa6 <_malloc_r+0x22>
 8004b3e:	6862      	ldr	r2, [r4, #4]
 8004b40:	42a3      	cmp	r3, r4
 8004b42:	bf0c      	ite	eq
 8004b44:	6032      	streq	r2, [r6, #0]
 8004b46:	605a      	strne	r2, [r3, #4]
 8004b48:	e7ec      	b.n	8004b24 <_malloc_r+0xa0>
 8004b4a:	4623      	mov	r3, r4
 8004b4c:	6864      	ldr	r4, [r4, #4]
 8004b4e:	e7b2      	b.n	8004ab6 <_malloc_r+0x32>
 8004b50:	4634      	mov	r4, r6
 8004b52:	6876      	ldr	r6, [r6, #4]
 8004b54:	e7b9      	b.n	8004aca <_malloc_r+0x46>
 8004b56:	230c      	movs	r3, #12
 8004b58:	4638      	mov	r0, r7
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	f000 f84c 	bl	8004bf8 <__malloc_unlock>
 8004b60:	e7a1      	b.n	8004aa6 <_malloc_r+0x22>
 8004b62:	6025      	str	r5, [r4, #0]
 8004b64:	e7de      	b.n	8004b24 <_malloc_r+0xa0>
 8004b66:	bf00      	nop
 8004b68:	200002b8 	.word	0x200002b8

08004b6c <_realloc_r>:
 8004b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b70:	4680      	mov	r8, r0
 8004b72:	4614      	mov	r4, r2
 8004b74:	460e      	mov	r6, r1
 8004b76:	b921      	cbnz	r1, 8004b82 <_realloc_r+0x16>
 8004b78:	4611      	mov	r1, r2
 8004b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b7e:	f7ff bf81 	b.w	8004a84 <_malloc_r>
 8004b82:	b92a      	cbnz	r2, 8004b90 <_realloc_r+0x24>
 8004b84:	f7ff ff16 	bl	80049b4 <_free_r>
 8004b88:	4625      	mov	r5, r4
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b90:	f000 f838 	bl	8004c04 <_malloc_usable_size_r>
 8004b94:	4284      	cmp	r4, r0
 8004b96:	4607      	mov	r7, r0
 8004b98:	d802      	bhi.n	8004ba0 <_realloc_r+0x34>
 8004b9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b9e:	d812      	bhi.n	8004bc6 <_realloc_r+0x5a>
 8004ba0:	4621      	mov	r1, r4
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	f7ff ff6e 	bl	8004a84 <_malloc_r>
 8004ba8:	4605      	mov	r5, r0
 8004baa:	2800      	cmp	r0, #0
 8004bac:	d0ed      	beq.n	8004b8a <_realloc_r+0x1e>
 8004bae:	42bc      	cmp	r4, r7
 8004bb0:	4622      	mov	r2, r4
 8004bb2:	4631      	mov	r1, r6
 8004bb4:	bf28      	it	cs
 8004bb6:	463a      	movcs	r2, r7
 8004bb8:	f7ff fbac 	bl	8004314 <memcpy>
 8004bbc:	4631      	mov	r1, r6
 8004bbe:	4640      	mov	r0, r8
 8004bc0:	f7ff fef8 	bl	80049b4 <_free_r>
 8004bc4:	e7e1      	b.n	8004b8a <_realloc_r+0x1e>
 8004bc6:	4635      	mov	r5, r6
 8004bc8:	e7df      	b.n	8004b8a <_realloc_r+0x1e>
	...

08004bcc <_sbrk_r>:
 8004bcc:	b538      	push	{r3, r4, r5, lr}
 8004bce:	2300      	movs	r3, #0
 8004bd0:	4d05      	ldr	r5, [pc, #20]	; (8004be8 <_sbrk_r+0x1c>)
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	4608      	mov	r0, r1
 8004bd6:	602b      	str	r3, [r5, #0]
 8004bd8:	f7fd f860 	bl	8001c9c <_sbrk>
 8004bdc:	1c43      	adds	r3, r0, #1
 8004bde:	d102      	bne.n	8004be6 <_sbrk_r+0x1a>
 8004be0:	682b      	ldr	r3, [r5, #0]
 8004be2:	b103      	cbz	r3, 8004be6 <_sbrk_r+0x1a>
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	bd38      	pop	{r3, r4, r5, pc}
 8004be8:	200002c0 	.word	0x200002c0

08004bec <__malloc_lock>:
 8004bec:	4801      	ldr	r0, [pc, #4]	; (8004bf4 <__malloc_lock+0x8>)
 8004bee:	f000 b811 	b.w	8004c14 <__retarget_lock_acquire_recursive>
 8004bf2:	bf00      	nop
 8004bf4:	200002c4 	.word	0x200002c4

08004bf8 <__malloc_unlock>:
 8004bf8:	4801      	ldr	r0, [pc, #4]	; (8004c00 <__malloc_unlock+0x8>)
 8004bfa:	f000 b80c 	b.w	8004c16 <__retarget_lock_release_recursive>
 8004bfe:	bf00      	nop
 8004c00:	200002c4 	.word	0x200002c4

08004c04 <_malloc_usable_size_r>:
 8004c04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c08:	1f18      	subs	r0, r3, #4
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	bfbc      	itt	lt
 8004c0e:	580b      	ldrlt	r3, [r1, r0]
 8004c10:	18c0      	addlt	r0, r0, r3
 8004c12:	4770      	bx	lr

08004c14 <__retarget_lock_acquire_recursive>:
 8004c14:	4770      	bx	lr

08004c16 <__retarget_lock_release_recursive>:
 8004c16:	4770      	bx	lr

08004c18 <_init>:
 8004c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1a:	bf00      	nop
 8004c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1e:	bc08      	pop	{r3}
 8004c20:	469e      	mov	lr, r3
 8004c22:	4770      	bx	lr

08004c24 <_fini>:
 8004c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c26:	bf00      	nop
 8004c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c2a:	bc08      	pop	{r3}
 8004c2c:	469e      	mov	lr, r3
 8004c2e:	4770      	bx	lr


NODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c14  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  08004de4  08004de4  00014de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800541c  0800541c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800541c  0800541c  0001541c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005424  08005424  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005424  08005424  00015424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005428  08005428  00015428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800542c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000080  080054ac  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080054ac  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4c9  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b37  00000000  00000000  0002b579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002d0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002db10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014183  00000000  00000000  0002e4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9ed  00000000  00000000  0004264b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078abf  00000000  00000000  0004e038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c6af7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e04  00000000  00000000  000c6b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004dcc 	.word	0x08004dcc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08004dcc 	.word	0x08004dcc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <NRF24_DelayMicroSeconds+0x3c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a0b      	ldr	r2, [pc, #44]	; (8000624 <NRF24_DelayMicroSeconds+0x40>)
 80005f6:	fba2 2303 	umull	r2, r3, r2, r3
 80005fa:	0c9a      	lsrs	r2, r3, #18
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	fb02 f303 	mul.w	r3, r2, r3
 8000602:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000604:	bf00      	nop
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	1e5a      	subs	r2, r3, #1
 800060a:	60fa      	str	r2, [r7, #12]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d1fa      	bne.n	8000606 <NRF24_DelayMicroSeconds+0x22>
}
 8000610:	bf00      	nop
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20000010 	.word	0x20000010
 8000624:	165e9f81 	.word	0x165e9f81

08000628 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d008      	beq.n	8000648 <NRF24_csn+0x20>
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <NRF24_csn+0x38>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <NRF24_csn+0x3c>)
 800063c:	8811      	ldrh	r1, [r2, #0]
 800063e:	2201      	movs	r2, #1
 8000640:	4618      	mov	r0, r3
 8000642:	f002 f8e1 	bl	8002808 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000646:	e007      	b.n	8000658 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <NRF24_csn+0x38>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a05      	ldr	r2, [pc, #20]	; (8000664 <NRF24_csn+0x3c>)
 800064e:	8811      	ldrh	r1, [r2, #0]
 8000650:	2200      	movs	r2, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f002 f8d8 	bl	8002808 <HAL_GPIO_WritePin>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000b0 	.word	0x200000b0
 8000664:	200000b4 	.word	0x200000b4

08000668 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d008      	beq.n	8000688 <NRF24_ce+0x20>
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <NRF24_ce+0x38>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a0a      	ldr	r2, [pc, #40]	; (80006a4 <NRF24_ce+0x3c>)
 800067c:	8811      	ldrh	r1, [r2, #0]
 800067e:	2201      	movs	r2, #1
 8000680:	4618      	mov	r0, r3
 8000682:	f002 f8c1 	bl	8002808 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000686:	e007      	b.n	8000698 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <NRF24_ce+0x38>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a05      	ldr	r2, [pc, #20]	; (80006a4 <NRF24_ce+0x3c>)
 800068e:	8811      	ldrh	r1, [r2, #0]
 8000690:	2200      	movs	r2, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f002 f8b8 	bl	8002808 <HAL_GPIO_WritePin>
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200000b0 	.word	0x200000b0
 80006a4:	200000b6 	.word	0x200000b6

080006a8 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80006b2:	2000      	movs	r0, #0
 80006b4:	f7ff ffb8 	bl	8000628 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	f003 031f 	and.w	r3, r3, #31
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80006c2:	f107 010c 	add.w	r1, r7, #12
 80006c6:	2364      	movs	r3, #100	; 0x64
 80006c8:	2201      	movs	r2, #1
 80006ca:	480a      	ldr	r0, [pc, #40]	; (80006f4 <NRF24_read_register+0x4c>)
 80006cc:	f002 fdfd 	bl	80032ca <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	1c59      	adds	r1, r3, #1
 80006d6:	2364      	movs	r3, #100	; 0x64
 80006d8:	2201      	movs	r2, #1
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <NRF24_read_register+0x4c>)
 80006dc:	f002 ff31 	bl	8003542 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80006e0:	7b7b      	ldrb	r3, [r7, #13]
 80006e2:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f7ff ff9f 	bl	8000628 <NRF24_csn>
	return retData;
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200000b8 	.word	0x200000b8

080006f8 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	71fb      	strb	r3, [r7, #7]
 8000704:	4613      	mov	r3, r2
 8000706:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff ff8d 	bl	8000628 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	f003 031f 	and.w	r3, r3, #31
 8000714:	b2db      	uxtb	r3, r3
 8000716:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000718:	f107 010c 	add.w	r1, r7, #12
 800071c:	2364      	movs	r3, #100	; 0x64
 800071e:	2201      	movs	r2, #1
 8000720:	4808      	ldr	r0, [pc, #32]	; (8000744 <NRF24_read_registerN+0x4c>)
 8000722:	f002 fdd2 	bl	80032ca <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000726:	79bb      	ldrb	r3, [r7, #6]
 8000728:	b29a      	uxth	r2, r3
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	6839      	ldr	r1, [r7, #0]
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <NRF24_read_registerN+0x4c>)
 8000730:	f002 ff07 	bl	8003542 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000734:	2001      	movs	r0, #1
 8000736:	f7ff ff77 	bl	8000628 <NRF24_csn>
}
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200000b8 	.word	0x200000b8

08000748 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	460a      	mov	r2, r1
 8000752:	71fb      	strb	r3, [r7, #7]
 8000754:	4613      	mov	r3, r2
 8000756:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000758:	2000      	movs	r0, #0
 800075a:	f7ff ff65 	bl	8000628 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	f043 0320 	orr.w	r3, r3, #32
 8000764:	b2db      	uxtb	r3, r3
 8000766:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000768:	79bb      	ldrb	r3, [r7, #6]
 800076a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 800076c:	f107 010c 	add.w	r1, r7, #12
 8000770:	2364      	movs	r3, #100	; 0x64
 8000772:	2202      	movs	r2, #2
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <NRF24_write_register+0x40>)
 8000776:	f002 fda8 	bl	80032ca <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff ff54 	bl	8000628 <NRF24_csn>
}
 8000780:	bf00      	nop
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200000b8 	.word	0x200000b8

0800078c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	6039      	str	r1, [r7, #0]
 8000796:	71fb      	strb	r3, [r7, #7]
 8000798:	4613      	mov	r3, r2
 800079a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800079c:	2000      	movs	r0, #0
 800079e:	f7ff ff43 	bl	8000628 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	f043 0320 	orr.w	r3, r3, #32
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80007ac:	f107 010c 	add.w	r1, r7, #12
 80007b0:	2364      	movs	r3, #100	; 0x64
 80007b2:	2201      	movs	r2, #1
 80007b4:	4808      	ldr	r0, [pc, #32]	; (80007d8 <NRF24_write_registerN+0x4c>)
 80007b6:	f002 fd88 	bl	80032ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	b29a      	uxth	r2, r3
 80007be:	2364      	movs	r3, #100	; 0x64
 80007c0:	6839      	ldr	r1, [r7, #0]
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <NRF24_write_registerN+0x4c>)
 80007c4:	f002 fd81 	bl	80032ca <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff ff2d 	bl	8000628 <NRF24_csn>
}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000b8 	.word	0x200000b8

080007dc <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 80007e8:	2000      	movs	r0, #0
 80007ea:	f7ff ff1d 	bl	8000628 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80007ee:	23a0      	movs	r3, #160	; 0xa0
 80007f0:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80007f2:	f107 010f 	add.w	r1, r7, #15
 80007f6:	2364      	movs	r3, #100	; 0x64
 80007f8:	2201      	movs	r2, #1
 80007fa:	4808      	ldr	r0, [pc, #32]	; (800081c <NRF24_write_payload+0x40>)
 80007fc:	f002 fd65 	bl	80032ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000800:	78fb      	ldrb	r3, [r7, #3]
 8000802:	b29a      	uxth	r2, r3
 8000804:	2364      	movs	r3, #100	; 0x64
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <NRF24_write_payload+0x40>)
 800080a:	f002 fd5e 	bl	80032ca <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800080e:	2001      	movs	r0, #1
 8000810:	f7ff ff0a 	bl	8000628 <NRF24_csn>
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200000b8 	.word	0x200000b8

08000820 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 800082c:	f000 fa86 	bl	8000d3c <NRF24_getPayloadSize>
 8000830:	4603      	mov	r3, r0
 8000832:	461a      	mov	r2, r3
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	4293      	cmp	r3, r2
 8000838:	d303      	bcc.n	8000842 <NRF24_read_payload+0x22>
 800083a:	f000 fa7f 	bl	8000d3c <NRF24_getPayloadSize>
 800083e:	4603      	mov	r3, r0
 8000840:	e000      	b.n	8000844 <NRF24_read_payload+0x24>
 8000842:	78fb      	ldrb	r3, [r7, #3]
 8000844:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000846:	2000      	movs	r0, #0
 8000848:	f7ff feee 	bl	8000628 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 800084c:	2361      	movs	r3, #97	; 0x61
 800084e:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8000850:	f107 010e 	add.w	r1, r7, #14
 8000854:	2364      	movs	r3, #100	; 0x64
 8000856:	2201      	movs	r2, #1
 8000858:	4808      	ldr	r0, [pc, #32]	; (800087c <NRF24_read_payload+0x5c>)
 800085a:	f002 fd36 	bl	80032ca <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	b29a      	uxth	r2, r3
 8000862:	2364      	movs	r3, #100	; 0x64
 8000864:	6879      	ldr	r1, [r7, #4]
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <NRF24_read_payload+0x5c>)
 8000868:	f002 fe6b 	bl	8003542 <HAL_SPI_Receive>
	NRF24_csn(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff fedb 	bl	8000628 <NRF24_csn>
}
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000b8 	.word	0x200000b8

08000880 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000884:	21ff      	movs	r1, #255	; 0xff
 8000886:	20e1      	movs	r0, #225	; 0xe1
 8000888:	f7ff ff5e 	bl	8000748 <NRF24_write_register>
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}

08000890 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000894:	21ff      	movs	r1, #255	; 0xff
 8000896:	20e2      	movs	r0, #226	; 0xe2
 8000898:	f7ff ff56 	bl	8000748 <NRF24_write_register>
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}

080008a0 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80008a6:	2007      	movs	r0, #7
 80008a8:	f7ff fefe 	bl	80006a8 <NRF24_read_register>
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80008b0:	79fb      	ldrb	r3, [r7, #7]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80008bc:	b082      	sub	sp, #8
 80008be:	b580      	push	{r7, lr}
 80008c0:	b084      	sub	sp, #16
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
 80008c6:	61fb      	str	r3, [r7, #28]
 80008c8:	460b      	mov	r3, r1
 80008ca:	807b      	strh	r3, [r7, #2]
 80008cc:	4613      	mov	r3, r2
 80008ce:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80008d0:	4b66      	ldr	r3, [pc, #408]	; (8000a6c <NRF24_begin+0x1b0>)
 80008d2:	4618      	mov	r0, r3
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	2258      	movs	r2, #88	; 0x58
 80008da:	4619      	mov	r1, r3
 80008dc:	f003 fe00 	bl	80044e0 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80008e0:	4a63      	ldr	r2, [pc, #396]	; (8000a70 <NRF24_begin+0x1b4>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80008e6:	4a63      	ldr	r2, [pc, #396]	; (8000a74 <NRF24_begin+0x1b8>)
 80008e8:	887b      	ldrh	r3, [r7, #2]
 80008ea:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80008ec:	4a62      	ldr	r2, [pc, #392]	; (8000a78 <NRF24_begin+0x1bc>)
 80008ee:	883b      	ldrh	r3, [r7, #0]
 80008f0:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 80008f2:	2001      	movs	r0, #1
 80008f4:	f7ff fe98 	bl	8000628 <NRF24_csn>
	NRF24_ce(0);
 80008f8:	2000      	movs	r0, #0
 80008fa:	f7ff feb5 	bl	8000668 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80008fe:	2005      	movs	r0, #5
 8000900:	f001 fcec 	bl	80022dc <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000904:	2108      	movs	r1, #8
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff ff1e 	bl	8000748 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 800090c:	213f      	movs	r1, #63	; 0x3f
 800090e:	2001      	movs	r0, #1
 8000910:	f7ff ff1a 	bl	8000748 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000914:	2103      	movs	r1, #3
 8000916:	2002      	movs	r0, #2
 8000918:	f7ff ff16 	bl	8000748 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 800091c:	2103      	movs	r1, #3
 800091e:	2003      	movs	r0, #3
 8000920:	f7ff ff12 	bl	8000748 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000924:	2103      	movs	r1, #3
 8000926:	2004      	movs	r0, #4
 8000928:	f7ff ff0e 	bl	8000748 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 800092c:	2102      	movs	r1, #2
 800092e:	2005      	movs	r0, #5
 8000930:	f7ff ff0a 	bl	8000748 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000934:	210f      	movs	r1, #15
 8000936:	2006      	movs	r0, #6
 8000938:	f7ff ff06 	bl	8000748 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 800093c:	210e      	movs	r1, #14
 800093e:	2007      	movs	r0, #7
 8000940:	f7ff ff02 	bl	8000748 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000944:	2100      	movs	r1, #0
 8000946:	2008      	movs	r0, #8
 8000948:	f7ff fefe 	bl	8000748 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 800094c:	2100      	movs	r1, #0
 800094e:	2009      	movs	r0, #9
 8000950:	f7ff fefa 	bl	8000748 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000954:	23e7      	movs	r3, #231	; 0xe7
 8000956:	733b      	strb	r3, [r7, #12]
 8000958:	23e7      	movs	r3, #231	; 0xe7
 800095a:	72fb      	strb	r3, [r7, #11]
 800095c:	23e7      	movs	r3, #231	; 0xe7
 800095e:	72bb      	strb	r3, [r7, #10]
 8000960:	23e7      	movs	r3, #231	; 0xe7
 8000962:	727b      	strb	r3, [r7, #9]
 8000964:	23e7      	movs	r3, #231	; 0xe7
 8000966:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	2205      	movs	r2, #5
 800096e:	4619      	mov	r1, r3
 8000970:	200a      	movs	r0, #10
 8000972:	f7ff ff0b 	bl	800078c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000976:	23c2      	movs	r3, #194	; 0xc2
 8000978:	733b      	strb	r3, [r7, #12]
 800097a:	23c2      	movs	r3, #194	; 0xc2
 800097c:	72fb      	strb	r3, [r7, #11]
 800097e:	23c2      	movs	r3, #194	; 0xc2
 8000980:	72bb      	strb	r3, [r7, #10]
 8000982:	23c2      	movs	r3, #194	; 0xc2
 8000984:	727b      	strb	r3, [r7, #9]
 8000986:	23c2      	movs	r3, #194	; 0xc2
 8000988:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800098a:	f107 0308 	add.w	r3, r7, #8
 800098e:	2205      	movs	r2, #5
 8000990:	4619      	mov	r1, r3
 8000992:	200b      	movs	r0, #11
 8000994:	f7ff fefa 	bl	800078c <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000998:	21c3      	movs	r1, #195	; 0xc3
 800099a:	200c      	movs	r0, #12
 800099c:	f7ff fed4 	bl	8000748 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80009a0:	21c4      	movs	r1, #196	; 0xc4
 80009a2:	200d      	movs	r0, #13
 80009a4:	f7ff fed0 	bl	8000748 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80009a8:	21c5      	movs	r1, #197	; 0xc5
 80009aa:	200e      	movs	r0, #14
 80009ac:	f7ff fecc 	bl	8000748 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80009b0:	21c6      	movs	r1, #198	; 0xc6
 80009b2:	200f      	movs	r0, #15
 80009b4:	f7ff fec8 	bl	8000748 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80009b8:	23e7      	movs	r3, #231	; 0xe7
 80009ba:	733b      	strb	r3, [r7, #12]
 80009bc:	23e7      	movs	r3, #231	; 0xe7
 80009be:	72fb      	strb	r3, [r7, #11]
 80009c0:	23e7      	movs	r3, #231	; 0xe7
 80009c2:	72bb      	strb	r3, [r7, #10]
 80009c4:	23e7      	movs	r3, #231	; 0xe7
 80009c6:	727b      	strb	r3, [r7, #9]
 80009c8:	23e7      	movs	r3, #231	; 0xe7
 80009ca:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	2205      	movs	r2, #5
 80009d2:	4619      	mov	r1, r3
 80009d4:	2010      	movs	r0, #16
 80009d6:	f7ff fed9 	bl	800078c <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80009da:	2100      	movs	r1, #0
 80009dc:	2011      	movs	r0, #17
 80009de:	f7ff feb3 	bl	8000748 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80009e2:	2100      	movs	r1, #0
 80009e4:	2012      	movs	r0, #18
 80009e6:	f7ff feaf 	bl	8000748 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80009ea:	2100      	movs	r1, #0
 80009ec:	2013      	movs	r0, #19
 80009ee:	f7ff feab 	bl	8000748 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80009f2:	2100      	movs	r1, #0
 80009f4:	2014      	movs	r0, #20
 80009f6:	f7ff fea7 	bl	8000748 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80009fa:	2100      	movs	r1, #0
 80009fc:	2015      	movs	r0, #21
 80009fe:	f7ff fea3 	bl	8000748 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000a02:	2100      	movs	r1, #0
 8000a04:	2016      	movs	r0, #22
 8000a06:	f7ff fe9f 	bl	8000748 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000a0a:	f000 fb29 	bl	8001060 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000a0e:	2100      	movs	r1, #0
 8000a10:	201c      	movs	r0, #28
 8000a12:	f7ff fe99 	bl	8000748 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000a16:	2100      	movs	r1, #0
 8000a18:	201d      	movs	r0, #29
 8000a1a:	f7ff fe95 	bl	8000748 <NRF24_write_register>
	printRadioSettings();
 8000a1e:	f000 fb39 	bl	8001094 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000a22:	210f      	movs	r1, #15
 8000a24:	200f      	movs	r0, #15
 8000a26:	f000 f941 	bl	8000cac <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000a2a:	2003      	movs	r0, #3
 8000a2c:	f000 f9c7 	bl	8000dbe <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f000 f9fd 	bl	8000e30 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000a36:	2002      	movs	r0, #2
 8000a38:	f000 fa40 	bl	8000ebc <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000a3c:	f000 f992 	bl	8000d64 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000a40:	2020      	movs	r0, #32
 8000a42:	f000 f963 	bl	8000d0c <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000a46:	f000 fb02 	bl	800104e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000a4a:	204c      	movs	r0, #76	; 0x4c
 8000a4c:	f000 f949 	bl	8000ce2 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000a50:	f7ff ff16 	bl	8000880 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000a54:	f7ff ff1c 	bl	8000890 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000a58:	f000 fa58 	bl	8000f0c <NRF24_powerDown>
	
}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a66:	b002      	add	sp, #8
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	200000b8 	.word	0x200000b8
 8000a70:	200000b0 	.word	0x200000b0
 8000a74:	200000b4 	.word	0x200000b4
 8000a78:	200000b6 	.word	0x200000b6

08000a7c <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000a80:	2000      	movs	r0, #0
 8000a82:	f7ff fe11 	bl	80006a8 <NRF24_read_register>
 8000a86:	4603      	mov	r3, r0
 8000a88:	f043 0303 	orr.w	r3, r3, #3
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	4619      	mov	r1, r3
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fe59 	bl	8000748 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <NRF24_startListening+0x48>)
 8000a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	d004      	beq.n	8000aaa <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000aa0:	2205      	movs	r2, #5
 8000aa2:	4908      	ldr	r1, [pc, #32]	; (8000ac4 <NRF24_startListening+0x48>)
 8000aa4:	200a      	movs	r0, #10
 8000aa6:	f7ff fe71 	bl	800078c <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 8000aaa:	f7ff fee9 	bl	8000880 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000aae:	f7ff feef 	bl	8000890 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f7ff fdd8 	bl	8000668 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000ab8:	2096      	movs	r0, #150	; 0x96
 8000aba:	f7ff fd93 	bl	80005e4 <NRF24_DelayMicroSeconds>
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200000a0 	.word	0x200000a0

08000ac8 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff fdcb 	bl	8000668 <NRF24_ce>
	NRF24_flush_tx();
 8000ad2:	f7ff fed5 	bl	8000880 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000ad6:	f7ff fedb 	bl	8000890 <NRF24_flush_rx>
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000aec:	f000 faaf 	bl	800104e <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000af0:	78fb      	ldrb	r3, [r7, #3]
 8000af2:	4619      	mov	r1, r3
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f000 fa48 	bl	8000f8a <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000afa:	f001 fbe3 	bl	80022c4 <HAL_GetTick>
 8000afe:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000b00:	230a      	movs	r3, #10
 8000b02:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000b04:	f107 030d 	add.w	r3, r7, #13
 8000b08:	2201      	movs	r2, #1
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	2008      	movs	r0, #8
 8000b0e:	f7ff fdf3 	bl	80006f8 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000b12:	f7ff fec5 	bl	80008a0 <NRF24_get_status>
 8000b16:	4603      	mov	r3, r0
 8000b18:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d107      	bne.n	8000b34 <NRF24_write+0x54>
 8000b24:	f001 fbce 	bl	80022c4 <HAL_GetTick>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d8e7      	bhi.n	8000b04 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000b34:	f107 010b 	add.w	r1, r7, #11
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	4a0c      	ldr	r2, [pc, #48]	; (8000b70 <NRF24_write+0x90>)
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 fa52 	bl	8000fe8 <NRF24_whatHappened>
	retStatus = tx_ok;
 8000b44:	7b3b      	ldrb	r3, [r7, #12]
 8000b46:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <NRF24_write+0x90>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d005      	beq.n	8000b5c <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000b50:	f000 f900 	bl	8000d54 <NRF24_getDynamicPayloadSize>
 8000b54:	4603      	mov	r3, r0
 8000b56:	461a      	mov	r2, r3
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <NRF24_write+0x94>)
 8000b5a:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8000b5c:	f000 f80c 	bl	8000b78 <NRF24_available>
	NRF24_flush_tx();
 8000b60:	f7ff fe8e 	bl	8000880 <NRF24_flush_tx>
	return retStatus;
 8000b64:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200000a8 	.word	0x200000a8
 8000b74:	200000a9 	.word	0x200000a9

08000b78 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f000 f9d4 	bl	8000f2a <NRF24_availablePipe>
 8000b82:	4603      	mov	r3, r0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000b94:	78fb      	ldrb	r3, [r7, #3]
 8000b96:	4619      	mov	r1, r3
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff fe41 	bl	8000820 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000b9e:	2017      	movs	r0, #23
 8000ba0:	f7ff fd82 	bl	80006a8 <NRF24_read_register>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000bac:	f7ff fe70 	bl	8000890 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000bb0:	f000 f8d0 	bl	8000d54 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	bf14      	ite	ne
 8000bba:	2301      	movne	r3, #1
 8000bbc:	2300      	moveq	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	2205      	movs	r2, #5
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	200a      	movs	r0, #10
 8000bda:	f7ff fdd7 	bl	800078c <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000bde:	463b      	mov	r3, r7
 8000be0:	2205      	movs	r2, #5
 8000be2:	4619      	mov	r1, r3
 8000be4:	2010      	movs	r0, #16
 8000be6:	f7ff fdd1 	bl	800078c <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000bea:	2320      	movs	r3, #32
 8000bec:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <NRF24_openWritingPipe+0x44>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	7bfa      	ldrb	r2, [r7, #15]
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	bf28      	it	cs
 8000bf8:	4613      	movcs	r3, r2
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	2011      	movs	r0, #17
 8000c00:	f7ff fda2 	bl	8000748 <NRF24_write_register>
}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	200000aa 	.word	0x200000aa

08000c10 <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4601      	mov	r1, r0
 8000c18:	e9c7 2300 	strd	r2, r3, [r7]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d104      	bne.n	8000c30 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000c26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c2a:	491c      	ldr	r1, [pc, #112]	; (8000c9c <NRF24_openReadingPipe+0x8c>)
 8000c2c:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d82d      	bhi.n	8000c92 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d808      	bhi.n	8000c4e <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	4a18      	ldr	r2, [pc, #96]	; (8000ca0 <NRF24_openReadingPipe+0x90>)
 8000c40:	5cd3      	ldrb	r3, [r2, r3]
 8000c42:	4639      	mov	r1, r7
 8000c44:	2205      	movs	r2, #5
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fda0 	bl	800078c <NRF24_write_registerN>
 8000c4c:	e007      	b.n	8000c5e <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <NRF24_openReadingPipe+0x90>)
 8000c52:	5cd3      	ldrb	r3, [r2, r3]
 8000c54:	4639      	mov	r1, r7
 8000c56:	2201      	movs	r2, #1
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fd97 	bl	800078c <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	4a10      	ldr	r2, [pc, #64]	; (8000ca4 <NRF24_openReadingPipe+0x94>)
 8000c62:	5cd3      	ldrb	r3, [r2, r3]
 8000c64:	4a10      	ldr	r2, [pc, #64]	; (8000ca8 <NRF24_openReadingPipe+0x98>)
 8000c66:	7812      	ldrb	r2, [r2, #0]
 8000c68:	4611      	mov	r1, r2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fd6c 	bl	8000748 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000c70:	2002      	movs	r0, #2
 8000c72:	f7ff fd19 	bl	80006a8 <NRF24_read_register>
 8000c76:	4603      	mov	r3, r0
 8000c78:	b25a      	sxtb	r2, r3
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	b25b      	sxtb	r3, r3
 8000c84:	4313      	orrs	r3, r2
 8000c86:	b25b      	sxtb	r3, r3
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	2002      	movs	r0, #2
 8000c8e:	f7ff fd5b 	bl	8000748 <NRF24_write_register>
	}
	
}
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200000a0 	.word	0x200000a0
 8000ca0:	080053c0 	.word	0x080053c0
 8000ca4:	080053c8 	.word	0x080053c8
 8000ca8:	200000aa 	.word	0x200000aa

08000cac <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	460a      	mov	r2, r1
 8000cb6:	71fb      	strb	r3, [r7, #7]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	011b      	lsls	r3, r3, #4
 8000cc0:	b25a      	sxtb	r2, r3
 8000cc2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	b25b      	sxtb	r3, r3
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	b25b      	sxtb	r3, r3
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	2004      	movs	r0, #4
 8000cd6:	f7ff fd37 	bl	8000748 <NRF24_write_register>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b084      	sub	sp, #16
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000cec:	237f      	movs	r3, #127	; 0x7f
 8000cee:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000cf0:	7bfa      	ldrb	r2, [r7, #15]
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	bf28      	it	cs
 8000cf8:	4613      	movcs	r3, r2
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	2005      	movs	r0, #5
 8000d00:	f7ff fd22 	bl	8000748 <NRF24_write_register>
}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000d16:	2320      	movs	r3, #32
 8000d18:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000d1a:	7bfa      	ldrb	r2, [r7, #15]
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	bf28      	it	cs
 8000d22:	4613      	movcs	r3, r2
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <NRF24_setPayloadSize+0x2c>)
 8000d28:	701a      	strb	r2, [r3, #0]
}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	200000aa 	.word	0x200000aa

08000d3c <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
	return payload_size;
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <NRF24_getPayloadSize+0x14>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	200000aa 	.word	0x200000aa

08000d54 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000d58:	2060      	movs	r0, #96	; 0x60
 8000d5a:	f7ff fca5 	bl	80006a8 <NRF24_read_register>
 8000d5e:	4603      	mov	r3, r0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000d68:	201d      	movs	r0, #29
 8000d6a:	f7ff fc9d 	bl	80006a8 <NRF24_read_register>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	f023 0304 	bic.w	r3, r3, #4
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	4619      	mov	r1, r3
 8000d78:	201d      	movs	r0, #29
 8000d7a:	f7ff fce5 	bl	8000748 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000d7e:	2100      	movs	r1, #0
 8000d80:	201c      	movs	r0, #28
 8000d82:	f7ff fce1 	bl	8000748 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000d86:	4b02      	ldr	r3, [pc, #8]	; (8000d90 <NRF24_disableDynamicPayloads+0x2c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200000ab 	.word	0x200000ab

08000d94 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d004      	beq.n	8000dae <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000da4:	213f      	movs	r1, #63	; 0x3f
 8000da6:	2001      	movs	r0, #1
 8000da8:	f7ff fcce 	bl	8000748 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000dac:	e003      	b.n	8000db6 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000dae:	2100      	movs	r1, #0
 8000db0:	2001      	movs	r0, #1
 8000db2:	f7ff fcc9 	bl	8000748 <NRF24_write_register>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b084      	sub	sp, #16
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000dc8:	2006      	movs	r0, #6
 8000dca:	f7ff fc6d 	bl	80006a8 <NRF24_read_register>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	f023 0306 	bic.w	r3, r3, #6
 8000dd8:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d104      	bne.n	8000dea <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	f043 0306 	orr.w	r3, r3, #6
 8000de6:	73fb      	strb	r3, [r7, #15]
 8000de8:	e019      	b.n	8000e1e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d104      	bne.n	8000dfa <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	f043 0304 	orr.w	r3, r3, #4
 8000df6:	73fb      	strb	r3, [r7, #15]
 8000df8:	e011      	b.n	8000e1e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d104      	bne.n	8000e0a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	f043 0302 	orr.w	r3, r3, #2
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	e009      	b.n	8000e1e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d006      	beq.n	8000e1e <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	d103      	bne.n	8000e1e <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	f043 0306 	orr.w	r3, r3, #6
 8000e1c:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	4619      	mov	r1, r3
 8000e22:	2006      	movs	r0, #6
 8000e24:	f7ff fc90 	bl	8000748 <NRF24_write_register>
}
 8000e28:	bf00      	nop
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000e3e:	2006      	movs	r0, #6
 8000e40:	f7ff fc32 	bl	80006a8 <NRF24_read_register>
 8000e44:	4603      	mov	r3, r0
 8000e46:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <NRF24_setDataRate+0x88>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000e4e:	7bbb      	ldrb	r3, [r7, #14]
 8000e50:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000e54:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d107      	bne.n	8000e6c <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <NRF24_setDataRate+0x88>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000e62:	7bbb      	ldrb	r3, [r7, #14]
 8000e64:	f043 0320 	orr.w	r3, r3, #32
 8000e68:	73bb      	strb	r3, [r7, #14]
 8000e6a:	e00d      	b.n	8000e88 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d107      	bne.n	8000e82 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <NRF24_setDataRate+0x88>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000e78:	7bbb      	ldrb	r3, [r7, #14]
 8000e7a:	f043 0308 	orr.w	r3, r3, #8
 8000e7e:	73bb      	strb	r3, [r7, #14]
 8000e80:	e002      	b.n	8000e88 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000e82:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <NRF24_setDataRate+0x88>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000e88:	7bbb      	ldrb	r3, [r7, #14]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	2006      	movs	r0, #6
 8000e8e:	f7ff fc5b 	bl	8000748 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000e92:	2006      	movs	r0, #6
 8000e94:	f7ff fc08 	bl	80006a8 <NRF24_read_register>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	7bbb      	ldrb	r3, [r7, #14]
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d102      	bne.n	8000ea8 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	73fb      	strb	r3, [r7, #15]
 8000ea6:	e002      	b.n	8000eae <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <NRF24_setDataRate+0x88>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	200000ac 	.word	0x200000ac

08000ebc <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff fbee 	bl	80006a8 <NRF24_read_register>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	f023 030c 	bic.w	r3, r3, #12
 8000ed2:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d00f      	beq.n	8000efa <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d104      	bne.n	8000eea <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	f043 0308 	orr.w	r3, r3, #8
 8000ee6:	73fb      	strb	r3, [r7, #15]
 8000ee8:	e007      	b.n	8000efa <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	4619      	mov	r1, r3
 8000efe:	2000      	movs	r0, #0
 8000f00:	f7ff fc22 	bl	8000748 <NRF24_write_register>
}
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000f10:	2000      	movs	r0, #0
 8000f12:	f7ff fbc9 	bl	80006a8 <NRF24_read_register>
 8000f16:	4603      	mov	r3, r0
 8000f18:	f023 0302 	bic.w	r3, r3, #2
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	4619      	mov	r1, r3
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff fc11 	bl	8000748 <NRF24_write_register>
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b084      	sub	sp, #16
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000f32:	f7ff fcb5 	bl	80008a0 <NRF24_get_status>
 8000f36:	4603      	mov	r3, r0
 8000f38:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	bf14      	ite	ne
 8000f44:	2301      	movne	r3, #1
 8000f46:	2300      	moveq	r3, #0
 8000f48:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000f4a:	7bbb      	ldrb	r3, [r7, #14]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d017      	beq.n	8000f80 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d007      	beq.n	8000f66 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	085b      	lsrs	r3, r3, #1
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	f003 0307 	and.w	r3, r3, #7
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000f66:	2140      	movs	r1, #64	; 0x40
 8000f68:	2007      	movs	r0, #7
 8000f6a:	f7ff fbed 	bl	8000748 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	f003 0320 	and.w	r3, r3, #32
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000f78:	2120      	movs	r1, #32
 8000f7a:	2007      	movs	r0, #7
 8000f7c:	f7ff fbe4 	bl	8000748 <NRF24_write_register>
    }
  }
  return result;
 8000f80:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	460b      	mov	r3, r1
 8000f94:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f7ff fb66 	bl	8000668 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f7ff fb83 	bl	80006a8 <NRF24_read_register>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	f023 0301 	bic.w	r3, r3, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f7ff fbc8 	bl	8000748 <NRF24_write_register>
  NRF24_ce(1);
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f7ff fb55 	bl	8000668 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8000fbe:	2096      	movs	r0, #150	; 0x96
 8000fc0:	f7ff fb10 	bl	80005e4 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff fc07 	bl	80007dc <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f7ff fb4a 	bl	8000668 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000fd4:	200f      	movs	r0, #15
 8000fd6:	f7ff fb05 	bl	80005e4 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f7ff fb44 	bl	8000668 <NRF24_ce>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000ff4:	f7ff fc54 	bl	80008a0 <NRF24_get_status>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001002:	2170      	movs	r1, #112	; 0x70
 8001004:	2007      	movs	r0, #7
 8001006:	f7ff fb9f 	bl	8000748 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 800100a:	7dfb      	ldrb	r3, [r7, #23]
 800100c:	f003 0320 	and.w	r3, r3, #32
 8001010:	2b00      	cmp	r3, #0
 8001012:	bf14      	ite	ne
 8001014:	2301      	movne	r3, #1
 8001016:	2300      	moveq	r3, #0
 8001018:	b2da      	uxtb	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 800101e:	7dfb      	ldrb	r3, [r7, #23]
 8001020:	f003 0310 	and.w	r3, r3, #16
 8001024:	2b00      	cmp	r3, #0
 8001026:	bf14      	ite	ne
 8001028:	2301      	movne	r3, #1
 800102a:	2300      	moveq	r3, #0
 800102c:	b2da      	uxtb	r2, r3
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8001032:	7dfb      	ldrb	r3, [r7, #23]
 8001034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001038:	2b00      	cmp	r3, #0
 800103a:	bf14      	ite	ne
 800103c:	2301      	movne	r3, #1
 800103e:	2300      	moveq	r3, #0
 8001040:	b2da      	uxtb	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	701a      	strb	r2, [r3, #0]
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001052:	2170      	movs	r1, #112	; 0x70
 8001054:	2007      	movs	r0, #7
 8001056:	f7ff fb77 	bl	8000748 <NRF24_write_register>
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001066:	2000      	movs	r0, #0
 8001068:	f7ff fade 	bl	8000628 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 800106c:	2350      	movs	r3, #80	; 0x50
 800106e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001070:	2373      	movs	r3, #115	; 0x73
 8001072:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001074:	1d39      	adds	r1, r7, #4
 8001076:	2364      	movs	r3, #100	; 0x64
 8001078:	2202      	movs	r2, #2
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <NRF24_ACTIVATE_cmd+0x30>)
 800107c:	f002 f925 	bl	80032ca <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001080:	2001      	movs	r0, #1
 8001082:	f7ff fad1 	bl	8000628 <NRF24_csn>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200000b8 	.word	0x200000b8

08001094 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001096:	b0a1      	sub	sp, #132	; 0x84
 8001098:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800109a:	f107 0308 	add.w	r3, r7, #8
 800109e:	49c3      	ldr	r1, [pc, #780]	; (80013ac <printRadioSettings+0x318>)
 80010a0:	4618      	mov	r0, r3
 80010a2:	f003 fa33 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff f8ba 	bl	8000224 <strlen>
 80010b0:	4603      	mov	r3, r0
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	f107 0108 	add.w	r1, r7, #8
 80010b8:	230a      	movs	r3, #10
 80010ba:	48bd      	ldr	r0, [pc, #756]	; (80013b0 <printRadioSettings+0x31c>)
 80010bc:	f002 fe71 	bl	8003da2 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff faf1 	bl	80006a8 <NRF24_read_register>
 80010c6:	4603      	mov	r3, r0
 80010c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80010cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d013      	beq.n	8001100 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80010d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d006      	beq.n	80010f2 <printRadioSettings+0x5e>
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	49b2      	ldr	r1, [pc, #712]	; (80013b4 <printRadioSettings+0x320>)
 80010ea:	4618      	mov	r0, r3
 80010ec:	f003 fa0e 	bl	800450c <siprintf>
 80010f0:	e00c      	b.n	800110c <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	49b0      	ldr	r1, [pc, #704]	; (80013b8 <printRadioSettings+0x324>)
 80010f8:	4618      	mov	r0, r3
 80010fa:	f003 fa07 	bl	800450c <siprintf>
 80010fe:	e005      	b.n	800110c <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	49ad      	ldr	r1, [pc, #692]	; (80013bc <printRadioSettings+0x328>)
 8001106:	4618      	mov	r0, r3
 8001108:	f003 fa00 	bl	800450c <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff f887 	bl	8000224 <strlen>
 8001116:	4603      	mov	r3, r0
 8001118:	b29a      	uxth	r2, r3
 800111a:	f107 0108 	add.w	r1, r7, #8
 800111e:	230a      	movs	r3, #10
 8001120:	48a3      	ldr	r0, [pc, #652]	; (80013b0 <printRadioSettings+0x31c>)
 8001122:	f002 fe3e 	bl	8003da2 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001126:	2001      	movs	r0, #1
 8001128:	f7ff fabe 	bl	80006a8 <NRF24_read_register>
 800112c:	4603      	mov	r3, r0
 800112e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001132:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001136:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800113a:	2b00      	cmp	r3, #0
 800113c:	bfcc      	ite	gt
 800113e:	2301      	movgt	r3, #1
 8001140:	2300      	movle	r3, #0
 8001142:	b2db      	uxtb	r3, r3
 8001144:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001146:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800114a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800114e:	2b00      	cmp	r3, #0
 8001150:	bfcc      	ite	gt
 8001152:	2301      	movgt	r3, #1
 8001154:	2300      	movle	r3, #0
 8001156:	b2db      	uxtb	r3, r3
 8001158:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800115a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800115e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001162:	2b00      	cmp	r3, #0
 8001164:	bfcc      	ite	gt
 8001166:	2301      	movgt	r3, #1
 8001168:	2300      	movle	r3, #0
 800116a:	b2db      	uxtb	r3, r3
 800116c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800116e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001172:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001176:	2b00      	cmp	r3, #0
 8001178:	bfcc      	ite	gt
 800117a:	2301      	movgt	r3, #1
 800117c:	2300      	movle	r3, #0
 800117e:	b2db      	uxtb	r3, r3
 8001180:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001182:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001186:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800118a:	2b00      	cmp	r3, #0
 800118c:	bfcc      	ite	gt
 800118e:	2301      	movgt	r3, #1
 8001190:	2300      	movle	r3, #0
 8001192:	b2db      	uxtb	r3, r3
 8001194:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001196:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800119a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800119e:	2b00      	cmp	r3, #0
 80011a0:	bfcc      	ite	gt
 80011a2:	2301      	movgt	r3, #1
 80011a4:	2300      	movle	r3, #0
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	f107 0008 	add.w	r0, r7, #8
 80011ac:	9303      	str	r3, [sp, #12]
 80011ae:	9402      	str	r4, [sp, #8]
 80011b0:	9101      	str	r1, [sp, #4]
 80011b2:	9200      	str	r2, [sp, #0]
 80011b4:	4633      	mov	r3, r6
 80011b6:	462a      	mov	r2, r5
 80011b8:	4981      	ldr	r1, [pc, #516]	; (80013c0 <printRadioSettings+0x32c>)
 80011ba:	f003 f9a7 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f82e 	bl	8000224 <strlen>
 80011c8:	4603      	mov	r3, r0
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	f107 0108 	add.w	r1, r7, #8
 80011d0:	230a      	movs	r3, #10
 80011d2:	4877      	ldr	r0, [pc, #476]	; (80013b0 <printRadioSettings+0x31c>)
 80011d4:	f002 fde5 	bl	8003da2 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80011d8:	2002      	movs	r0, #2
 80011da:	f7ff fa65 	bl	80006a8 <NRF24_read_register>
 80011de:	4603      	mov	r3, r0
 80011e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011e8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	bfcc      	ite	gt
 80011f0:	2301      	movgt	r3, #1
 80011f2:	2300      	movle	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011fc:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001200:	2b00      	cmp	r3, #0
 8001202:	bfcc      	ite	gt
 8001204:	2301      	movgt	r3, #1
 8001206:	2300      	movle	r3, #0
 8001208:	b2db      	uxtb	r3, r3
 800120a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800120c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001210:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001214:	2b00      	cmp	r3, #0
 8001216:	bfcc      	ite	gt
 8001218:	2301      	movgt	r3, #1
 800121a:	2300      	movle	r3, #0
 800121c:	b2db      	uxtb	r3, r3
 800121e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001220:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001224:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001228:	2b00      	cmp	r3, #0
 800122a:	bfcc      	ite	gt
 800122c:	2301      	movgt	r3, #1
 800122e:	2300      	movle	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001234:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001238:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800123c:	2b00      	cmp	r3, #0
 800123e:	bfcc      	ite	gt
 8001240:	2301      	movgt	r3, #1
 8001242:	2300      	movle	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001248:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800124c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001250:	2b00      	cmp	r3, #0
 8001252:	bfcc      	ite	gt
 8001254:	2301      	movgt	r3, #1
 8001256:	2300      	movle	r3, #0
 8001258:	b2db      	uxtb	r3, r3
 800125a:	f107 0008 	add.w	r0, r7, #8
 800125e:	9303      	str	r3, [sp, #12]
 8001260:	9402      	str	r4, [sp, #8]
 8001262:	9101      	str	r1, [sp, #4]
 8001264:	9200      	str	r2, [sp, #0]
 8001266:	4633      	mov	r3, r6
 8001268:	462a      	mov	r2, r5
 800126a:	4956      	ldr	r1, [pc, #344]	; (80013c4 <printRadioSettings+0x330>)
 800126c:	f003 f94e 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001270:	f107 0308 	add.w	r3, r7, #8
 8001274:	4618      	mov	r0, r3
 8001276:	f7fe ffd5 	bl	8000224 <strlen>
 800127a:	4603      	mov	r3, r0
 800127c:	b29a      	uxth	r2, r3
 800127e:	f107 0108 	add.w	r1, r7, #8
 8001282:	230a      	movs	r3, #10
 8001284:	484a      	ldr	r0, [pc, #296]	; (80013b0 <printRadioSettings+0x31c>)
 8001286:	f002 fd8c 	bl	8003da2 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800128a:	2003      	movs	r0, #3
 800128c:	f7ff fa0c 	bl	80006a8 <NRF24_read_register>
 8001290:	4603      	mov	r3, r0
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 800129a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800129e:	3302      	adds	r3, #2
 80012a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80012a4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	4946      	ldr	r1, [pc, #280]	; (80013c8 <printRadioSettings+0x334>)
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 f92c 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012b4:	f107 0308 	add.w	r3, r7, #8
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7fe ffb3 	bl	8000224 <strlen>
 80012be:	4603      	mov	r3, r0
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	f107 0108 	add.w	r1, r7, #8
 80012c6:	230a      	movs	r3, #10
 80012c8:	4839      	ldr	r0, [pc, #228]	; (80013b0 <printRadioSettings+0x31c>)
 80012ca:	f002 fd6a 	bl	8003da2 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80012ce:	2005      	movs	r0, #5
 80012d0:	f7ff f9ea 	bl	80006a8 <NRF24_read_register>
 80012d4:	4603      	mov	r3, r0
 80012d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80012da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	4939      	ldr	r1, [pc, #228]	; (80013cc <printRadioSettings+0x338>)
 80012e8:	4618      	mov	r0, r3
 80012ea:	f003 f90f 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012ee:	f107 0308 	add.w	r3, r7, #8
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7fe ff96 	bl	8000224 <strlen>
 80012f8:	4603      	mov	r3, r0
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	f107 0108 	add.w	r1, r7, #8
 8001300:	230a      	movs	r3, #10
 8001302:	482b      	ldr	r0, [pc, #172]	; (80013b0 <printRadioSettings+0x31c>)
 8001304:	f002 fd4d 	bl	8003da2 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001308:	2006      	movs	r0, #6
 800130a:	f7ff f9cd 	bl	80006a8 <NRF24_read_register>
 800130e:	4603      	mov	r3, r0
 8001310:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001314:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001318:	f003 0308 	and.w	r3, r3, #8
 800131c:	2b00      	cmp	r3, #0
 800131e:	d006      	beq.n	800132e <printRadioSettings+0x29a>
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	492a      	ldr	r1, [pc, #168]	; (80013d0 <printRadioSettings+0x33c>)
 8001326:	4618      	mov	r0, r3
 8001328:	f003 f8f0 	bl	800450c <siprintf>
 800132c:	e005      	b.n	800133a <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4928      	ldr	r1, [pc, #160]	; (80013d4 <printRadioSettings+0x340>)
 8001334:	4618      	mov	r0, r3
 8001336:	f003 f8e9 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	4618      	mov	r0, r3
 8001340:	f7fe ff70 	bl	8000224 <strlen>
 8001344:	4603      	mov	r3, r0
 8001346:	b29a      	uxth	r2, r3
 8001348:	f107 0108 	add.w	r1, r7, #8
 800134c:	230a      	movs	r3, #10
 800134e:	4818      	ldr	r0, [pc, #96]	; (80013b0 <printRadioSettings+0x31c>)
 8001350:	f002 fd27 	bl	8003da2 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001354:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001358:	f003 0306 	and.w	r3, r3, #6
 800135c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001360:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001364:	085b      	lsrs	r3, r3, #1
 8001366:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800136a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800136e:	2b00      	cmp	r3, #0
 8001370:	d106      	bne.n	8001380 <printRadioSettings+0x2ec>
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	4918      	ldr	r1, [pc, #96]	; (80013d8 <printRadioSettings+0x344>)
 8001378:	4618      	mov	r0, r3
 800137a:	f003 f8c7 	bl	800450c <siprintf>
 800137e:	e03b      	b.n	80013f8 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001380:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001384:	2b01      	cmp	r3, #1
 8001386:	d106      	bne.n	8001396 <printRadioSettings+0x302>
 8001388:	f107 0308 	add.w	r3, r7, #8
 800138c:	4913      	ldr	r1, [pc, #76]	; (80013dc <printRadioSettings+0x348>)
 800138e:	4618      	mov	r0, r3
 8001390:	f003 f8bc 	bl	800450c <siprintf>
 8001394:	e030      	b.n	80013f8 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001396:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800139a:	2b02      	cmp	r3, #2
 800139c:	d122      	bne.n	80013e4 <printRadioSettings+0x350>
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	490f      	ldr	r1, [pc, #60]	; (80013e0 <printRadioSettings+0x34c>)
 80013a4:	4618      	mov	r0, r3
 80013a6:	f003 f8b1 	bl	800450c <siprintf>
 80013aa:	e025      	b.n	80013f8 <printRadioSettings+0x364>
 80013ac:	08004de4 	.word	0x08004de4
 80013b0:	20000110 	.word	0x20000110
 80013b4:	08004e18 	.word	0x08004e18
 80013b8:	08004e34 	.word	0x08004e34
 80013bc:	08004e50 	.word	0x08004e50
 80013c0:	08004e64 	.word	0x08004e64
 80013c4:	08004ea8 	.word	0x08004ea8
 80013c8:	08004ef4 	.word	0x08004ef4
 80013cc:	08004f10 	.word	0x08004f10
 80013d0:	08004f24 	.word	0x08004f24
 80013d4:	08004f3c 	.word	0x08004f3c
 80013d8:	08004f54 	.word	0x08004f54
 80013dc:	08004f68 	.word	0x08004f68
 80013e0:	08004f7c 	.word	0x08004f7c
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80013e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d105      	bne.n	80013f8 <printRadioSettings+0x364>
 80013ec:	f107 0308 	add.w	r3, r7, #8
 80013f0:	49d7      	ldr	r1, [pc, #860]	; (8001750 <printRadioSettings+0x6bc>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 f88a 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013f8:	f107 0308 	add.w	r3, r7, #8
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7fe ff11 	bl	8000224 <strlen>
 8001402:	4603      	mov	r3, r0
 8001404:	b29a      	uxth	r2, r3
 8001406:	f107 0108 	add.w	r1, r7, #8
 800140a:	230a      	movs	r3, #10
 800140c:	48d1      	ldr	r0, [pc, #836]	; (8001754 <printRadioSettings+0x6c0>)
 800140e:	f002 fcc8 	bl	8003da2 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001412:	463b      	mov	r3, r7
 8001414:	2205      	movs	r2, #5
 8001416:	4619      	mov	r1, r3
 8001418:	200a      	movs	r0, #10
 800141a:	f7ff f96d 	bl	80006f8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800141e:	793b      	ldrb	r3, [r7, #4]
 8001420:	461c      	mov	r4, r3
 8001422:	78fb      	ldrb	r3, [r7, #3]
 8001424:	461d      	mov	r5, r3
 8001426:	78bb      	ldrb	r3, [r7, #2]
 8001428:	787a      	ldrb	r2, [r7, #1]
 800142a:	7839      	ldrb	r1, [r7, #0]
 800142c:	f107 0008 	add.w	r0, r7, #8
 8001430:	9102      	str	r1, [sp, #8]
 8001432:	9201      	str	r2, [sp, #4]
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	462b      	mov	r3, r5
 8001438:	4622      	mov	r2, r4
 800143a:	49c7      	ldr	r1, [pc, #796]	; (8001758 <printRadioSettings+0x6c4>)
 800143c:	f003 f866 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001440:	f107 0308 	add.w	r3, r7, #8
 8001444:	4618      	mov	r0, r3
 8001446:	f7fe feed 	bl	8000224 <strlen>
 800144a:	4603      	mov	r3, r0
 800144c:	b29a      	uxth	r2, r3
 800144e:	f107 0108 	add.w	r1, r7, #8
 8001452:	230a      	movs	r3, #10
 8001454:	48bf      	ldr	r0, [pc, #764]	; (8001754 <printRadioSettings+0x6c0>)
 8001456:	f002 fca4 	bl	8003da2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800145a:	463b      	mov	r3, r7
 800145c:	2205      	movs	r2, #5
 800145e:	4619      	mov	r1, r3
 8001460:	200b      	movs	r0, #11
 8001462:	f7ff f949 	bl	80006f8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001466:	793b      	ldrb	r3, [r7, #4]
 8001468:	461c      	mov	r4, r3
 800146a:	78fb      	ldrb	r3, [r7, #3]
 800146c:	461d      	mov	r5, r3
 800146e:	78bb      	ldrb	r3, [r7, #2]
 8001470:	787a      	ldrb	r2, [r7, #1]
 8001472:	7839      	ldrb	r1, [r7, #0]
 8001474:	f107 0008 	add.w	r0, r7, #8
 8001478:	9102      	str	r1, [sp, #8]
 800147a:	9201      	str	r2, [sp, #4]
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	462b      	mov	r3, r5
 8001480:	4622      	mov	r2, r4
 8001482:	49b6      	ldr	r1, [pc, #728]	; (800175c <printRadioSettings+0x6c8>)
 8001484:	f003 f842 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	4618      	mov	r0, r3
 800148e:	f7fe fec9 	bl	8000224 <strlen>
 8001492:	4603      	mov	r3, r0
 8001494:	b29a      	uxth	r2, r3
 8001496:	f107 0108 	add.w	r1, r7, #8
 800149a:	230a      	movs	r3, #10
 800149c:	48ad      	ldr	r0, [pc, #692]	; (8001754 <printRadioSettings+0x6c0>)
 800149e:	f002 fc80 	bl	8003da2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80014a2:	463b      	mov	r3, r7
 80014a4:	2201      	movs	r2, #1
 80014a6:	4619      	mov	r1, r3
 80014a8:	200c      	movs	r0, #12
 80014aa:	f7ff f925 	bl	80006f8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014ae:	783b      	ldrb	r3, [r7, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	49aa      	ldr	r1, [pc, #680]	; (8001760 <printRadioSettings+0x6cc>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f003 f827 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe feae 	bl	8000224 <strlen>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	f107 0108 	add.w	r1, r7, #8
 80014d0:	230a      	movs	r3, #10
 80014d2:	48a0      	ldr	r0, [pc, #640]	; (8001754 <printRadioSettings+0x6c0>)
 80014d4:	f002 fc65 	bl	8003da2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80014d8:	463b      	mov	r3, r7
 80014da:	2201      	movs	r2, #1
 80014dc:	4619      	mov	r1, r3
 80014de:	200d      	movs	r0, #13
 80014e0:	f7ff f90a 	bl	80006f8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014e4:	783b      	ldrb	r3, [r7, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	499d      	ldr	r1, [pc, #628]	; (8001764 <printRadioSettings+0x6d0>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	f003 f80c 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014f4:	f107 0308 	add.w	r3, r7, #8
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7fe fe93 	bl	8000224 <strlen>
 80014fe:	4603      	mov	r3, r0
 8001500:	b29a      	uxth	r2, r3
 8001502:	f107 0108 	add.w	r1, r7, #8
 8001506:	230a      	movs	r3, #10
 8001508:	4892      	ldr	r0, [pc, #584]	; (8001754 <printRadioSettings+0x6c0>)
 800150a:	f002 fc4a 	bl	8003da2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800150e:	463b      	mov	r3, r7
 8001510:	2201      	movs	r2, #1
 8001512:	4619      	mov	r1, r3
 8001514:	200e      	movs	r0, #14
 8001516:	f7ff f8ef 	bl	80006f8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800151a:	783b      	ldrb	r3, [r7, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	4991      	ldr	r1, [pc, #580]	; (8001768 <printRadioSettings+0x6d4>)
 8001524:	4618      	mov	r0, r3
 8001526:	f002 fff1 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	4618      	mov	r0, r3
 8001530:	f7fe fe78 	bl	8000224 <strlen>
 8001534:	4603      	mov	r3, r0
 8001536:	b29a      	uxth	r2, r3
 8001538:	f107 0108 	add.w	r1, r7, #8
 800153c:	230a      	movs	r3, #10
 800153e:	4885      	ldr	r0, [pc, #532]	; (8001754 <printRadioSettings+0x6c0>)
 8001540:	f002 fc2f 	bl	8003da2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001544:	463b      	mov	r3, r7
 8001546:	2201      	movs	r2, #1
 8001548:	4619      	mov	r1, r3
 800154a:	200f      	movs	r0, #15
 800154c:	f7ff f8d4 	bl	80006f8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001550:	783b      	ldrb	r3, [r7, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	f107 0308 	add.w	r3, r7, #8
 8001558:	4984      	ldr	r1, [pc, #528]	; (800176c <printRadioSettings+0x6d8>)
 800155a:	4618      	mov	r0, r3
 800155c:	f002 ffd6 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe fe5d 	bl	8000224 <strlen>
 800156a:	4603      	mov	r3, r0
 800156c:	b29a      	uxth	r2, r3
 800156e:	f107 0108 	add.w	r1, r7, #8
 8001572:	230a      	movs	r3, #10
 8001574:	4877      	ldr	r0, [pc, #476]	; (8001754 <printRadioSettings+0x6c0>)
 8001576:	f002 fc14 	bl	8003da2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800157a:	463b      	mov	r3, r7
 800157c:	2205      	movs	r2, #5
 800157e:	4619      	mov	r1, r3
 8001580:	2010      	movs	r0, #16
 8001582:	f7ff f8b9 	bl	80006f8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001586:	793b      	ldrb	r3, [r7, #4]
 8001588:	461c      	mov	r4, r3
 800158a:	78fb      	ldrb	r3, [r7, #3]
 800158c:	461d      	mov	r5, r3
 800158e:	78bb      	ldrb	r3, [r7, #2]
 8001590:	787a      	ldrb	r2, [r7, #1]
 8001592:	7839      	ldrb	r1, [r7, #0]
 8001594:	f107 0008 	add.w	r0, r7, #8
 8001598:	9102      	str	r1, [sp, #8]
 800159a:	9201      	str	r2, [sp, #4]
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	462b      	mov	r3, r5
 80015a0:	4622      	mov	r2, r4
 80015a2:	4973      	ldr	r1, [pc, #460]	; (8001770 <printRadioSettings+0x6dc>)
 80015a4:	f002 ffb2 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015a8:	f107 0308 	add.w	r3, r7, #8
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe fe39 	bl	8000224 <strlen>
 80015b2:	4603      	mov	r3, r0
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	f107 0108 	add.w	r1, r7, #8
 80015ba:	230a      	movs	r3, #10
 80015bc:	4865      	ldr	r0, [pc, #404]	; (8001754 <printRadioSettings+0x6c0>)
 80015be:	f002 fbf0 	bl	8003da2 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80015c2:	2011      	movs	r0, #17
 80015c4:	f7ff f870 	bl	80006a8 <NRF24_read_register>
 80015c8:	4603      	mov	r3, r0
 80015ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80015ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	4966      	ldr	r1, [pc, #408]	; (8001774 <printRadioSettings+0x6e0>)
 80015dc:	4618      	mov	r0, r3
 80015de:	f002 ff95 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe fe1c 	bl	8000224 <strlen>
 80015ec:	4603      	mov	r3, r0
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	f107 0108 	add.w	r1, r7, #8
 80015f4:	230a      	movs	r3, #10
 80015f6:	4857      	ldr	r0, [pc, #348]	; (8001754 <printRadioSettings+0x6c0>)
 80015f8:	f002 fbd3 	bl	8003da2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 80015fc:	2012      	movs	r0, #18
 80015fe:	f7ff f853 	bl	80006a8 <NRF24_read_register>
 8001602:	4603      	mov	r3, r0
 8001604:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001608:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800160c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001610:	f107 0308 	add.w	r3, r7, #8
 8001614:	4958      	ldr	r1, [pc, #352]	; (8001778 <printRadioSettings+0x6e4>)
 8001616:	4618      	mov	r0, r3
 8001618:	f002 ff78 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800161c:	f107 0308 	add.w	r3, r7, #8
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe fdff 	bl	8000224 <strlen>
 8001626:	4603      	mov	r3, r0
 8001628:	b29a      	uxth	r2, r3
 800162a:	f107 0108 	add.w	r1, r7, #8
 800162e:	230a      	movs	r3, #10
 8001630:	4848      	ldr	r0, [pc, #288]	; (8001754 <printRadioSettings+0x6c0>)
 8001632:	f002 fbb6 	bl	8003da2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001636:	2013      	movs	r0, #19
 8001638:	f7ff f836 	bl	80006a8 <NRF24_read_register>
 800163c:	4603      	mov	r3, r0
 800163e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001642:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001646:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	494b      	ldr	r1, [pc, #300]	; (800177c <printRadioSettings+0x6e8>)
 8001650:	4618      	mov	r0, r3
 8001652:	f002 ff5b 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001656:	f107 0308 	add.w	r3, r7, #8
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe fde2 	bl	8000224 <strlen>
 8001660:	4603      	mov	r3, r0
 8001662:	b29a      	uxth	r2, r3
 8001664:	f107 0108 	add.w	r1, r7, #8
 8001668:	230a      	movs	r3, #10
 800166a:	483a      	ldr	r0, [pc, #232]	; (8001754 <printRadioSettings+0x6c0>)
 800166c:	f002 fb99 	bl	8003da2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001670:	2014      	movs	r0, #20
 8001672:	f7ff f819 	bl	80006a8 <NRF24_read_register>
 8001676:	4603      	mov	r3, r0
 8001678:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800167c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001680:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	493d      	ldr	r1, [pc, #244]	; (8001780 <printRadioSettings+0x6ec>)
 800168a:	4618      	mov	r0, r3
 800168c:	f002 ff3e 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001690:	f107 0308 	add.w	r3, r7, #8
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe fdc5 	bl	8000224 <strlen>
 800169a:	4603      	mov	r3, r0
 800169c:	b29a      	uxth	r2, r3
 800169e:	f107 0108 	add.w	r1, r7, #8
 80016a2:	230a      	movs	r3, #10
 80016a4:	482b      	ldr	r0, [pc, #172]	; (8001754 <printRadioSettings+0x6c0>)
 80016a6:	f002 fb7c 	bl	8003da2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 80016aa:	2015      	movs	r0, #21
 80016ac:	f7fe fffc 	bl	80006a8 <NRF24_read_register>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016be:	f107 0308 	add.w	r3, r7, #8
 80016c2:	4930      	ldr	r1, [pc, #192]	; (8001784 <printRadioSettings+0x6f0>)
 80016c4:	4618      	mov	r0, r3
 80016c6:	f002 ff21 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016ca:	f107 0308 	add.w	r3, r7, #8
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe fda8 	bl	8000224 <strlen>
 80016d4:	4603      	mov	r3, r0
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	f107 0108 	add.w	r1, r7, #8
 80016dc:	230a      	movs	r3, #10
 80016de:	481d      	ldr	r0, [pc, #116]	; (8001754 <printRadioSettings+0x6c0>)
 80016e0:	f002 fb5f 	bl	8003da2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 80016e4:	2016      	movs	r0, #22
 80016e6:	f7fe ffdf 	bl	80006a8 <NRF24_read_register>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016f8:	f107 0308 	add.w	r3, r7, #8
 80016fc:	4922      	ldr	r1, [pc, #136]	; (8001788 <printRadioSettings+0x6f4>)
 80016fe:	4618      	mov	r0, r3
 8001700:	f002 ff04 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fd8b 	bl	8000224 <strlen>
 800170e:	4603      	mov	r3, r0
 8001710:	b29a      	uxth	r2, r3
 8001712:	f107 0108 	add.w	r1, r7, #8
 8001716:	230a      	movs	r3, #10
 8001718:	480e      	ldr	r0, [pc, #56]	; (8001754 <printRadioSettings+0x6c0>)
 800171a:	f002 fb42 	bl	8003da2 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800171e:	201c      	movs	r0, #28
 8001720:	f7fe ffc2 	bl	80006a8 <NRF24_read_register>
 8001724:	4603      	mov	r3, r0
 8001726:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800172a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800172e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001732:	2b00      	cmp	r3, #0
 8001734:	bfcc      	ite	gt
 8001736:	2301      	movgt	r3, #1
 8001738:	2300      	movle	r3, #0
 800173a:	b2db      	uxtb	r3, r3
 800173c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800173e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001742:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001746:	2b00      	cmp	r3, #0
 8001748:	bfcc      	ite	gt
 800174a:	2301      	movgt	r3, #1
 800174c:	2300      	movle	r3, #0
 800174e:	e01d      	b.n	800178c <printRadioSettings+0x6f8>
 8001750:	08004f90 	.word	0x08004f90
 8001754:	20000110 	.word	0x20000110
 8001758:	08004fa4 	.word	0x08004fa4
 800175c:	08004fd4 	.word	0x08004fd4
 8001760:	08005004 	.word	0x08005004
 8001764:	0800502c 	.word	0x0800502c
 8001768:	08005054 	.word	0x08005054
 800176c:	0800507c 	.word	0x0800507c
 8001770:	080050a4 	.word	0x080050a4
 8001774:	080050d0 	.word	0x080050d0
 8001778:	080050ec 	.word	0x080050ec
 800177c:	08005108 	.word	0x08005108
 8001780:	08005124 	.word	0x08005124
 8001784:	08005140 	.word	0x08005140
 8001788:	0800515c 	.word	0x0800515c
 800178c:	b2db      	uxtb	r3, r3
 800178e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001790:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001794:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001798:	2b00      	cmp	r3, #0
 800179a:	bfcc      	ite	gt
 800179c:	2301      	movgt	r3, #1
 800179e:	2300      	movle	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017a8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	bfcc      	ite	gt
 80017b0:	2301      	movgt	r3, #1
 80017b2:	2300      	movle	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017bc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bfcc      	ite	gt
 80017c4:	2301      	movgt	r3, #1
 80017c6:	2300      	movle	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017d0:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bfcc      	ite	gt
 80017d8:	2301      	movgt	r3, #1
 80017da:	2300      	movle	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f107 0008 	add.w	r0, r7, #8
 80017e2:	9303      	str	r3, [sp, #12]
 80017e4:	9402      	str	r4, [sp, #8]
 80017e6:	9101      	str	r1, [sp, #4]
 80017e8:	9200      	str	r2, [sp, #0]
 80017ea:	4633      	mov	r3, r6
 80017ec:	462a      	mov	r2, r5
 80017ee:	4936      	ldr	r1, [pc, #216]	; (80018c8 <printRadioSettings+0x834>)
 80017f0:	f002 fe8c 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017f4:	f107 0308 	add.w	r3, r7, #8
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fd13 	bl	8000224 <strlen>
 80017fe:	4603      	mov	r3, r0
 8001800:	b29a      	uxth	r2, r3
 8001802:	f107 0108 	add.w	r1, r7, #8
 8001806:	230a      	movs	r3, #10
 8001808:	4830      	ldr	r0, [pc, #192]	; (80018cc <printRadioSettings+0x838>)
 800180a:	f002 faca 	bl	8003da2 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800180e:	201d      	movs	r0, #29
 8001810:	f7fe ff4a 	bl	80006a8 <NRF24_read_register>
 8001814:	4603      	mov	r3, r0
 8001816:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800181a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	2b00      	cmp	r3, #0
 8001824:	d006      	beq.n	8001834 <printRadioSettings+0x7a0>
 8001826:	f107 0308 	add.w	r3, r7, #8
 800182a:	4929      	ldr	r1, [pc, #164]	; (80018d0 <printRadioSettings+0x83c>)
 800182c:	4618      	mov	r0, r3
 800182e:	f002 fe6d 	bl	800450c <siprintf>
 8001832:	e005      	b.n	8001840 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	4926      	ldr	r1, [pc, #152]	; (80018d4 <printRadioSettings+0x840>)
 800183a:	4618      	mov	r0, r3
 800183c:	f002 fe66 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fced 	bl	8000224 <strlen>
 800184a:	4603      	mov	r3, r0
 800184c:	b29a      	uxth	r2, r3
 800184e:	f107 0108 	add.w	r1, r7, #8
 8001852:	230a      	movs	r3, #10
 8001854:	481d      	ldr	r0, [pc, #116]	; (80018cc <printRadioSettings+0x838>)
 8001856:	f002 faa4 	bl	8003da2 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800185a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <printRadioSettings+0x7e0>
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	491b      	ldr	r1, [pc, #108]	; (80018d8 <printRadioSettings+0x844>)
 800186c:	4618      	mov	r0, r3
 800186e:	f002 fe4d 	bl	800450c <siprintf>
 8001872:	e005      	b.n	8001880 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	4918      	ldr	r1, [pc, #96]	; (80018dc <printRadioSettings+0x848>)
 800187a:	4618      	mov	r0, r3
 800187c:	f002 fe46 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fccd 	bl	8000224 <strlen>
 800188a:	4603      	mov	r3, r0
 800188c:	b29a      	uxth	r2, r3
 800188e:	f107 0108 	add.w	r1, r7, #8
 8001892:	230a      	movs	r3, #10
 8001894:	480d      	ldr	r0, [pc, #52]	; (80018cc <printRadioSettings+0x838>)
 8001896:	f002 fa84 	bl	8003da2 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800189a:	f107 0308 	add.w	r3, r7, #8
 800189e:	4910      	ldr	r1, [pc, #64]	; (80018e0 <printRadioSettings+0x84c>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f002 fe33 	bl	800450c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fcba 	bl	8000224 <strlen>
 80018b0:	4603      	mov	r3, r0
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	f107 0108 	add.w	r1, r7, #8
 80018b8:	230a      	movs	r3, #10
 80018ba:	4804      	ldr	r0, [pc, #16]	; (80018cc <printRadioSettings+0x838>)
 80018bc:	f002 fa71 	bl	8003da2 <HAL_UART_Transmit>
}
 80018c0:	bf00      	nop
 80018c2:	3774      	adds	r7, #116	; 0x74
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c8:	08005178 	.word	0x08005178
 80018cc:	20000110 	.word	0x20000110
 80018d0:	080051c4 	.word	0x080051c4
 80018d4:	080051dc 	.word	0x080051dc
 80018d8:	080051f4 	.word	0x080051f4
 80018dc:	08005210 	.word	0x08005210
 80018e0:	08004de4 	.word	0x08004de4

080018e4 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80018e4:	b084      	sub	sp, #16
 80018e6:	b580      	push	{r7, lr}
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	f107 0c08 	add.w	ip, r7, #8
 80018ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <nrf24_DebugUART_Init+0x2c>)
 80018f4:	4618      	mov	r0, r3
 80018f6:	f107 0308 	add.w	r3, r7, #8
 80018fa:	2244      	movs	r2, #68	; 0x44
 80018fc:	4619      	mov	r1, r3
 80018fe:	f002 fdef 	bl	80044e0 <memcpy>
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800190a:	b004      	add	sp, #16
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000110 	.word	0x20000110

08001914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001918:	f000 fc6e 	bl	80021f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800191c:	f000 f82c 	bl	8001978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001920:	f000 f8f6 	bl	8001b10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001924:	f000 f8ca 	bl	8001abc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001928:	f000 f892 	bl	8001a50 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	NRF_init_as_node(); //init NRF
 800192c:	f000 f984 	bl	8001c38 <NRF_init_as_node>
	//set hooter light and alarm low
	alarm_light_and_hooter(0);
 8001930:	2000      	movs	r0, #0
 8001932:	f000 fad3 	bl	8001edc <alarm_light_and_hooter>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (!HAL_GPIO_ReadPin(BTN_pin_GPIO_Port, BTN_pin_Pin)) {
 8001936:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800193a:	480d      	ldr	r0, [pc, #52]	; (8001970 <main+0x5c>)
 800193c:	f000 ff4c 	bl	80027d8 <HAL_GPIO_ReadPin>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10a      	bne.n	800195c <main+0x48>
			alarm_light_and_hooter(1);
 8001946:	2001      	movs	r0, #1
 8001948:	f000 fac8 	bl	8001edc <alarm_light_and_hooter>
			Transmit_Update();
 800194c:	f000 f9b6 	bl	8001cbc <Transmit_Update>
			Switch_to_Receiver_mode();
 8001950:	f000 f9f2 	bl	8001d38 <Switch_to_Receiver_mode>
			untill_alarm_reset(); //wait unitill either stopped by server or from input push button
 8001954:	f000 fa0e 	bl	8001d74 <untill_alarm_reset>
			Switch_to_Transmitt_mode();
 8001958:	f000 fa9e 	bl	8001e98 <Switch_to_Transmitt_mode>
		}

		HAL_GPIO_TogglePin(LED_pin_GPIO_Port, LED_pin_Pin);
 800195c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001960:	4804      	ldr	r0, [pc, #16]	; (8001974 <main+0x60>)
 8001962:	f000 ff6a 	bl	800283a <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 8001966:	2032      	movs	r0, #50	; 0x32
 8001968:	f000 fcb8 	bl	80022dc <HAL_Delay>
		if (!HAL_GPIO_ReadPin(BTN_pin_GPIO_Port, BTN_pin_Pin)) {
 800196c:	e7e3      	b.n	8001936 <main+0x22>
 800196e:	bf00      	nop
 8001970:	40020800 	.word	0x40020800
 8001974:	40020000 	.word	0x40020000

08001978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b094      	sub	sp, #80	; 0x50
 800197c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197e:	f107 031c 	add.w	r3, r7, #28
 8001982:	2234      	movs	r2, #52	; 0x34
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f002 fdb8 	bl	80044fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800198c:	f107 0308 	add.w	r3, r7, #8
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800199c:	2300      	movs	r3, #0
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <SystemClock_Config+0xd0>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	4a28      	ldr	r2, [pc, #160]	; (8001a48 <SystemClock_Config+0xd0>)
 80019a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019aa:	6413      	str	r3, [r2, #64]	; 0x40
 80019ac:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <SystemClock_Config+0xd0>)
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b8:	2300      	movs	r3, #0
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <SystemClock_Config+0xd4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a22      	ldr	r2, [pc, #136]	; (8001a4c <SystemClock_Config+0xd4>)
 80019c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <SystemClock_Config+0xd4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019d4:	2302      	movs	r3, #2
 80019d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d8:	2301      	movs	r3, #1
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019dc:	2310      	movs	r3, #16
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e0:	2302      	movs	r3, #2
 80019e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019e4:	2300      	movs	r3, #0
 80019e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80019e8:	2310      	movs	r3, #16
 80019ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80019ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80019f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019f2:	2304      	movs	r3, #4
 80019f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019f6:	2304      	movs	r3, #4
 80019f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019fa:	2302      	movs	r3, #2
 80019fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	4618      	mov	r0, r3
 8001a04:	f001 f954 	bl	8002cb0 <HAL_RCC_OscConfig>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a0e:	f000 fa8f 	bl	8001f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a12:	230f      	movs	r3, #15
 8001a14:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a16:	2302      	movs	r3, #2
 8001a18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a28:	f107 0308 	add.w	r3, r7, #8
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 ff1e 	bl	8002870 <HAL_RCC_ClockConfig>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001a3a:	f000 fa79 	bl	8001f30 <Error_Handler>
  }
}
 8001a3e:	bf00      	nop
 8001a40:	3750      	adds	r7, #80	; 0x50
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40007000 	.word	0x40007000

08001a50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a54:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a56:	4a18      	ldr	r2, [pc, #96]	; (8001ab8 <MX_SPI1_Init+0x68>)
 8001a58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a5a:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a84:	2218      	movs	r2, #24
 8001a86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 15;
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001aa2:	f001 fb89 	bl	80031b8 <HAL_SPI_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001aac:	f000 fa40 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000154 	.word	0x20000154
 8001ab8:	40013000 	.word	0x40013000

08001abc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001ac2:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <MX_USART2_UART_Init+0x50>)
 8001ac4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001ac8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001acc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ada:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001af2:	4805      	ldr	r0, [pc, #20]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001af4:	f002 f908 	bl	8003d08 <HAL_UART_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001afe:	f000 fa17 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200001ac 	.word	0x200001ac
 8001b0c:	40004400 	.word	0x40004400

08001b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	; 0x28
 8001b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	60da      	str	r2, [r3, #12]
 8001b24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	4b3f      	ldr	r3, [pc, #252]	; (8001c28 <MX_GPIO_Init+0x118>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a3e      	ldr	r2, [pc, #248]	; (8001c28 <MX_GPIO_Init+0x118>)
 8001b30:	f043 0304 	orr.w	r3, r3, #4
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b3c      	ldr	r3, [pc, #240]	; (8001c28 <MX_GPIO_Init+0x118>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b38      	ldr	r3, [pc, #224]	; (8001c28 <MX_GPIO_Init+0x118>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a37      	ldr	r2, [pc, #220]	; (8001c28 <MX_GPIO_Init+0x118>)
 8001b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b35      	ldr	r3, [pc, #212]	; (8001c28 <MX_GPIO_Init+0x118>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	4b31      	ldr	r3, [pc, #196]	; (8001c28 <MX_GPIO_Init+0x118>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a30      	ldr	r2, [pc, #192]	; (8001c28 <MX_GPIO_Init+0x118>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b2e      	ldr	r3, [pc, #184]	; (8001c28 <MX_GPIO_Init+0x118>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	; (8001c28 <MX_GPIO_Init+0x118>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a29      	ldr	r2, [pc, #164]	; (8001c28 <MX_GPIO_Init+0x118>)
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <MX_GPIO_Init+0x118>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_pin_GPIO_Port, LED_pin_Pin, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b9c:	4823      	ldr	r0, [pc, #140]	; (8001c2c <MX_GPIO_Init+0x11c>)
 8001b9e:	f000 fe33 	bl	8002808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ALARM_HOOTER_pin_Pin|ALARM_LED_pin_Pin|CSN_pin_Pin|CE_pin_Pin, GPIO_PIN_RESET);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f44f 714c 	mov.w	r1, #816	; 0x330
 8001ba8:	4821      	ldr	r0, [pc, #132]	; (8001c30 <MX_GPIO_Init+0x120>)
 8001baa:	f000 fe2d 	bl	8002808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_pin_Pin */
  GPIO_InitStruct.Pin = BTN_pin_Pin;
 8001bae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_pin_GPIO_Port, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	481c      	ldr	r0, [pc, #112]	; (8001c34 <MX_GPIO_Init+0x124>)
 8001bc4:	f000 fc94 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MANUAL_STOP_ALARM_pin_Pin */
  GPIO_InitStruct.Pin = MANUAL_STOP_ALARM_pin_Pin;
 8001bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MANUAL_STOP_ALARM_pin_GPIO_Port, &GPIO_InitStruct);
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4814      	ldr	r0, [pc, #80]	; (8001c30 <MX_GPIO_Init+0x120>)
 8001bde:	f000 fc87 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_pin_Pin */
  GPIO_InitStruct.Pin = LED_pin_Pin;
 8001be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be8:	2301      	movs	r3, #1
 8001bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_pin_GPIO_Port, &GPIO_InitStruct);
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	480c      	ldr	r0, [pc, #48]	; (8001c2c <MX_GPIO_Init+0x11c>)
 8001bfc:	f000 fc78 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ALARM_HOOTER_pin_Pin ALARM_LED_pin_Pin CSN_pin_Pin CE_pin_Pin */
  GPIO_InitStruct.Pin = ALARM_HOOTER_pin_Pin|ALARM_LED_pin_Pin|CSN_pin_Pin|CE_pin_Pin;
 8001c00:	f44f 734c 	mov.w	r3, #816	; 0x330
 8001c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c06:	2301      	movs	r3, #1
 8001c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4619      	mov	r1, r3
 8001c18:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_GPIO_Init+0x120>)
 8001c1a:	f000 fc69 	bl	80024f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c1e:	bf00      	nop
 8001c20:	3728      	adds	r7, #40	; 0x28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40020000 	.word	0x40020000
 8001c30:	40020400 	.word	0x40020400
 8001c34:	40020800 	.word	0x40020800

08001c38 <NRF_init_as_node>:

/* USER CODE BEGIN 4 */
void NRF_init_as_node(void) {
 8001c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c3a:	b097      	sub	sp, #92	; 0x5c
 8001c3c:	af16      	add	r7, sp, #88	; 0x58
	NRF24_begin(CE_pin_GPIO_Port, CSN_pin_Pin, CE_pin_Pin, hspi1);
 8001c3e:	4c1b      	ldr	r4, [pc, #108]	; (8001cac <NRF_init_as_node+0x74>)
 8001c40:	4668      	mov	r0, sp
 8001c42:	1d23      	adds	r3, r4, #4
 8001c44:	2254      	movs	r2, #84	; 0x54
 8001c46:	4619      	mov	r1, r3
 8001c48:	f002 fc4a 	bl	80044e0 <memcpy>
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c56:	4816      	ldr	r0, [pc, #88]	; (8001cb0 <NRF_init_as_node+0x78>)
 8001c58:	f7fe fe30 	bl	80008bc <NRF24_begin>
	nrf24_DebugUART_Init(huart2);
 8001c5c:	4e15      	ldr	r6, [pc, #84]	; (8001cb4 <NRF_init_as_node+0x7c>)
 8001c5e:	466d      	mov	r5, sp
 8001c60:	f106 0410 	add.w	r4, r6, #16
 8001c64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	602b      	str	r3, [r5, #0]
 8001c74:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001c78:	f7ff fe34 	bl	80018e4 <nrf24_DebugUART_Init>
	NRF24_openWritingPipe(pipe_addr);
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <NRF_init_as_node+0x80>)
 8001c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	f7fe ff9f 	bl	8000bc8 <NRF24_openWritingPipe>
	NRF24_setAutoAck(true);
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f7ff f882 	bl	8000d94 <NRF24_setAutoAck>
	NRF24_setChannel(52);
 8001c90:	2034      	movs	r0, #52	; 0x34
 8001c92:	f7ff f826 	bl	8000ce2 <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 8001c96:	2020      	movs	r0, #32
 8001c98:	f7ff f838 	bl	8000d0c <NRF24_setPayloadSize>
	printRadioSettings();
 8001c9c:	f7ff f9fa 	bl	8001094 <printRadioSettings>
	NRF24_stopListening();
 8001ca0:	f7fe ff12 	bl	8000ac8 <NRF24_stopListening>
}
 8001ca4:	bf00      	nop
 8001ca6:	3704      	adds	r7, #4
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cac:	20000154 	.word	0x20000154
 8001cb0:	40020400 	.word	0x40020400
 8001cb4:	200001ac 	.word	0x200001ac
 8001cb8:	20000000 	.word	0x20000000

08001cbc <Transmit_Update>:
void Transmit_Update(void) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
	for (int i = 0; i < +10; i++) {
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	e024      	b.n	8001d12 <Transmit_Update+0x56>
		if (!NRF24_write(my_tx_data, 32)) {
 8001cc8:	2120      	movs	r1, #32
 8001cca:	4816      	ldr	r0, [pc, #88]	; (8001d24 <Transmit_Update+0x68>)
 8001ccc:	f7fe ff08 	bl	8000ae0 <NRF24_write>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f083 0301 	eor.w	r3, r3, #1
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00d      	beq.n	8001cf8 <Transmit_Update+0x3c>
			NRF24_write(my_tx_data, 32);
 8001cdc:	2120      	movs	r1, #32
 8001cde:	4811      	ldr	r0, [pc, #68]	; (8001d24 <Transmit_Update+0x68>)
 8001ce0:	f7fe fefe 	bl	8000ae0 <NRF24_write>
			HAL_UART_Transmit(&huart2,
 8001ce4:	230a      	movs	r3, #10
 8001ce6:	2221      	movs	r2, #33	; 0x21
 8001ce8:	490f      	ldr	r1, [pc, #60]	; (8001d28 <Transmit_Update+0x6c>)
 8001cea:	4810      	ldr	r0, [pc, #64]	; (8001d2c <Transmit_Update+0x70>)
 8001cec:	f002 f859 	bl	8003da2 <HAL_UART_Transmit>
					(uint8_t*) "Transmitt_update waiting for ack\n",
					strlen("Transmitt_update waiting for ack\n"), 10);
			HAL_Delay(200);
 8001cf0:	20c8      	movs	r0, #200	; 0xc8
 8001cf2:	f000 faf3 	bl	80022dc <HAL_Delay>
 8001cf6:	e009      	b.n	8001d0c <Transmit_Update+0x50>
		} else {
			HAL_UART_Transmit(&huart2,
 8001cf8:	230a      	movs	r3, #10
 8001cfa:	222a      	movs	r2, #42	; 0x2a
 8001cfc:	490c      	ldr	r1, [pc, #48]	; (8001d30 <Transmit_Update+0x74>)
 8001cfe:	480b      	ldr	r0, [pc, #44]	; (8001d2c <Transmit_Update+0x70>)
 8001d00:	f002 f84f 	bl	8003da2 <HAL_UART_Transmit>
					(uint8_t*) "Transmitt_update Transmitted successfully\n",
					strlen("Transmitt_update Transmitted successfully\n"), 10);
			HAL_Delay(100);
 8001d04:	2064      	movs	r0, #100	; 0x64
 8001d06:	f000 fae9 	bl	80022dc <HAL_Delay>
			break;
 8001d0a:	e006      	b.n	8001d1a <Transmit_Update+0x5e>
	for (int i = 0; i < +10; i++) {
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b09      	cmp	r3, #9
 8001d16:	ddd7      	ble.n	8001cc8 <Transmit_Update+0xc>
		}
	}
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000008 	.word	0x20000008
 8001d28:	08005328 	.word	0x08005328
 8001d2c:	200001ac 	.word	0x200001ac
 8001d30:	0800534c 	.word	0x0800534c
 8001d34:	00000000 	.word	0x00000000

08001d38 <Switch_to_Receiver_mode>:
void Switch_to_Receiver_mode(void) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	NRF24_setChannel(52);
 8001d3c:	2034      	movs	r0, #52	; 0x34
 8001d3e:	f7fe ffd0 	bl	8000ce2 <NRF24_setChannel>
	pipe_addr = 0x11223344AB;
 8001d42:	490b      	ldr	r1, [pc, #44]	; (8001d70 <Switch_to_Receiver_mode+0x38>)
 8001d44:	a308      	add	r3, pc, #32	; (adr r3, 8001d68 <Switch_to_Receiver_mode+0x30>)
 8001d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4a:	e9c1 2300 	strd	r2, r3, [r1]
	NRF24_openReadingPipe(1, pipe_addr);
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <Switch_to_Receiver_mode+0x38>)
 8001d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d54:	2001      	movs	r0, #1
 8001d56:	f7fe ff5b 	bl	8000c10 <NRF24_openReadingPipe>
	NRF24_startListening();
 8001d5a:	f7fe fe8f 	bl	8000a7c <NRF24_startListening>
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	f3af 8000 	nop.w
 8001d68:	223344ab 	.word	0x223344ab
 8001d6c:	00000011 	.word	0x00000011
 8001d70:	20000000 	.word	0x20000000

08001d74 <untill_alarm_reset>:

void untill_alarm_reset(void) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
	while (1) {
		if (NRF24_available()) {
 8001d78:	f7fe fefe 	bl	8000b78 <NRF24_available>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d046      	beq.n	8001e10 <untill_alarm_reset+0x9c>
			NRF24_read(received_data_from_server, 32); //store received data
 8001d82:	2120      	movs	r1, #32
 8001d84:	4839      	ldr	r0, [pc, #228]	; (8001e6c <untill_alarm_reset+0xf8>)
 8001d86:	f7fe feff 	bl	8000b88 <NRF24_read>
			received_data_from_server[6] = '\r';
 8001d8a:	4b38      	ldr	r3, [pc, #224]	; (8001e6c <untill_alarm_reset+0xf8>)
 8001d8c:	220d      	movs	r2, #13
 8001d8e:	719a      	strb	r2, [r3, #6]
			received_data_from_server[7] = '\n';
 8001d90:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <untill_alarm_reset+0xf8>)
 8001d92:	220a      	movs	r2, #10
 8001d94:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit(&huart2, (uint8_t*) received_data_from_server,
 8001d96:	230a      	movs	r3, #10
 8001d98:	2207      	movs	r2, #7
 8001d9a:	4934      	ldr	r1, [pc, #208]	; (8001e6c <untill_alarm_reset+0xf8>)
 8001d9c:	4834      	ldr	r0, [pc, #208]	; (8001e70 <untill_alarm_reset+0xfc>)
 8001d9e:	f002 f800 	bl	8003da2 <HAL_UART_Transmit>
					sizeof(received_data_from_server), 10); //send data to debug port
			//check if id and val matches, otherwise continue
			memcpy(trim_received_data_from_server, &received_data_from_server,
 8001da2:	2205      	movs	r2, #5
 8001da4:	4931      	ldr	r1, [pc, #196]	; (8001e6c <untill_alarm_reset+0xf8>)
 8001da6:	4833      	ldr	r0, [pc, #204]	; (8001e74 <untill_alarm_reset+0x100>)
 8001da8:	f002 fb9a 	bl	80044e0 <memcpy>
					5);
			HAL_UART_Transmit(&huart2,
 8001dac:	230a      	movs	r3, #10
 8001dae:	2205      	movs	r2, #5
 8001db0:	4930      	ldr	r1, [pc, #192]	; (8001e74 <untill_alarm_reset+0x100>)
 8001db2:	482f      	ldr	r0, [pc, #188]	; (8001e70 <untill_alarm_reset+0xfc>)
 8001db4:	f001 fff5 	bl	8003da2 <HAL_UART_Transmit>
					(uint8_t*) trim_received_data_from_server, 5, 10); //send trimmed received data
			memcpy(read_node_id, &trim_received_data_from_server, 3); //get id of the node
 8001db8:	2203      	movs	r2, #3
 8001dba:	492e      	ldr	r1, [pc, #184]	; (8001e74 <untill_alarm_reset+0x100>)
 8001dbc:	482e      	ldr	r0, [pc, #184]	; (8001e78 <untill_alarm_reset+0x104>)
 8001dbe:	f002 fb8f 	bl	80044e0 <memcpy>
			//read_node_status[1] = trim_received_data_from_server[5];  //get status of node
			//HAL_UART_Transmit(&huart2, (uint8_t*) read_node_id, 3,10); //send read node id
			if (strcmp((char*) received_data_from_server, "001,0") == 0) { //compare trimmed data and break if it is same
 8001dc2:	492e      	ldr	r1, [pc, #184]	; (8001e7c <untill_alarm_reset+0x108>)
 8001dc4:	4829      	ldr	r0, [pc, #164]	; (8001e6c <untill_alarm_reset+0xf8>)
 8001dc6:	f7fe fa23 	bl	8000210 <strcmp>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d103      	bne.n	8001dd8 <untill_alarm_reset+0x64>
				alarm_light_and_hooter(0);
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f000 f883 	bl	8001edc <alarm_light_and_hooter>
				break;
 8001dd6:	e046      	b.n	8001e66 <untill_alarm_reset+0xf2>
			}
			if (!HAL_GPIO_ReadPin(MANUAL_STOP_ALARM_pin_GPIO_Port,
 8001dd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ddc:	4828      	ldr	r0, [pc, #160]	; (8001e80 <untill_alarm_reset+0x10c>)
 8001dde:	f000 fcfb 	bl	80027d8 <HAL_GPIO_ReadPin>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d102      	bne.n	8001dee <untill_alarm_reset+0x7a>
			MANUAL_STOP_ALARM_pin_Pin)) {
				manaul_turn_alarm_off = true;
 8001de8:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <untill_alarm_reset+0x110>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	701a      	strb	r2, [r3, #0]
			}
			if (manaul_turn_alarm_off) {
 8001dee:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <untill_alarm_reset+0x110>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00c      	beq.n	8001e10 <untill_alarm_reset+0x9c>
				alarm_light_and_hooter(0);
 8001df6:	2000      	movs	r0, #0
 8001df8:	f000 f870 	bl	8001edc <alarm_light_and_hooter>
				HAL_UART_Transmit(&huart2,
 8001dfc:	230a      	movs	r3, #10
 8001dfe:	221a      	movs	r2, #26
 8001e00:	4921      	ldr	r1, [pc, #132]	; (8001e88 <untill_alarm_reset+0x114>)
 8001e02:	481b      	ldr	r0, [pc, #108]	; (8001e70 <untill_alarm_reset+0xfc>)
 8001e04:	f001 ffcd 	bl	8003da2 <HAL_UART_Transmit>
						(uint8_t*) "Alarm manually turned off\n",
						strlen("Alarm manually turned off\n"), 10);
				manaul_turn_alarm_off = 0;
 8001e08:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <untill_alarm_reset+0x110>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
				break;
 8001e0e:	e02a      	b.n	8001e66 <untill_alarm_reset+0xf2>
			}
		}
		if (!HAL_GPIO_ReadPin(MANUAL_STOP_ALARM_pin_GPIO_Port,
 8001e10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e14:	481a      	ldr	r0, [pc, #104]	; (8001e80 <untill_alarm_reset+0x10c>)
 8001e16:	f000 fcdf 	bl	80027d8 <HAL_GPIO_ReadPin>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d102      	bne.n	8001e26 <untill_alarm_reset+0xb2>
		MANUAL_STOP_ALARM_pin_Pin)) {
			manaul_turn_alarm_off = true;
 8001e20:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <untill_alarm_reset+0x110>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
		}
		if (manaul_turn_alarm_off) {
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <untill_alarm_reset+0x110>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00c      	beq.n	8001e48 <untill_alarm_reset+0xd4>
			alarm_light_and_hooter(0);
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f000 f854 	bl	8001edc <alarm_light_and_hooter>
			HAL_UART_Transmit(&huart2, (uint8_t*) "Alarm manually turned off\n",
 8001e34:	230a      	movs	r3, #10
 8001e36:	221a      	movs	r2, #26
 8001e38:	4913      	ldr	r1, [pc, #76]	; (8001e88 <untill_alarm_reset+0x114>)
 8001e3a:	480d      	ldr	r0, [pc, #52]	; (8001e70 <untill_alarm_reset+0xfc>)
 8001e3c:	f001 ffb1 	bl	8003da2 <HAL_UART_Transmit>
					strlen("Alarm manually turned off\n"), 10);
			manaul_turn_alarm_off = 0;
 8001e40:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <untill_alarm_reset+0x110>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	701a      	strb	r2, [r3, #0]
			break;
 8001e46:	e00e      	b.n	8001e66 <untill_alarm_reset+0xf2>
		}
		HAL_UART_Transmit(&huart2,
 8001e48:	230a      	movs	r3, #10
 8001e4a:	2221      	movs	r2, #33	; 0x21
 8001e4c:	490f      	ldr	r1, [pc, #60]	; (8001e8c <untill_alarm_reset+0x118>)
 8001e4e:	4808      	ldr	r0, [pc, #32]	; (8001e70 <untill_alarm_reset+0xfc>)
 8001e50:	f001 ffa7 	bl	8003da2 <HAL_UART_Transmit>
				(uint8_t*) "waiting for response from server\n",
				strlen("waiting for response from server\n"), 10);
		HAL_GPIO_TogglePin(LED_pin_GPIO_Port, LED_pin_Pin);
 8001e54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e58:	480d      	ldr	r0, [pc, #52]	; (8001e90 <untill_alarm_reset+0x11c>)
 8001e5a:	f000 fcee 	bl	800283a <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8001e5e:	20c8      	movs	r0, #200	; 0xc8
 8001e60:	f000 fa3c 	bl	80022dc <HAL_Delay>
		if (NRF24_available()) {
 8001e64:	e788      	b.n	8001d78 <untill_alarm_reset+0x4>
	}
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200001f0 	.word	0x200001f0
 8001e70:	200001ac 	.word	0x200001ac
 8001e74:	200001f8 	.word	0x200001f8
 8001e78:	20000200 	.word	0x20000200
 8001e7c:	08005378 	.word	0x08005378
 8001e80:	40020400 	.word	0x40020400
 8001e84:	20000204 	.word	0x20000204
 8001e88:	08005380 	.word	0x08005380
 8001e8c:	0800539c 	.word	0x0800539c
 8001e90:	40020000 	.word	0x40020000
 8001e94:	00000000 	.word	0x00000000

08001e98 <Switch_to_Transmitt_mode>:
void Switch_to_Transmitt_mode(void) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
	NRF24_setChannel(52);
 8001e9c:	2034      	movs	r0, #52	; 0x34
 8001e9e:	f7fe ff20 	bl	8000ce2 <NRF24_setChannel>
	NRF24_stopListening();
 8001ea2:	f7fe fe11 	bl	8000ac8 <NRF24_stopListening>
	pipe_addr = 0x11223344AA;
 8001ea6:	490c      	ldr	r1, [pc, #48]	; (8001ed8 <Switch_to_Transmitt_mode+0x40>)
 8001ea8:	a309      	add	r3, pc, #36	; (adr r3, 8001ed0 <Switch_to_Transmitt_mode+0x38>)
 8001eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eae:	e9c1 2300 	strd	r2, r3, [r1]
	NRF24_openWritingPipe(pipe_addr);
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <Switch_to_Transmitt_mode+0x40>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f7fe fe84 	bl	8000bc8 <NRF24_openWritingPipe>
	NRF24_setChannel(52);
 8001ec0:	2034      	movs	r0, #52	; 0x34
 8001ec2:	f7fe ff0e 	bl	8000ce2 <NRF24_setChannel>
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	f3af 8000 	nop.w
 8001ed0:	223344aa 	.word	0x223344aa
 8001ed4:	00000011 	.word	0x00000011
 8001ed8:	20000000 	.word	0x20000000

08001edc <alarm_light_and_hooter>:
void alarm_light_and_hooter(bool a) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
	if (a == true) {
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00a      	beq.n	8001f02 <alarm_light_and_hooter+0x26>
		HAL_GPIO_WritePin(ALARM_HOOTER_pin_GPIO_Port, ALARM_HOOTER_pin_Pin, 1);
 8001eec:	2201      	movs	r2, #1
 8001eee:	2110      	movs	r1, #16
 8001ef0:	480e      	ldr	r0, [pc, #56]	; (8001f2c <alarm_light_and_hooter+0x50>)
 8001ef2:	f000 fc89 	bl	8002808 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ALARM_LED_pin_GPIO_Port, ALARM_LED_pin_Pin, 1);
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2120      	movs	r1, #32
 8001efa:	480c      	ldr	r0, [pc, #48]	; (8001f2c <alarm_light_and_hooter+0x50>)
 8001efc:	f000 fc84 	bl	8002808 <HAL_GPIO_WritePin>
	} else if (a == false) {
		HAL_GPIO_WritePin(ALARM_HOOTER_pin_GPIO_Port, ALARM_HOOTER_pin_Pin, 0);
		HAL_GPIO_WritePin(ALARM_LED_pin_GPIO_Port, ALARM_LED_pin_Pin, 0);
	}
}
 8001f00:	e00f      	b.n	8001f22 <alarm_light_and_hooter+0x46>
	} else if (a == false) {
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	f083 0301 	eor.w	r3, r3, #1
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <alarm_light_and_hooter+0x46>
		HAL_GPIO_WritePin(ALARM_HOOTER_pin_GPIO_Port, ALARM_HOOTER_pin_Pin, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2110      	movs	r1, #16
 8001f12:	4806      	ldr	r0, [pc, #24]	; (8001f2c <alarm_light_and_hooter+0x50>)
 8001f14:	f000 fc78 	bl	8002808 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ALARM_LED_pin_GPIO_Port, ALARM_LED_pin_Pin, 0);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2120      	movs	r1, #32
 8001f1c:	4803      	ldr	r0, [pc, #12]	; (8001f2c <alarm_light_and_hooter+0x50>)
 8001f1e:	f000 fc73 	bl	8002808 <HAL_GPIO_WritePin>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40020400 	.word	0x40020400

08001f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f34:	b672      	cpsid	i
}
 8001f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_TogglePin(LED_pin_GPIO_Port, LED_pin_Pin);
 8001f38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f3c:	4803      	ldr	r0, [pc, #12]	; (8001f4c <Error_Handler+0x1c>)
 8001f3e:	f000 fc7c 	bl	800283a <HAL_GPIO_TogglePin>
		HAL_Delay(2000);
 8001f42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f46:	f000 f9c9 	bl	80022dc <HAL_Delay>
		HAL_GPIO_TogglePin(LED_pin_GPIO_Port, LED_pin_Pin);
 8001f4a:	e7f5      	b.n	8001f38 <Error_Handler+0x8>
 8001f4c:	40020000 	.word	0x40020000

08001f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <HAL_MspInit+0x4c>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	4a0f      	ldr	r2, [pc, #60]	; (8001f9c <HAL_MspInit+0x4c>)
 8001f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f64:	6453      	str	r3, [r2, #68]	; 0x44
 8001f66:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <HAL_MspInit+0x4c>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	603b      	str	r3, [r7, #0]
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_MspInit+0x4c>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	4a08      	ldr	r2, [pc, #32]	; (8001f9c <HAL_MspInit+0x4c>)
 8001f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f80:	6413      	str	r3, [r2, #64]	; 0x40
 8001f82:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <HAL_MspInit+0x4c>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f8e:	2007      	movs	r0, #7
 8001f90:	f000 fa7a 	bl	8002488 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40023800 	.word	0x40023800

08001fa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a19      	ldr	r2, [pc, #100]	; (8002024 <HAL_SPI_MspInit+0x84>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d12b      	bne.n	800201a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	4b18      	ldr	r3, [pc, #96]	; (8002028 <HAL_SPI_MspInit+0x88>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	4a17      	ldr	r2, [pc, #92]	; (8002028 <HAL_SPI_MspInit+0x88>)
 8001fcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <HAL_SPI_MspInit+0x88>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_SPI_MspInit+0x88>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a10      	ldr	r2, [pc, #64]	; (8002028 <HAL_SPI_MspInit+0x88>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <HAL_SPI_MspInit+0x88>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ffa:	23e0      	movs	r3, #224	; 0xe0
 8001ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002006:	2303      	movs	r3, #3
 8002008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800200a:	2305      	movs	r3, #5
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	4619      	mov	r1, r3
 8002014:	4805      	ldr	r0, [pc, #20]	; (800202c <HAL_SPI_MspInit+0x8c>)
 8002016:	f000 fa6b 	bl	80024f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800201a:	bf00      	nop
 800201c:	3728      	adds	r7, #40	; 0x28
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40013000 	.word	0x40013000
 8002028:	40023800 	.word	0x40023800
 800202c:	40020000 	.word	0x40020000

08002030 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a19      	ldr	r2, [pc, #100]	; (80020b4 <HAL_UART_MspInit+0x84>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d12b      	bne.n	80020aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <HAL_UART_MspInit+0x88>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <HAL_UART_MspInit+0x88>)
 800205c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002060:	6413      	str	r3, [r2, #64]	; 0x40
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <HAL_UART_MspInit+0x88>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_UART_MspInit+0x88>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a10      	ldr	r2, [pc, #64]	; (80020b8 <HAL_UART_MspInit+0x88>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <HAL_UART_MspInit+0x88>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800208a:	230c      	movs	r3, #12
 800208c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002096:	2303      	movs	r3, #3
 8002098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800209a:	2307      	movs	r3, #7
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209e:	f107 0314 	add.w	r3, r7, #20
 80020a2:	4619      	mov	r1, r3
 80020a4:	4805      	ldr	r0, [pc, #20]	; (80020bc <HAL_UART_MspInit+0x8c>)
 80020a6:	f000 fa23 	bl	80024f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020aa:	bf00      	nop
 80020ac:	3728      	adds	r7, #40	; 0x28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40004400 	.word	0x40004400
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40020000 	.word	0x40020000

080020c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020c4:	e7fe      	b.n	80020c4 <NMI_Handler+0x4>

080020c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ca:	e7fe      	b.n	80020ca <HardFault_Handler+0x4>

080020cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d0:	e7fe      	b.n	80020d0 <MemManage_Handler+0x4>

080020d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d6:	e7fe      	b.n	80020d6 <BusFault_Handler+0x4>

080020d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020dc:	e7fe      	b.n	80020dc <UsageFault_Handler+0x4>

080020de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800210c:	f000 f8c6 	bl	800229c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}

08002114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800211c:	4a14      	ldr	r2, [pc, #80]	; (8002170 <_sbrk+0x5c>)
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <_sbrk+0x60>)
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002128:	4b13      	ldr	r3, [pc, #76]	; (8002178 <_sbrk+0x64>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d102      	bne.n	8002136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <_sbrk+0x64>)
 8002132:	4a12      	ldr	r2, [pc, #72]	; (800217c <_sbrk+0x68>)
 8002134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <_sbrk+0x64>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	429a      	cmp	r2, r3
 8002142:	d207      	bcs.n	8002154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002144:	f002 f9a2 	bl	800448c <__errno>
 8002148:	4603      	mov	r3, r0
 800214a:	220c      	movs	r2, #12
 800214c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800214e:	f04f 33ff 	mov.w	r3, #4294967295
 8002152:	e009      	b.n	8002168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <_sbrk+0x64>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800215a:	4b07      	ldr	r3, [pc, #28]	; (8002178 <_sbrk+0x64>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <_sbrk+0x64>)
 8002164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002166:	68fb      	ldr	r3, [r7, #12]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20008000 	.word	0x20008000
 8002174:	00000400 	.word	0x00000400
 8002178:	20000208 	.word	0x20000208
 800217c:	20000220 	.word	0x20000220

08002180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <SystemInit+0x20>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218a:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <SystemInit+0x20>)
 800218c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80021a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021a8:	480d      	ldr	r0, [pc, #52]	; (80021e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021aa:	490e      	ldr	r1, [pc, #56]	; (80021e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021ac:	4a0e      	ldr	r2, [pc, #56]	; (80021e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021b0:	e002      	b.n	80021b8 <LoopCopyDataInit>

080021b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021b6:	3304      	adds	r3, #4

080021b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021bc:	d3f9      	bcc.n	80021b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021be:	4a0b      	ldr	r2, [pc, #44]	; (80021ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021c0:	4c0b      	ldr	r4, [pc, #44]	; (80021f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c4:	e001      	b.n	80021ca <LoopFillZerobss>

080021c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c8:	3204      	adds	r2, #4

080021ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021cc:	d3fb      	bcc.n	80021c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021ce:	f7ff ffd7 	bl	8002180 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021d2:	f002 f961 	bl	8004498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021d6:	f7ff fb9d 	bl	8001914 <main>
  bx  lr    
 80021da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80021dc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80021e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021e4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80021e8:	0800542c 	.word	0x0800542c
  ldr r2, =_sbss
 80021ec:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80021f0:	20000220 	.word	0x20000220

080021f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021f4:	e7fe      	b.n	80021f4 <ADC_IRQHandler>
	...

080021f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021fc:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <HAL_Init+0x40>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0d      	ldr	r2, [pc, #52]	; (8002238 <HAL_Init+0x40>)
 8002202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002206:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_Init+0x40>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <HAL_Init+0x40>)
 800220e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002212:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002214:	4b08      	ldr	r3, [pc, #32]	; (8002238 <HAL_Init+0x40>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a07      	ldr	r2, [pc, #28]	; (8002238 <HAL_Init+0x40>)
 800221a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002220:	2003      	movs	r0, #3
 8002222:	f000 f931 	bl	8002488 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002226:	2000      	movs	r0, #0
 8002228:	f000 f808 	bl	800223c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800222c:	f7ff fe90 	bl	8001f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40023c00 	.word	0x40023c00

0800223c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_InitTick+0x54>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_InitTick+0x58>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	4619      	mov	r1, r3
 800224e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002252:	fbb3 f3f1 	udiv	r3, r3, r1
 8002256:	fbb2 f3f3 	udiv	r3, r2, r3
 800225a:	4618      	mov	r0, r3
 800225c:	f000 f93b 	bl	80024d6 <HAL_SYSTICK_Config>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e00e      	b.n	8002288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b0f      	cmp	r3, #15
 800226e:	d80a      	bhi.n	8002286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002270:	2200      	movs	r2, #0
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	f04f 30ff 	mov.w	r0, #4294967295
 8002278:	f000 f911 	bl	800249e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800227c:	4a06      	ldr	r2, [pc, #24]	; (8002298 <HAL_InitTick+0x5c>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	e000      	b.n	8002288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000010 	.word	0x20000010
 8002294:	20000018 	.word	0x20000018
 8002298:	20000014 	.word	0x20000014

0800229c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_IncTick+0x20>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_IncTick+0x24>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4413      	add	r3, r2
 80022ac:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <HAL_IncTick+0x24>)
 80022ae:	6013      	str	r3, [r2, #0]
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20000018 	.word	0x20000018
 80022c0:	2000020c 	.word	0x2000020c

080022c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return uwTick;
 80022c8:	4b03      	ldr	r3, [pc, #12]	; (80022d8 <HAL_GetTick+0x14>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	2000020c 	.word	0x2000020c

080022dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e4:	f7ff ffee 	bl	80022c4 <HAL_GetTick>
 80022e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d005      	beq.n	8002302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <HAL_Delay+0x44>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4413      	add	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002302:	bf00      	nop
 8002304:	f7ff ffde 	bl	80022c4 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	429a      	cmp	r2, r3
 8002312:	d8f7      	bhi.n	8002304 <HAL_Delay+0x28>
  {
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000018 	.word	0x20000018

08002324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <__NVIC_SetPriorityGrouping+0x44>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002340:	4013      	ands	r3, r2
 8002342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800234c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002356:	4a04      	ldr	r2, [pc, #16]	; (8002368 <__NVIC_SetPriorityGrouping+0x44>)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	60d3      	str	r3, [r2, #12]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002370:	4b04      	ldr	r3, [pc, #16]	; (8002384 <__NVIC_GetPriorityGrouping+0x18>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	f003 0307 	and.w	r3, r3, #7
}
 800237a:	4618      	mov	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	6039      	str	r1, [r7, #0]
 8002392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002398:	2b00      	cmp	r3, #0
 800239a:	db0a      	blt.n	80023b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	490c      	ldr	r1, [pc, #48]	; (80023d4 <__NVIC_SetPriority+0x4c>)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	0112      	lsls	r2, r2, #4
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	440b      	add	r3, r1
 80023ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b0:	e00a      	b.n	80023c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4908      	ldr	r1, [pc, #32]	; (80023d8 <__NVIC_SetPriority+0x50>)
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	3b04      	subs	r3, #4
 80023c0:	0112      	lsls	r2, r2, #4
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	440b      	add	r3, r1
 80023c6:	761a      	strb	r2, [r3, #24]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000e100 	.word	0xe000e100
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b089      	sub	sp, #36	; 0x24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f1c3 0307 	rsb	r3, r3, #7
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	bf28      	it	cs
 80023fa:	2304      	movcs	r3, #4
 80023fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3304      	adds	r3, #4
 8002402:	2b06      	cmp	r3, #6
 8002404:	d902      	bls.n	800240c <NVIC_EncodePriority+0x30>
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3b03      	subs	r3, #3
 800240a:	e000      	b.n	800240e <NVIC_EncodePriority+0x32>
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	f04f 32ff 	mov.w	r2, #4294967295
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	401a      	ands	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002424:	f04f 31ff 	mov.w	r1, #4294967295
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	43d9      	mvns	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002434:	4313      	orrs	r3, r2
         );
}
 8002436:	4618      	mov	r0, r3
 8002438:	3724      	adds	r7, #36	; 0x24
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3b01      	subs	r3, #1
 8002450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002454:	d301      	bcc.n	800245a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002456:	2301      	movs	r3, #1
 8002458:	e00f      	b.n	800247a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800245a:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <SysTick_Config+0x40>)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3b01      	subs	r3, #1
 8002460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002462:	210f      	movs	r1, #15
 8002464:	f04f 30ff 	mov.w	r0, #4294967295
 8002468:	f7ff ff8e 	bl	8002388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <SysTick_Config+0x40>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002472:	4b04      	ldr	r3, [pc, #16]	; (8002484 <SysTick_Config+0x40>)
 8002474:	2207      	movs	r2, #7
 8002476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	e000e010 	.word	0xe000e010

08002488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7ff ff47 	bl	8002324 <__NVIC_SetPriorityGrouping>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800249e:	b580      	push	{r7, lr}
 80024a0:	b086      	sub	sp, #24
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
 80024aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024b0:	f7ff ff5c 	bl	800236c <__NVIC_GetPriorityGrouping>
 80024b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	6978      	ldr	r0, [r7, #20]
 80024bc:	f7ff ff8e 	bl	80023dc <NVIC_EncodePriority>
 80024c0:	4602      	mov	r2, r0
 80024c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c6:	4611      	mov	r1, r2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff5d 	bl	8002388 <__NVIC_SetPriority>
}
 80024ce:	bf00      	nop
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ffb0 	bl	8002444 <SysTick_Config>
 80024e4:	4603      	mov	r3, r0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	; 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	e14d      	b.n	80027a8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800250c:	2201      	movs	r2, #1
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	429a      	cmp	r2, r3
 8002526:	f040 813c 	bne.w	80027a2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d005      	beq.n	8002542 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800253e:	2b02      	cmp	r3, #2
 8002540:	d130      	bne.n	80025a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	2203      	movs	r2, #3
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002578:	2201      	movs	r2, #1
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 0201 	and.w	r2, r3, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d017      	beq.n	80025e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	2203      	movs	r2, #3
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d123      	bne.n	8002634 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	08da      	lsrs	r2, r3, #3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3208      	adds	r2, #8
 80025f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	220f      	movs	r2, #15
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	08da      	lsrs	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3208      	adds	r2, #8
 800262e:	69b9      	ldr	r1, [r7, #24]
 8002630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	2203      	movs	r2, #3
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0203 	and.w	r2, r3, #3
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8096 	beq.w	80027a2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	4b51      	ldr	r3, [pc, #324]	; (80027c0 <HAL_GPIO_Init+0x2d0>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	4a50      	ldr	r2, [pc, #320]	; (80027c0 <HAL_GPIO_Init+0x2d0>)
 8002680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002684:	6453      	str	r3, [r2, #68]	; 0x44
 8002686:	4b4e      	ldr	r3, [pc, #312]	; (80027c0 <HAL_GPIO_Init+0x2d0>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002692:	4a4c      	ldr	r2, [pc, #304]	; (80027c4 <HAL_GPIO_Init+0x2d4>)
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	3302      	adds	r3, #2
 800269a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	220f      	movs	r2, #15
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a43      	ldr	r2, [pc, #268]	; (80027c8 <HAL_GPIO_Init+0x2d8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d00d      	beq.n	80026da <HAL_GPIO_Init+0x1ea>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a42      	ldr	r2, [pc, #264]	; (80027cc <HAL_GPIO_Init+0x2dc>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d007      	beq.n	80026d6 <HAL_GPIO_Init+0x1e6>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a41      	ldr	r2, [pc, #260]	; (80027d0 <HAL_GPIO_Init+0x2e0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d101      	bne.n	80026d2 <HAL_GPIO_Init+0x1e2>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e004      	b.n	80026dc <HAL_GPIO_Init+0x1ec>
 80026d2:	2307      	movs	r3, #7
 80026d4:	e002      	b.n	80026dc <HAL_GPIO_Init+0x1ec>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <HAL_GPIO_Init+0x1ec>
 80026da:	2300      	movs	r3, #0
 80026dc:	69fa      	ldr	r2, [r7, #28]
 80026de:	f002 0203 	and.w	r2, r2, #3
 80026e2:	0092      	lsls	r2, r2, #2
 80026e4:	4093      	lsls	r3, r2
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026ec:	4935      	ldr	r1, [pc, #212]	; (80027c4 <HAL_GPIO_Init+0x2d4>)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	089b      	lsrs	r3, r3, #2
 80026f2:	3302      	adds	r3, #2
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026fa:	4b36      	ldr	r3, [pc, #216]	; (80027d4 <HAL_GPIO_Init+0x2e4>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800271e:	4a2d      	ldr	r2, [pc, #180]	; (80027d4 <HAL_GPIO_Init+0x2e4>)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002724:	4b2b      	ldr	r3, [pc, #172]	; (80027d4 <HAL_GPIO_Init+0x2e4>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002748:	4a22      	ldr	r2, [pc, #136]	; (80027d4 <HAL_GPIO_Init+0x2e4>)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800274e:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <HAL_GPIO_Init+0x2e4>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002772:	4a18      	ldr	r2, [pc, #96]	; (80027d4 <HAL_GPIO_Init+0x2e4>)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002778:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <HAL_GPIO_Init+0x2e4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800279c:	4a0d      	ldr	r2, [pc, #52]	; (80027d4 <HAL_GPIO_Init+0x2e4>)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3301      	adds	r3, #1
 80027a6:	61fb      	str	r3, [r7, #28]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	2b0f      	cmp	r3, #15
 80027ac:	f67f aeae 	bls.w	800250c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	3724      	adds	r7, #36	; 0x24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40013800 	.word	0x40013800
 80027c8:	40020000 	.word	0x40020000
 80027cc:	40020400 	.word	0x40020400
 80027d0:	40020800 	.word	0x40020800
 80027d4:	40013c00 	.word	0x40013c00

080027d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	887b      	ldrh	r3, [r7, #2]
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
 80027f4:	e001      	b.n	80027fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	807b      	strh	r3, [r7, #2]
 8002814:	4613      	mov	r3, r2
 8002816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002818:	787b      	ldrb	r3, [r7, #1]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800281e:	887a      	ldrh	r2, [r7, #2]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002824:	e003      	b.n	800282e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002826:	887b      	ldrh	r3, [r7, #2]
 8002828:	041a      	lsls	r2, r3, #16
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	619a      	str	r2, [r3, #24]
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800283a:	b480      	push	{r7}
 800283c:	b085      	sub	sp, #20
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	460b      	mov	r3, r1
 8002844:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800284c:	887a      	ldrh	r2, [r7, #2]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4013      	ands	r3, r2
 8002852:	041a      	lsls	r2, r3, #16
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	43d9      	mvns	r1, r3
 8002858:	887b      	ldrh	r3, [r7, #2]
 800285a:	400b      	ands	r3, r1
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	619a      	str	r2, [r3, #24]
}
 8002862:	bf00      	nop
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0cc      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002884:	4b68      	ldr	r3, [pc, #416]	; (8002a28 <HAL_RCC_ClockConfig+0x1b8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d90c      	bls.n	80028ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002892:	4b65      	ldr	r3, [pc, #404]	; (8002a28 <HAL_RCC_ClockConfig+0x1b8>)
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800289a:	4b63      	ldr	r3, [pc, #396]	; (8002a28 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d001      	beq.n	80028ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0b8      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d020      	beq.n	80028fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028c4:	4b59      	ldr	r3, [pc, #356]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	4a58      	ldr	r2, [pc, #352]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028dc:	4b53      	ldr	r3, [pc, #332]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4a52      	ldr	r2, [pc, #328]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e8:	4b50      	ldr	r3, [pc, #320]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	494d      	ldr	r1, [pc, #308]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d044      	beq.n	8002990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d107      	bne.n	800291e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	4b47      	ldr	r3, [pc, #284]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d119      	bne.n	800294e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e07f      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d003      	beq.n	800292e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800292a:	2b03      	cmp	r3, #3
 800292c:	d107      	bne.n	800293e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292e:	4b3f      	ldr	r3, [pc, #252]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d109      	bne.n	800294e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e06f      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293e:	4b3b      	ldr	r3, [pc, #236]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e067      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800294e:	4b37      	ldr	r3, [pc, #220]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f023 0203 	bic.w	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	4934      	ldr	r1, [pc, #208]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	4313      	orrs	r3, r2
 800295e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002960:	f7ff fcb0 	bl	80022c4 <HAL_GetTick>
 8002964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002966:	e00a      	b.n	800297e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002968:	f7ff fcac 	bl	80022c4 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f241 3288 	movw	r2, #5000	; 0x1388
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e04f      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297e:	4b2b      	ldr	r3, [pc, #172]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 020c 	and.w	r2, r3, #12
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	429a      	cmp	r2, r3
 800298e:	d1eb      	bne.n	8002968 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002990:	4b25      	ldr	r3, [pc, #148]	; (8002a28 <HAL_RCC_ClockConfig+0x1b8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d20c      	bcs.n	80029b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299e:	4b22      	ldr	r3, [pc, #136]	; (8002a28 <HAL_RCC_ClockConfig+0x1b8>)
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b20      	ldr	r3, [pc, #128]	; (8002a28 <HAL_RCC_ClockConfig+0x1b8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e032      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c4:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	4916      	ldr	r1, [pc, #88]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d009      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029e2:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	490e      	ldr	r1, [pc, #56]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029f6:	f000 f821 	bl	8002a3c <HAL_RCC_GetSysClockFreq>
 80029fa:	4602      	mov	r2, r0
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	490a      	ldr	r1, [pc, #40]	; (8002a30 <HAL_RCC_ClockConfig+0x1c0>)
 8002a08:	5ccb      	ldrb	r3, [r1, r3]
 8002a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0e:	4a09      	ldr	r2, [pc, #36]	; (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a12:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <HAL_RCC_ClockConfig+0x1c8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fc10 	bl	800223c <HAL_InitTick>

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40023c00 	.word	0x40023c00
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	080053d0 	.word	0x080053d0
 8002a34:	20000010 	.word	0x20000010
 8002a38:	20000014 	.word	0x20000014

08002a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a40:	b094      	sub	sp, #80	; 0x50
 8002a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	647b      	str	r3, [r7, #68]	; 0x44
 8002a48:	2300      	movs	r3, #0
 8002a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a54:	4b79      	ldr	r3, [pc, #484]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 030c 	and.w	r3, r3, #12
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d00d      	beq.n	8002a7c <HAL_RCC_GetSysClockFreq+0x40>
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	f200 80e1 	bhi.w	8002c28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <HAL_RCC_GetSysClockFreq+0x34>
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d003      	beq.n	8002a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a6e:	e0db      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a70:	4b73      	ldr	r3, [pc, #460]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a74:	e0db      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a76:	4b73      	ldr	r3, [pc, #460]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a7a:	e0d8      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a7c:	4b6f      	ldr	r3, [pc, #444]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a86:	4b6d      	ldr	r3, [pc, #436]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d063      	beq.n	8002b5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a92:	4b6a      	ldr	r3, [pc, #424]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	099b      	lsrs	r3, r3, #6
 8002a98:	2200      	movs	r2, #0
 8002a9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8002aaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002aae:	4622      	mov	r2, r4
 8002ab0:	462b      	mov	r3, r5
 8002ab2:	f04f 0000 	mov.w	r0, #0
 8002ab6:	f04f 0100 	mov.w	r1, #0
 8002aba:	0159      	lsls	r1, r3, #5
 8002abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ac0:	0150      	lsls	r0, r2, #5
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4621      	mov	r1, r4
 8002ac8:	1a51      	subs	r1, r2, r1
 8002aca:	6139      	str	r1, [r7, #16]
 8002acc:	4629      	mov	r1, r5
 8002ace:	eb63 0301 	sbc.w	r3, r3, r1
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ae0:	4659      	mov	r1, fp
 8002ae2:	018b      	lsls	r3, r1, #6
 8002ae4:	4651      	mov	r1, sl
 8002ae6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aea:	4651      	mov	r1, sl
 8002aec:	018a      	lsls	r2, r1, #6
 8002aee:	4651      	mov	r1, sl
 8002af0:	ebb2 0801 	subs.w	r8, r2, r1
 8002af4:	4659      	mov	r1, fp
 8002af6:	eb63 0901 	sbc.w	r9, r3, r1
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b0e:	4690      	mov	r8, r2
 8002b10:	4699      	mov	r9, r3
 8002b12:	4623      	mov	r3, r4
 8002b14:	eb18 0303 	adds.w	r3, r8, r3
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	462b      	mov	r3, r5
 8002b1c:	eb49 0303 	adc.w	r3, r9, r3
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b2e:	4629      	mov	r1, r5
 8002b30:	024b      	lsls	r3, r1, #9
 8002b32:	4621      	mov	r1, r4
 8002b34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b38:	4621      	mov	r1, r4
 8002b3a:	024a      	lsls	r2, r1, #9
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b42:	2200      	movs	r2, #0
 8002b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b4c:	f7fd fbc8 	bl	80002e0 <__aeabi_uldivmod>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4613      	mov	r3, r2
 8002b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b58:	e058      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b5a:	4b38      	ldr	r3, [pc, #224]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	099b      	lsrs	r3, r3, #6
 8002b60:	2200      	movs	r2, #0
 8002b62:	4618      	mov	r0, r3
 8002b64:	4611      	mov	r1, r2
 8002b66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b6a:	623b      	str	r3, [r7, #32]
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b74:	4642      	mov	r2, r8
 8002b76:	464b      	mov	r3, r9
 8002b78:	f04f 0000 	mov.w	r0, #0
 8002b7c:	f04f 0100 	mov.w	r1, #0
 8002b80:	0159      	lsls	r1, r3, #5
 8002b82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b86:	0150      	lsls	r0, r2, #5
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4641      	mov	r1, r8
 8002b8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b92:	4649      	mov	r1, r9
 8002b94:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ba4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ba8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bac:	ebb2 040a 	subs.w	r4, r2, sl
 8002bb0:	eb63 050b 	sbc.w	r5, r3, fp
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	00eb      	lsls	r3, r5, #3
 8002bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bc2:	00e2      	lsls	r2, r4, #3
 8002bc4:	4614      	mov	r4, r2
 8002bc6:	461d      	mov	r5, r3
 8002bc8:	4643      	mov	r3, r8
 8002bca:	18e3      	adds	r3, r4, r3
 8002bcc:	603b      	str	r3, [r7, #0]
 8002bce:	464b      	mov	r3, r9
 8002bd0:	eb45 0303 	adc.w	r3, r5, r3
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002be2:	4629      	mov	r1, r5
 8002be4:	028b      	lsls	r3, r1, #10
 8002be6:	4621      	mov	r1, r4
 8002be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bec:	4621      	mov	r1, r4
 8002bee:	028a      	lsls	r2, r1, #10
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	61bb      	str	r3, [r7, #24]
 8002bfa:	61fa      	str	r2, [r7, #28]
 8002bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c00:	f7fd fb6e 	bl	80002e0 <__aeabi_uldivmod>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4613      	mov	r3, r2
 8002c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	0c1b      	lsrs	r3, r3, #16
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	3301      	adds	r3, #1
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c26:	e002      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3750      	adds	r7, #80	; 0x50
 8002c34:	46bd      	mov	sp, r7
 8002c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	00f42400 	.word	0x00f42400
 8002c44:	007a1200 	.word	0x007a1200

08002c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000010 	.word	0x20000010

08002c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c64:	f7ff fff0 	bl	8002c48 <HAL_RCC_GetHCLKFreq>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	0a9b      	lsrs	r3, r3, #10
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	4903      	ldr	r1, [pc, #12]	; (8002c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c76:	5ccb      	ldrb	r3, [r1, r3]
 8002c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40023800 	.word	0x40023800
 8002c84:	080053e0 	.word	0x080053e0

08002c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c8c:	f7ff ffdc 	bl	8002c48 <HAL_RCC_GetHCLKFreq>
 8002c90:	4602      	mov	r2, r0
 8002c92:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	0b5b      	lsrs	r3, r3, #13
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	4903      	ldr	r1, [pc, #12]	; (8002cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	080053e0 	.word	0x080053e0

08002cb0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e273      	b.n	80031aa <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d075      	beq.n	8002dba <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002cce:	4b88      	ldr	r3, [pc, #544]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d00c      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cda:	4b85      	ldr	r3, [pc, #532]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d112      	bne.n	8002d0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ce6:	4b82      	ldr	r3, [pc, #520]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cf2:	d10b      	bne.n	8002d0c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf4:	4b7e      	ldr	r3, [pc, #504]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d05b      	beq.n	8002db8 <HAL_RCC_OscConfig+0x108>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d157      	bne.n	8002db8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e24e      	b.n	80031aa <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d14:	d106      	bne.n	8002d24 <HAL_RCC_OscConfig+0x74>
 8002d16:	4b76      	ldr	r3, [pc, #472]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a75      	ldr	r2, [pc, #468]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	e01d      	b.n	8002d60 <HAL_RCC_OscConfig+0xb0>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x98>
 8002d2e:	4b70      	ldr	r3, [pc, #448]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a6f      	ldr	r2, [pc, #444]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	4b6d      	ldr	r3, [pc, #436]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a6c      	ldr	r2, [pc, #432]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	e00b      	b.n	8002d60 <HAL_RCC_OscConfig+0xb0>
 8002d48:	4b69      	ldr	r3, [pc, #420]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a68      	ldr	r2, [pc, #416]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	4b66      	ldr	r3, [pc, #408]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a65      	ldr	r2, [pc, #404]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d013      	beq.n	8002d90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7ff faac 	bl	80022c4 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d70:	f7ff faa8 	bl	80022c4 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	; 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e213      	b.n	80031aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	4b5b      	ldr	r3, [pc, #364]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0xc0>
 8002d8e:	e014      	b.n	8002dba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d90:	f7ff fa98 	bl	80022c4 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d98:	f7ff fa94 	bl	80022c4 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b64      	cmp	r3, #100	; 0x64
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e1ff      	b.n	80031aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002daa:	4b51      	ldr	r3, [pc, #324]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0xe8>
 8002db6:	e000      	b.n	8002dba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d063      	beq.n	8002e8e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002dc6:	4b4a      	ldr	r3, [pc, #296]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00b      	beq.n	8002dea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd2:	4b47      	ldr	r3, [pc, #284]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d11c      	bne.n	8002e18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dde:	4b44      	ldr	r3, [pc, #272]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d116      	bne.n	8002e18 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dea:	4b41      	ldr	r3, [pc, #260]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_RCC_OscConfig+0x152>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d001      	beq.n	8002e02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e1d3      	b.n	80031aa <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e02:	4b3b      	ldr	r3, [pc, #236]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4937      	ldr	r1, [pc, #220]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e16:	e03a      	b.n	8002e8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d020      	beq.n	8002e62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e20:	4b34      	ldr	r3, [pc, #208]	; (8002ef4 <HAL_RCC_OscConfig+0x244>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e26:	f7ff fa4d 	bl	80022c4 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e2e:	f7ff fa49 	bl	80022c4 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e1b4      	b.n	80031aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e40:	4b2b      	ldr	r3, [pc, #172]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4c:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4925      	ldr	r1, [pc, #148]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	600b      	str	r3, [r1, #0]
 8002e60:	e015      	b.n	8002e8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e62:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <HAL_RCC_OscConfig+0x244>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7ff fa2c 	bl	80022c4 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e70:	f7ff fa28 	bl	80022c4 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e193      	b.n	80031aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e82:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d036      	beq.n	8002f08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d016      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <HAL_RCC_OscConfig+0x248>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea8:	f7ff fa0c 	bl	80022c4 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb0:	f7ff fa08 	bl	80022c4 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e173      	b.n	80031aa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x200>
 8002ece:	e01b      	b.n	8002f08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed0:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_RCC_OscConfig+0x248>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed6:	f7ff f9f5 	bl	80022c4 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002edc:	e00e      	b.n	8002efc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ede:	f7ff f9f1 	bl	80022c4 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d907      	bls.n	8002efc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e15c      	b.n	80031aa <HAL_RCC_OscConfig+0x4fa>
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	42470000 	.word	0x42470000
 8002ef8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efc:	4b8a      	ldr	r3, [pc, #552]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 8002efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1ea      	bne.n	8002ede <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 8097 	beq.w	8003044 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1a:	4b83      	ldr	r3, [pc, #524]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10f      	bne.n	8002f46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	4b7f      	ldr	r3, [pc, #508]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	4a7e      	ldr	r2, [pc, #504]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 8002f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f34:	6413      	str	r3, [r2, #64]	; 0x40
 8002f36:	4b7c      	ldr	r3, [pc, #496]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f42:	2301      	movs	r3, #1
 8002f44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f46:	4b79      	ldr	r3, [pc, #484]	; (800312c <HAL_RCC_OscConfig+0x47c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d118      	bne.n	8002f84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f52:	4b76      	ldr	r3, [pc, #472]	; (800312c <HAL_RCC_OscConfig+0x47c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a75      	ldr	r2, [pc, #468]	; (800312c <HAL_RCC_OscConfig+0x47c>)
 8002f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5e:	f7ff f9b1 	bl	80022c4 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f66:	f7ff f9ad 	bl	80022c4 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e118      	b.n	80031aa <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f78:	4b6c      	ldr	r3, [pc, #432]	; (800312c <HAL_RCC_OscConfig+0x47c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d106      	bne.n	8002f9a <HAL_RCC_OscConfig+0x2ea>
 8002f8c:	4b66      	ldr	r3, [pc, #408]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	4a65      	ldr	r2, [pc, #404]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	6713      	str	r3, [r2, #112]	; 0x70
 8002f98:	e01c      	b.n	8002fd4 <HAL_RCC_OscConfig+0x324>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b05      	cmp	r3, #5
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x30c>
 8002fa2:	4b61      	ldr	r3, [pc, #388]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa6:	4a60      	ldr	r2, [pc, #384]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 8002fa8:	f043 0304 	orr.w	r3, r3, #4
 8002fac:	6713      	str	r3, [r2, #112]	; 0x70
 8002fae:	4b5e      	ldr	r3, [pc, #376]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	4a5d      	ldr	r2, [pc, #372]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCC_OscConfig+0x324>
 8002fbc:	4b5a      	ldr	r3, [pc, #360]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	4a59      	ldr	r2, [pc, #356]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 8002fc2:	f023 0301 	bic.w	r3, r3, #1
 8002fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc8:	4b57      	ldr	r3, [pc, #348]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	4a56      	ldr	r2, [pc, #344]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 8002fce:	f023 0304 	bic.w	r3, r3, #4
 8002fd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d015      	beq.n	8003008 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fdc:	f7ff f972 	bl	80022c4 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe2:	e00a      	b.n	8002ffa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe4:	f7ff f96e 	bl	80022c4 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e0d7      	b.n	80031aa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffa:	4b4b      	ldr	r3, [pc, #300]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0ee      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x334>
 8003006:	e014      	b.n	8003032 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003008:	f7ff f95c 	bl	80022c4 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300e:	e00a      	b.n	8003026 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003010:	f7ff f958 	bl	80022c4 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	; 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e0c1      	b.n	80031aa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003026:	4b40      	ldr	r3, [pc, #256]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 8003028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1ee      	bne.n	8003010 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003032:	7dfb      	ldrb	r3, [r7, #23]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d105      	bne.n	8003044 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003038:	4b3b      	ldr	r3, [pc, #236]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	4a3a      	ldr	r2, [pc, #232]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 800303e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003042:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 80ad 	beq.w	80031a8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800304e:	4b36      	ldr	r3, [pc, #216]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b08      	cmp	r3, #8
 8003058:	d060      	beq.n	800311c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d145      	bne.n	80030ee <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003062:	4b33      	ldr	r3, [pc, #204]	; (8003130 <HAL_RCC_OscConfig+0x480>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7ff f92c 	bl	80022c4 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003070:	f7ff f928 	bl	80022c4 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e093      	b.n	80031aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003082:	4b29      	ldr	r3, [pc, #164]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69da      	ldr	r2, [r3, #28]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	019b      	lsls	r3, r3, #6
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	085b      	lsrs	r3, r3, #1
 80030a6:	3b01      	subs	r3, #1
 80030a8:	041b      	lsls	r3, r3, #16
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	061b      	lsls	r3, r3, #24
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	071b      	lsls	r3, r3, #28
 80030ba:	491b      	ldr	r1, [pc, #108]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c0:	4b1b      	ldr	r3, [pc, #108]	; (8003130 <HAL_RCC_OscConfig+0x480>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c6:	f7ff f8fd 	bl	80022c4 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ce:	f7ff f8f9 	bl	80022c4 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e064      	b.n	80031aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e0:	4b11      	ldr	r3, [pc, #68]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_OscConfig+0x41e>
 80030ec:	e05c      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ee:	4b10      	ldr	r3, [pc, #64]	; (8003130 <HAL_RCC_OscConfig+0x480>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7ff f8e6 	bl	80022c4 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030fc:	f7ff f8e2 	bl	80022c4 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e04d      	b.n	80031aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310e:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x44c>
 800311a:	e045      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d107      	bne.n	8003134 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e040      	b.n	80031aa <HAL_RCC_OscConfig+0x4fa>
 8003128:	40023800 	.word	0x40023800
 800312c:	40007000 	.word	0x40007000
 8003130:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003134:	4b1f      	ldr	r3, [pc, #124]	; (80031b4 <HAL_RCC_OscConfig+0x504>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d030      	beq.n	80031a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800314c:	429a      	cmp	r2, r3
 800314e:	d129      	bne.n	80031a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315a:	429a      	cmp	r2, r3
 800315c:	d122      	bne.n	80031a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003164:	4013      	ands	r3, r2
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800316a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800316c:	4293      	cmp	r3, r2
 800316e:	d119      	bne.n	80031a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	3b01      	subs	r3, #1
 800317e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003180:	429a      	cmp	r2, r3
 8003182:	d10f      	bne.n	80031a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d107      	bne.n	80031a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800

080031b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e07b      	b.n	80032c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d108      	bne.n	80031e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031da:	d009      	beq.n	80031f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	61da      	str	r2, [r3, #28]
 80031e2:	e005      	b.n	80031f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fe fec8 	bl	8001fa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003226:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003260:	431a      	orrs	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003274:	ea42 0103 	orr.w	r1, r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	0c1b      	lsrs	r3, r3, #16
 800328e:	f003 0104 	and.w	r1, r3, #4
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	f003 0210 	and.w	r2, r3, #16
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69da      	ldr	r2, [r3, #28]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b088      	sub	sp, #32
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	603b      	str	r3, [r7, #0]
 80032d6:	4613      	mov	r3, r2
 80032d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_SPI_Transmit+0x22>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e126      	b.n	800353a <HAL_SPI_Transmit+0x270>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032f4:	f7fe ffe6 	bl	80022c4 <HAL_GetTick>
 80032f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032fa:	88fb      	ldrh	r3, [r7, #6]
 80032fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b01      	cmp	r3, #1
 8003308:	d002      	beq.n	8003310 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800330a:	2302      	movs	r3, #2
 800330c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800330e:	e10b      	b.n	8003528 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <HAL_SPI_Transmit+0x52>
 8003316:	88fb      	ldrh	r3, [r7, #6]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d102      	bne.n	8003322 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003320:	e102      	b.n	8003528 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2203      	movs	r2, #3
 8003326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	88fa      	ldrh	r2, [r7, #6]
 800333a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	88fa      	ldrh	r2, [r7, #6]
 8003340:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003368:	d10f      	bne.n	800338a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003378:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003388:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003394:	2b40      	cmp	r3, #64	; 0x40
 8003396:	d007      	beq.n	80033a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b0:	d14b      	bne.n	800344a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <HAL_SPI_Transmit+0xf6>
 80033ba:	8afb      	ldrh	r3, [r7, #22]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d13e      	bne.n	800343e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	881a      	ldrh	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	1c9a      	adds	r2, r3, #2
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033e4:	e02b      	b.n	800343e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d112      	bne.n	800341a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	881a      	ldrh	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	1c9a      	adds	r2, r3, #2
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	86da      	strh	r2, [r3, #54]	; 0x36
 8003418:	e011      	b.n	800343e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800341a:	f7fe ff53 	bl	80022c4 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d803      	bhi.n	8003432 <HAL_SPI_Transmit+0x168>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003430:	d102      	bne.n	8003438 <HAL_SPI_Transmit+0x16e>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d102      	bne.n	800343e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800343c:	e074      	b.n	8003528 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003442:	b29b      	uxth	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1ce      	bne.n	80033e6 <HAL_SPI_Transmit+0x11c>
 8003448:	e04c      	b.n	80034e4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <HAL_SPI_Transmit+0x18e>
 8003452:	8afb      	ldrh	r3, [r7, #22]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d140      	bne.n	80034da <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	330c      	adds	r3, #12
 8003462:	7812      	ldrb	r2, [r2, #0]
 8003464:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800347e:	e02c      	b.n	80034da <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b02      	cmp	r3, #2
 800348c:	d113      	bne.n	80034b6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	330c      	adds	r3, #12
 8003498:	7812      	ldrb	r2, [r2, #0]
 800349a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80034b4:	e011      	b.n	80034da <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034b6:	f7fe ff05 	bl	80022c4 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d803      	bhi.n	80034ce <HAL_SPI_Transmit+0x204>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034cc:	d102      	bne.n	80034d4 <HAL_SPI_Transmit+0x20a>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d102      	bne.n	80034da <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034d8:	e026      	b.n	8003528 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1cd      	bne.n	8003480 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	6839      	ldr	r1, [r7, #0]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 fbcb 	bl	8003c84 <SPI_EndRxTxTransaction>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2220      	movs	r2, #32
 80034f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10a      	bne.n	8003518 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003502:	2300      	movs	r3, #0
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	77fb      	strb	r3, [r7, #31]
 8003524:	e000      	b.n	8003528 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003526:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003538:	7ffb      	ldrb	r3, [r7, #31]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b088      	sub	sp, #32
 8003546:	af02      	add	r7, sp, #8
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	603b      	str	r3, [r7, #0]
 800354e:	4613      	mov	r3, r2
 8003550:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800355e:	d112      	bne.n	8003586 <HAL_SPI_Receive+0x44>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10e      	bne.n	8003586 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2204      	movs	r2, #4
 800356c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003570:	88fa      	ldrh	r2, [r7, #6]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	4613      	mov	r3, r2
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	68b9      	ldr	r1, [r7, #8]
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f8f1 	bl	8003764 <HAL_SPI_TransmitReceive>
 8003582:	4603      	mov	r3, r0
 8003584:	e0ea      	b.n	800375c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_SPI_Receive+0x52>
 8003590:	2302      	movs	r3, #2
 8003592:	e0e3      	b.n	800375c <HAL_SPI_Receive+0x21a>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800359c:	f7fe fe92 	bl	80022c4 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d002      	beq.n	80035b4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80035ae:	2302      	movs	r3, #2
 80035b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035b2:	e0ca      	b.n	800374a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_SPI_Receive+0x7e>
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d102      	bne.n	80035c6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035c4:	e0c1      	b.n	800374a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2204      	movs	r2, #4
 80035ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	88fa      	ldrh	r2, [r7, #6]
 80035de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	88fa      	ldrh	r2, [r7, #6]
 80035e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800360c:	d10f      	bne.n	800362e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800361c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800362c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003638:	2b40      	cmp	r3, #64	; 0x40
 800363a:	d007      	beq.n	800364c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800364a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d162      	bne.n	800371a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003654:	e02e      	b.n	80036b4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b01      	cmp	r3, #1
 8003662:	d115      	bne.n	8003690 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f103 020c 	add.w	r2, r3, #12
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003670:	7812      	ldrb	r2, [r2, #0]
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b01      	subs	r3, #1
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800368e:	e011      	b.n	80036b4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003690:	f7fe fe18 	bl	80022c4 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d803      	bhi.n	80036a8 <HAL_SPI_Receive+0x166>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a6:	d102      	bne.n	80036ae <HAL_SPI_Receive+0x16c>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d102      	bne.n	80036b4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036b2:	e04a      	b.n	800374a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1cb      	bne.n	8003656 <HAL_SPI_Receive+0x114>
 80036be:	e031      	b.n	8003724 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d113      	bne.n	80036f6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	b292      	uxth	r2, r2
 80036da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	1c9a      	adds	r2, r3, #2
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036f4:	e011      	b.n	800371a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036f6:	f7fe fde5 	bl	80022c4 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d803      	bhi.n	800370e <HAL_SPI_Receive+0x1cc>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370c:	d102      	bne.n	8003714 <HAL_SPI_Receive+0x1d2>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d102      	bne.n	800371a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003718:	e017      	b.n	800374a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1cd      	bne.n	80036c0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	6839      	ldr	r1, [r7, #0]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 fa45 	bl	8003bb8 <SPI_EndRxTransaction>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	75fb      	strb	r3, [r7, #23]
 8003746:	e000      	b.n	800374a <HAL_SPI_Receive+0x208>
  }

error :
 8003748:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800375a:	7dfb      	ldrb	r3, [r7, #23]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08c      	sub	sp, #48	; 0x30
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
 8003770:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003772:	2301      	movs	r3, #1
 8003774:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_SPI_TransmitReceive+0x26>
 8003786:	2302      	movs	r3, #2
 8003788:	e18a      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x33c>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003792:	f7fe fd97 	bl	80022c4 <HAL_GetTick>
 8003796:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800379e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80037a8:	887b      	ldrh	r3, [r7, #2]
 80037aa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d00f      	beq.n	80037d4 <HAL_SPI_TransmitReceive+0x70>
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ba:	d107      	bne.n	80037cc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d103      	bne.n	80037cc <HAL_SPI_TransmitReceive+0x68>
 80037c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	d003      	beq.n	80037d4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80037cc:	2302      	movs	r3, #2
 80037ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037d2:	e15b      	b.n	8003a8c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <HAL_SPI_TransmitReceive+0x82>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_SPI_TransmitReceive+0x82>
 80037e0:	887b      	ldrh	r3, [r7, #2]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d103      	bne.n	80037ee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037ec:	e14e      	b.n	8003a8c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d003      	beq.n	8003802 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2205      	movs	r2, #5
 80037fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	887a      	ldrh	r2, [r7, #2]
 8003812:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	887a      	ldrh	r2, [r7, #2]
 8003818:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	887a      	ldrh	r2, [r7, #2]
 8003824:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	887a      	ldrh	r2, [r7, #2]
 800382a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003842:	2b40      	cmp	r3, #64	; 0x40
 8003844:	d007      	beq.n	8003856 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003854:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800385e:	d178      	bne.n	8003952 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_SPI_TransmitReceive+0x10a>
 8003868:	8b7b      	ldrh	r3, [r7, #26]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d166      	bne.n	800393c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	881a      	ldrh	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	1c9a      	adds	r2, r3, #2
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003892:	e053      	b.n	800393c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d11b      	bne.n	80038da <HAL_SPI_TransmitReceive+0x176>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d016      	beq.n	80038da <HAL_SPI_TransmitReceive+0x176>
 80038ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d113      	bne.n	80038da <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	881a      	ldrh	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	1c9a      	adds	r2, r3, #2
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d119      	bne.n	800391c <HAL_SPI_TransmitReceive+0x1b8>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d014      	beq.n	800391c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fc:	b292      	uxth	r2, r2
 80038fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	1c9a      	adds	r2, r3, #2
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003918:	2301      	movs	r3, #1
 800391a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800391c:	f7fe fcd2 	bl	80022c4 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003928:	429a      	cmp	r2, r3
 800392a:	d807      	bhi.n	800393c <HAL_SPI_TransmitReceive+0x1d8>
 800392c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003932:	d003      	beq.n	800393c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800393a:	e0a7      	b.n	8003a8c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1a6      	bne.n	8003894 <HAL_SPI_TransmitReceive+0x130>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1a1      	bne.n	8003894 <HAL_SPI_TransmitReceive+0x130>
 8003950:	e07c      	b.n	8003a4c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <HAL_SPI_TransmitReceive+0x1fc>
 800395a:	8b7b      	ldrh	r3, [r7, #26]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d16b      	bne.n	8003a38 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	330c      	adds	r3, #12
 800396a:	7812      	ldrb	r2, [r2, #0]
 800396c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003986:	e057      	b.n	8003a38 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b02      	cmp	r3, #2
 8003994:	d11c      	bne.n	80039d0 <HAL_SPI_TransmitReceive+0x26c>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d017      	beq.n	80039d0 <HAL_SPI_TransmitReceive+0x26c>
 80039a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d114      	bne.n	80039d0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	330c      	adds	r3, #12
 80039b0:	7812      	ldrb	r2, [r2, #0]
 80039b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d119      	bne.n	8003a12 <HAL_SPI_TransmitReceive+0x2ae>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d014      	beq.n	8003a12 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	3b01      	subs	r3, #1
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a12:	f7fe fc57 	bl	80022c4 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d803      	bhi.n	8003a2a <HAL_SPI_TransmitReceive+0x2c6>
 8003a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a28:	d102      	bne.n	8003a30 <HAL_SPI_TransmitReceive+0x2cc>
 8003a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d103      	bne.n	8003a38 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a36:	e029      	b.n	8003a8c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1a2      	bne.n	8003988 <HAL_SPI_TransmitReceive+0x224>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d19d      	bne.n	8003988 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f917 	bl	8003c84 <SPI_EndRxTxTransaction>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d006      	beq.n	8003a6a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a68:	e010      	b.n	8003a8c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10b      	bne.n	8003a8a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	e000      	b.n	8003a8c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3730      	adds	r7, #48	; 0x30
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ab8:	f7fe fc04 	bl	80022c4 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ac8:	f7fe fbfc 	bl	80022c4 <HAL_GetTick>
 8003acc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ace:	4b39      	ldr	r3, [pc, #228]	; (8003bb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	015b      	lsls	r3, r3, #5
 8003ad4:	0d1b      	lsrs	r3, r3, #20
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	fb02 f303 	mul.w	r3, r2, r3
 8003adc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ade:	e054      	b.n	8003b8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae6:	d050      	beq.n	8003b8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ae8:	f7fe fbec 	bl	80022c4 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	69fa      	ldr	r2, [r7, #28]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d902      	bls.n	8003afe <SPI_WaitFlagStateUntilTimeout+0x56>
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d13d      	bne.n	8003b7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b16:	d111      	bne.n	8003b3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b20:	d004      	beq.n	8003b2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2a:	d107      	bne.n	8003b3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b44:	d10f      	bne.n	8003b66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e017      	b.n	8003baa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4013      	ands	r3, r2
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	bf0c      	ite	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	2300      	movne	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d19b      	bne.n	8003ae0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3720      	adds	r7, #32
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000010 	.word	0x20000010

08003bb8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af02      	add	r7, sp, #8
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bcc:	d111      	bne.n	8003bf2 <SPI_EndRxTransaction+0x3a>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd6:	d004      	beq.n	8003be2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be0:	d107      	bne.n	8003bf2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bfa:	d12a      	bne.n	8003c52 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c04:	d012      	beq.n	8003c2c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2180      	movs	r1, #128	; 0x80
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f7ff ff49 	bl	8003aa8 <SPI_WaitFlagStateUntilTimeout>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d02d      	beq.n	8003c78 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c20:	f043 0220 	orr.w	r2, r3, #32
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e026      	b.n	8003c7a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2200      	movs	r2, #0
 8003c34:	2101      	movs	r1, #1
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f7ff ff36 	bl	8003aa8 <SPI_WaitFlagStateUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d01a      	beq.n	8003c78 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c46:	f043 0220 	orr.w	r2, r3, #32
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e013      	b.n	8003c7a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f7ff ff23 	bl	8003aa8 <SPI_WaitFlagStateUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d007      	beq.n	8003c78 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6c:	f043 0220 	orr.w	r2, r3, #32
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e000      	b.n	8003c7a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c90:	4b1b      	ldr	r3, [pc, #108]	; (8003d00 <SPI_EndRxTxTransaction+0x7c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a1b      	ldr	r2, [pc, #108]	; (8003d04 <SPI_EndRxTxTransaction+0x80>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	0d5b      	lsrs	r3, r3, #21
 8003c9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ca0:	fb02 f303 	mul.w	r3, r2, r3
 8003ca4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cae:	d112      	bne.n	8003cd6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2180      	movs	r1, #128	; 0x80
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f7ff fef4 	bl	8003aa8 <SPI_WaitFlagStateUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d016      	beq.n	8003cf4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cca:	f043 0220 	orr.w	r2, r3, #32
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e00f      	b.n	8003cf6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cec:	2b80      	cmp	r3, #128	; 0x80
 8003cee:	d0f2      	beq.n	8003cd6 <SPI_EndRxTxTransaction+0x52>
 8003cf0:	e000      	b.n	8003cf4 <SPI_EndRxTxTransaction+0x70>
        break;
 8003cf2:	bf00      	nop
  }

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000010 	.word	0x20000010
 8003d04:	165e9f81 	.word	0x165e9f81

08003d08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e03f      	b.n	8003d9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fe f97e 	bl	8002030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2224      	movs	r2, #36	; 0x24
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f929 	bl	8003fa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691a      	ldr	r2, [r3, #16]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695a      	ldr	r2, [r3, #20]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b08a      	sub	sp, #40	; 0x28
 8003da6:	af02      	add	r7, sp, #8
 8003da8:	60f8      	str	r0, [r7, #12]
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	603b      	str	r3, [r7, #0]
 8003dae:	4613      	mov	r3, r2
 8003db0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d17c      	bne.n	8003ebc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <HAL_UART_Transmit+0x2c>
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e075      	b.n	8003ebe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_UART_Transmit+0x3e>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e06e      	b.n	8003ebe <HAL_UART_Transmit+0x11c>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2221      	movs	r2, #33	; 0x21
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003df6:	f7fe fa65 	bl	80022c4 <HAL_GetTick>
 8003dfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	88fa      	ldrh	r2, [r7, #6]
 8003e00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	88fa      	ldrh	r2, [r7, #6]
 8003e06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e10:	d108      	bne.n	8003e24 <HAL_UART_Transmit+0x82>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d104      	bne.n	8003e24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	e003      	b.n	8003e2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e34:	e02a      	b.n	8003e8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2180      	movs	r1, #128	; 0x80
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f840 	bl	8003ec6 <UART_WaitOnFlagUntilTimeout>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e036      	b.n	8003ebe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10b      	bne.n	8003e6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	3302      	adds	r3, #2
 8003e6a:	61bb      	str	r3, [r7, #24]
 8003e6c:	e007      	b.n	8003e7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	781a      	ldrb	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1cf      	bne.n	8003e36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2140      	movs	r1, #64	; 0x40
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 f810 	bl	8003ec6 <UART_WaitOnFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e006      	b.n	8003ebe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	e000      	b.n	8003ebe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ebc:	2302      	movs	r3, #2
  }
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3720      	adds	r7, #32
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b090      	sub	sp, #64	; 0x40
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed6:	e050      	b.n	8003f7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ede:	d04c      	beq.n	8003f7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ee6:	f7fe f9ed 	bl	80022c4 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d241      	bcs.n	8003f7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	330c      	adds	r3, #12
 8003efc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	330c      	adds	r3, #12
 8003f14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f16:	637a      	str	r2, [r7, #52]	; 0x34
 8003f18:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e5      	bne.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3314      	adds	r3, #20
 8003f30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	613b      	str	r3, [r7, #16]
   return(result);
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f023 0301 	bic.w	r3, r3, #1
 8003f40:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3314      	adds	r3, #20
 8003f48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f4a:	623a      	str	r2, [r7, #32]
 8003f4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	69f9      	ldr	r1, [r7, #28]
 8003f50:	6a3a      	ldr	r2, [r7, #32]
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e5      	bne.n	8003f2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e00f      	b.n	8003f9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4013      	ands	r3, r2
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	bf0c      	ite	eq
 8003f8a:	2301      	moveq	r3, #1
 8003f8c:	2300      	movne	r3, #0
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d09f      	beq.n	8003ed8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3740      	adds	r7, #64	; 0x40
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fa8:	b0c0      	sub	sp, #256	; 0x100
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc0:	68d9      	ldr	r1, [r3, #12]
 8003fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	ea40 0301 	orr.w	r3, r0, r1
 8003fcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ffc:	f021 010c 	bic.w	r1, r1, #12
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800400a:	430b      	orrs	r3, r1
 800400c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800400e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800401a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401e:	6999      	ldr	r1, [r3, #24]
 8004020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	ea40 0301 	orr.w	r3, r0, r1
 800402a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	4b8f      	ldr	r3, [pc, #572]	; (8004270 <UART_SetConfig+0x2cc>)
 8004034:	429a      	cmp	r2, r3
 8004036:	d005      	beq.n	8004044 <UART_SetConfig+0xa0>
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	4b8d      	ldr	r3, [pc, #564]	; (8004274 <UART_SetConfig+0x2d0>)
 8004040:	429a      	cmp	r2, r3
 8004042:	d104      	bne.n	800404e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004044:	f7fe fe20 	bl	8002c88 <HAL_RCC_GetPCLK2Freq>
 8004048:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800404c:	e003      	b.n	8004056 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800404e:	f7fe fe07 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 8004052:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004060:	f040 810c 	bne.w	800427c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004068:	2200      	movs	r2, #0
 800406a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800406e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004072:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004076:	4622      	mov	r2, r4
 8004078:	462b      	mov	r3, r5
 800407a:	1891      	adds	r1, r2, r2
 800407c:	65b9      	str	r1, [r7, #88]	; 0x58
 800407e:	415b      	adcs	r3, r3
 8004080:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004082:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004086:	4621      	mov	r1, r4
 8004088:	eb12 0801 	adds.w	r8, r2, r1
 800408c:	4629      	mov	r1, r5
 800408e:	eb43 0901 	adc.w	r9, r3, r1
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800409e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040a6:	4690      	mov	r8, r2
 80040a8:	4699      	mov	r9, r3
 80040aa:	4623      	mov	r3, r4
 80040ac:	eb18 0303 	adds.w	r3, r8, r3
 80040b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040b4:	462b      	mov	r3, r5
 80040b6:	eb49 0303 	adc.w	r3, r9, r3
 80040ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040d2:	460b      	mov	r3, r1
 80040d4:	18db      	adds	r3, r3, r3
 80040d6:	653b      	str	r3, [r7, #80]	; 0x50
 80040d8:	4613      	mov	r3, r2
 80040da:	eb42 0303 	adc.w	r3, r2, r3
 80040de:	657b      	str	r3, [r7, #84]	; 0x54
 80040e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040e8:	f7fc f8fa 	bl	80002e0 <__aeabi_uldivmod>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4b61      	ldr	r3, [pc, #388]	; (8004278 <UART_SetConfig+0x2d4>)
 80040f2:	fba3 2302 	umull	r2, r3, r3, r2
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	011c      	lsls	r4, r3, #4
 80040fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040fe:	2200      	movs	r2, #0
 8004100:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004104:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004108:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800410c:	4642      	mov	r2, r8
 800410e:	464b      	mov	r3, r9
 8004110:	1891      	adds	r1, r2, r2
 8004112:	64b9      	str	r1, [r7, #72]	; 0x48
 8004114:	415b      	adcs	r3, r3
 8004116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004118:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800411c:	4641      	mov	r1, r8
 800411e:	eb12 0a01 	adds.w	sl, r2, r1
 8004122:	4649      	mov	r1, r9
 8004124:	eb43 0b01 	adc.w	fp, r3, r1
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004134:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004138:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800413c:	4692      	mov	sl, r2
 800413e:	469b      	mov	fp, r3
 8004140:	4643      	mov	r3, r8
 8004142:	eb1a 0303 	adds.w	r3, sl, r3
 8004146:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800414a:	464b      	mov	r3, r9
 800414c:	eb4b 0303 	adc.w	r3, fp, r3
 8004150:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004160:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004164:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004168:	460b      	mov	r3, r1
 800416a:	18db      	adds	r3, r3, r3
 800416c:	643b      	str	r3, [r7, #64]	; 0x40
 800416e:	4613      	mov	r3, r2
 8004170:	eb42 0303 	adc.w	r3, r2, r3
 8004174:	647b      	str	r3, [r7, #68]	; 0x44
 8004176:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800417a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800417e:	f7fc f8af 	bl	80002e0 <__aeabi_uldivmod>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4611      	mov	r1, r2
 8004188:	4b3b      	ldr	r3, [pc, #236]	; (8004278 <UART_SetConfig+0x2d4>)
 800418a:	fba3 2301 	umull	r2, r3, r3, r1
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	2264      	movs	r2, #100	; 0x64
 8004192:	fb02 f303 	mul.w	r3, r2, r3
 8004196:	1acb      	subs	r3, r1, r3
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800419e:	4b36      	ldr	r3, [pc, #216]	; (8004278 <UART_SetConfig+0x2d4>)
 80041a0:	fba3 2302 	umull	r2, r3, r3, r2
 80041a4:	095b      	lsrs	r3, r3, #5
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041ac:	441c      	add	r4, r3
 80041ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041b2:	2200      	movs	r2, #0
 80041b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80041bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041c0:	4642      	mov	r2, r8
 80041c2:	464b      	mov	r3, r9
 80041c4:	1891      	adds	r1, r2, r2
 80041c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80041c8:	415b      	adcs	r3, r3
 80041ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041d0:	4641      	mov	r1, r8
 80041d2:	1851      	adds	r1, r2, r1
 80041d4:	6339      	str	r1, [r7, #48]	; 0x30
 80041d6:	4649      	mov	r1, r9
 80041d8:	414b      	adcs	r3, r1
 80041da:	637b      	str	r3, [r7, #52]	; 0x34
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041e8:	4659      	mov	r1, fp
 80041ea:	00cb      	lsls	r3, r1, #3
 80041ec:	4651      	mov	r1, sl
 80041ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041f2:	4651      	mov	r1, sl
 80041f4:	00ca      	lsls	r2, r1, #3
 80041f6:	4610      	mov	r0, r2
 80041f8:	4619      	mov	r1, r3
 80041fa:	4603      	mov	r3, r0
 80041fc:	4642      	mov	r2, r8
 80041fe:	189b      	adds	r3, r3, r2
 8004200:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004204:	464b      	mov	r3, r9
 8004206:	460a      	mov	r2, r1
 8004208:	eb42 0303 	adc.w	r3, r2, r3
 800420c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800421c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004220:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004224:	460b      	mov	r3, r1
 8004226:	18db      	adds	r3, r3, r3
 8004228:	62bb      	str	r3, [r7, #40]	; 0x28
 800422a:	4613      	mov	r3, r2
 800422c:	eb42 0303 	adc.w	r3, r2, r3
 8004230:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004232:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004236:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800423a:	f7fc f851 	bl	80002e0 <__aeabi_uldivmod>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4b0d      	ldr	r3, [pc, #52]	; (8004278 <UART_SetConfig+0x2d4>)
 8004244:	fba3 1302 	umull	r1, r3, r3, r2
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	2164      	movs	r1, #100	; 0x64
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	3332      	adds	r3, #50	; 0x32
 8004256:	4a08      	ldr	r2, [pc, #32]	; (8004278 <UART_SetConfig+0x2d4>)
 8004258:	fba2 2303 	umull	r2, r3, r2, r3
 800425c:	095b      	lsrs	r3, r3, #5
 800425e:	f003 0207 	and.w	r2, r3, #7
 8004262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4422      	add	r2, r4
 800426a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800426c:	e105      	b.n	800447a <UART_SetConfig+0x4d6>
 800426e:	bf00      	nop
 8004270:	40011000 	.word	0x40011000
 8004274:	40011400 	.word	0x40011400
 8004278:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800427c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004280:	2200      	movs	r2, #0
 8004282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004286:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800428a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800428e:	4642      	mov	r2, r8
 8004290:	464b      	mov	r3, r9
 8004292:	1891      	adds	r1, r2, r2
 8004294:	6239      	str	r1, [r7, #32]
 8004296:	415b      	adcs	r3, r3
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
 800429a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800429e:	4641      	mov	r1, r8
 80042a0:	1854      	adds	r4, r2, r1
 80042a2:	4649      	mov	r1, r9
 80042a4:	eb43 0501 	adc.w	r5, r3, r1
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	00eb      	lsls	r3, r5, #3
 80042b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042b6:	00e2      	lsls	r2, r4, #3
 80042b8:	4614      	mov	r4, r2
 80042ba:	461d      	mov	r5, r3
 80042bc:	4643      	mov	r3, r8
 80042be:	18e3      	adds	r3, r4, r3
 80042c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042c4:	464b      	mov	r3, r9
 80042c6:	eb45 0303 	adc.w	r3, r5, r3
 80042ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042ea:	4629      	mov	r1, r5
 80042ec:	008b      	lsls	r3, r1, #2
 80042ee:	4621      	mov	r1, r4
 80042f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042f4:	4621      	mov	r1, r4
 80042f6:	008a      	lsls	r2, r1, #2
 80042f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042fc:	f7fb fff0 	bl	80002e0 <__aeabi_uldivmod>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4b60      	ldr	r3, [pc, #384]	; (8004488 <UART_SetConfig+0x4e4>)
 8004306:	fba3 2302 	umull	r2, r3, r3, r2
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	011c      	lsls	r4, r3, #4
 800430e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004312:	2200      	movs	r2, #0
 8004314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004318:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800431c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004320:	4642      	mov	r2, r8
 8004322:	464b      	mov	r3, r9
 8004324:	1891      	adds	r1, r2, r2
 8004326:	61b9      	str	r1, [r7, #24]
 8004328:	415b      	adcs	r3, r3
 800432a:	61fb      	str	r3, [r7, #28]
 800432c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004330:	4641      	mov	r1, r8
 8004332:	1851      	adds	r1, r2, r1
 8004334:	6139      	str	r1, [r7, #16]
 8004336:	4649      	mov	r1, r9
 8004338:	414b      	adcs	r3, r1
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004348:	4659      	mov	r1, fp
 800434a:	00cb      	lsls	r3, r1, #3
 800434c:	4651      	mov	r1, sl
 800434e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004352:	4651      	mov	r1, sl
 8004354:	00ca      	lsls	r2, r1, #3
 8004356:	4610      	mov	r0, r2
 8004358:	4619      	mov	r1, r3
 800435a:	4603      	mov	r3, r0
 800435c:	4642      	mov	r2, r8
 800435e:	189b      	adds	r3, r3, r2
 8004360:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004364:	464b      	mov	r3, r9
 8004366:	460a      	mov	r2, r1
 8004368:	eb42 0303 	adc.w	r3, r2, r3
 800436c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	67bb      	str	r3, [r7, #120]	; 0x78
 800437a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004388:	4649      	mov	r1, r9
 800438a:	008b      	lsls	r3, r1, #2
 800438c:	4641      	mov	r1, r8
 800438e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004392:	4641      	mov	r1, r8
 8004394:	008a      	lsls	r2, r1, #2
 8004396:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800439a:	f7fb ffa1 	bl	80002e0 <__aeabi_uldivmod>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4b39      	ldr	r3, [pc, #228]	; (8004488 <UART_SetConfig+0x4e4>)
 80043a4:	fba3 1302 	umull	r1, r3, r3, r2
 80043a8:	095b      	lsrs	r3, r3, #5
 80043aa:	2164      	movs	r1, #100	; 0x64
 80043ac:	fb01 f303 	mul.w	r3, r1, r3
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	3332      	adds	r3, #50	; 0x32
 80043b6:	4a34      	ldr	r2, [pc, #208]	; (8004488 <UART_SetConfig+0x4e4>)
 80043b8:	fba2 2303 	umull	r2, r3, r2, r3
 80043bc:	095b      	lsrs	r3, r3, #5
 80043be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043c2:	441c      	add	r4, r3
 80043c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043c8:	2200      	movs	r2, #0
 80043ca:	673b      	str	r3, [r7, #112]	; 0x70
 80043cc:	677a      	str	r2, [r7, #116]	; 0x74
 80043ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043d2:	4642      	mov	r2, r8
 80043d4:	464b      	mov	r3, r9
 80043d6:	1891      	adds	r1, r2, r2
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	415b      	adcs	r3, r3
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043e2:	4641      	mov	r1, r8
 80043e4:	1851      	adds	r1, r2, r1
 80043e6:	6039      	str	r1, [r7, #0]
 80043e8:	4649      	mov	r1, r9
 80043ea:	414b      	adcs	r3, r1
 80043ec:	607b      	str	r3, [r7, #4]
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043fa:	4659      	mov	r1, fp
 80043fc:	00cb      	lsls	r3, r1, #3
 80043fe:	4651      	mov	r1, sl
 8004400:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004404:	4651      	mov	r1, sl
 8004406:	00ca      	lsls	r2, r1, #3
 8004408:	4610      	mov	r0, r2
 800440a:	4619      	mov	r1, r3
 800440c:	4603      	mov	r3, r0
 800440e:	4642      	mov	r2, r8
 8004410:	189b      	adds	r3, r3, r2
 8004412:	66bb      	str	r3, [r7, #104]	; 0x68
 8004414:	464b      	mov	r3, r9
 8004416:	460a      	mov	r2, r1
 8004418:	eb42 0303 	adc.w	r3, r2, r3
 800441c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800441e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	663b      	str	r3, [r7, #96]	; 0x60
 8004428:	667a      	str	r2, [r7, #100]	; 0x64
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004436:	4649      	mov	r1, r9
 8004438:	008b      	lsls	r3, r1, #2
 800443a:	4641      	mov	r1, r8
 800443c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004440:	4641      	mov	r1, r8
 8004442:	008a      	lsls	r2, r1, #2
 8004444:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004448:	f7fb ff4a 	bl	80002e0 <__aeabi_uldivmod>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4b0d      	ldr	r3, [pc, #52]	; (8004488 <UART_SetConfig+0x4e4>)
 8004452:	fba3 1302 	umull	r1, r3, r3, r2
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	2164      	movs	r1, #100	; 0x64
 800445a:	fb01 f303 	mul.w	r3, r1, r3
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	3332      	adds	r3, #50	; 0x32
 8004464:	4a08      	ldr	r2, [pc, #32]	; (8004488 <UART_SetConfig+0x4e4>)
 8004466:	fba2 2303 	umull	r2, r3, r2, r3
 800446a:	095b      	lsrs	r3, r3, #5
 800446c:	f003 020f 	and.w	r2, r3, #15
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4422      	add	r2, r4
 8004478:	609a      	str	r2, [r3, #8]
}
 800447a:	bf00      	nop
 800447c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004480:	46bd      	mov	sp, r7
 8004482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004486:	bf00      	nop
 8004488:	51eb851f 	.word	0x51eb851f

0800448c <__errno>:
 800448c:	4b01      	ldr	r3, [pc, #4]	; (8004494 <__errno+0x8>)
 800448e:	6818      	ldr	r0, [r3, #0]
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	2000001c 	.word	0x2000001c

08004498 <__libc_init_array>:
 8004498:	b570      	push	{r4, r5, r6, lr}
 800449a:	4d0d      	ldr	r5, [pc, #52]	; (80044d0 <__libc_init_array+0x38>)
 800449c:	4c0d      	ldr	r4, [pc, #52]	; (80044d4 <__libc_init_array+0x3c>)
 800449e:	1b64      	subs	r4, r4, r5
 80044a0:	10a4      	asrs	r4, r4, #2
 80044a2:	2600      	movs	r6, #0
 80044a4:	42a6      	cmp	r6, r4
 80044a6:	d109      	bne.n	80044bc <__libc_init_array+0x24>
 80044a8:	4d0b      	ldr	r5, [pc, #44]	; (80044d8 <__libc_init_array+0x40>)
 80044aa:	4c0c      	ldr	r4, [pc, #48]	; (80044dc <__libc_init_array+0x44>)
 80044ac:	f000 fc8e 	bl	8004dcc <_init>
 80044b0:	1b64      	subs	r4, r4, r5
 80044b2:	10a4      	asrs	r4, r4, #2
 80044b4:	2600      	movs	r6, #0
 80044b6:	42a6      	cmp	r6, r4
 80044b8:	d105      	bne.n	80044c6 <__libc_init_array+0x2e>
 80044ba:	bd70      	pop	{r4, r5, r6, pc}
 80044bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c0:	4798      	blx	r3
 80044c2:	3601      	adds	r6, #1
 80044c4:	e7ee      	b.n	80044a4 <__libc_init_array+0xc>
 80044c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ca:	4798      	blx	r3
 80044cc:	3601      	adds	r6, #1
 80044ce:	e7f2      	b.n	80044b6 <__libc_init_array+0x1e>
 80044d0:	08005424 	.word	0x08005424
 80044d4:	08005424 	.word	0x08005424
 80044d8:	08005424 	.word	0x08005424
 80044dc:	08005428 	.word	0x08005428

080044e0 <memcpy>:
 80044e0:	440a      	add	r2, r1
 80044e2:	4291      	cmp	r1, r2
 80044e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80044e8:	d100      	bne.n	80044ec <memcpy+0xc>
 80044ea:	4770      	bx	lr
 80044ec:	b510      	push	{r4, lr}
 80044ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044f6:	4291      	cmp	r1, r2
 80044f8:	d1f9      	bne.n	80044ee <memcpy+0xe>
 80044fa:	bd10      	pop	{r4, pc}

080044fc <memset>:
 80044fc:	4402      	add	r2, r0
 80044fe:	4603      	mov	r3, r0
 8004500:	4293      	cmp	r3, r2
 8004502:	d100      	bne.n	8004506 <memset+0xa>
 8004504:	4770      	bx	lr
 8004506:	f803 1b01 	strb.w	r1, [r3], #1
 800450a:	e7f9      	b.n	8004500 <memset+0x4>

0800450c <siprintf>:
 800450c:	b40e      	push	{r1, r2, r3}
 800450e:	b500      	push	{lr}
 8004510:	b09c      	sub	sp, #112	; 0x70
 8004512:	ab1d      	add	r3, sp, #116	; 0x74
 8004514:	9002      	str	r0, [sp, #8]
 8004516:	9006      	str	r0, [sp, #24]
 8004518:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800451c:	4809      	ldr	r0, [pc, #36]	; (8004544 <siprintf+0x38>)
 800451e:	9107      	str	r1, [sp, #28]
 8004520:	9104      	str	r1, [sp, #16]
 8004522:	4909      	ldr	r1, [pc, #36]	; (8004548 <siprintf+0x3c>)
 8004524:	f853 2b04 	ldr.w	r2, [r3], #4
 8004528:	9105      	str	r1, [sp, #20]
 800452a:	6800      	ldr	r0, [r0, #0]
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	a902      	add	r1, sp, #8
 8004530:	f000 f868 	bl	8004604 <_svfiprintf_r>
 8004534:	9b02      	ldr	r3, [sp, #8]
 8004536:	2200      	movs	r2, #0
 8004538:	701a      	strb	r2, [r3, #0]
 800453a:	b01c      	add	sp, #112	; 0x70
 800453c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004540:	b003      	add	sp, #12
 8004542:	4770      	bx	lr
 8004544:	2000001c 	.word	0x2000001c
 8004548:	ffff0208 	.word	0xffff0208

0800454c <__ssputs_r>:
 800454c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004550:	688e      	ldr	r6, [r1, #8]
 8004552:	429e      	cmp	r6, r3
 8004554:	4682      	mov	sl, r0
 8004556:	460c      	mov	r4, r1
 8004558:	4690      	mov	r8, r2
 800455a:	461f      	mov	r7, r3
 800455c:	d838      	bhi.n	80045d0 <__ssputs_r+0x84>
 800455e:	898a      	ldrh	r2, [r1, #12]
 8004560:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004564:	d032      	beq.n	80045cc <__ssputs_r+0x80>
 8004566:	6825      	ldr	r5, [r4, #0]
 8004568:	6909      	ldr	r1, [r1, #16]
 800456a:	eba5 0901 	sub.w	r9, r5, r1
 800456e:	6965      	ldr	r5, [r4, #20]
 8004570:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004574:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004578:	3301      	adds	r3, #1
 800457a:	444b      	add	r3, r9
 800457c:	106d      	asrs	r5, r5, #1
 800457e:	429d      	cmp	r5, r3
 8004580:	bf38      	it	cc
 8004582:	461d      	movcc	r5, r3
 8004584:	0553      	lsls	r3, r2, #21
 8004586:	d531      	bpl.n	80045ec <__ssputs_r+0xa0>
 8004588:	4629      	mov	r1, r5
 800458a:	f000 fb55 	bl	8004c38 <_malloc_r>
 800458e:	4606      	mov	r6, r0
 8004590:	b950      	cbnz	r0, 80045a8 <__ssputs_r+0x5c>
 8004592:	230c      	movs	r3, #12
 8004594:	f8ca 3000 	str.w	r3, [sl]
 8004598:	89a3      	ldrh	r3, [r4, #12]
 800459a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800459e:	81a3      	strh	r3, [r4, #12]
 80045a0:	f04f 30ff 	mov.w	r0, #4294967295
 80045a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045a8:	6921      	ldr	r1, [r4, #16]
 80045aa:	464a      	mov	r2, r9
 80045ac:	f7ff ff98 	bl	80044e0 <memcpy>
 80045b0:	89a3      	ldrh	r3, [r4, #12]
 80045b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ba:	81a3      	strh	r3, [r4, #12]
 80045bc:	6126      	str	r6, [r4, #16]
 80045be:	6165      	str	r5, [r4, #20]
 80045c0:	444e      	add	r6, r9
 80045c2:	eba5 0509 	sub.w	r5, r5, r9
 80045c6:	6026      	str	r6, [r4, #0]
 80045c8:	60a5      	str	r5, [r4, #8]
 80045ca:	463e      	mov	r6, r7
 80045cc:	42be      	cmp	r6, r7
 80045ce:	d900      	bls.n	80045d2 <__ssputs_r+0x86>
 80045d0:	463e      	mov	r6, r7
 80045d2:	6820      	ldr	r0, [r4, #0]
 80045d4:	4632      	mov	r2, r6
 80045d6:	4641      	mov	r1, r8
 80045d8:	f000 faa8 	bl	8004b2c <memmove>
 80045dc:	68a3      	ldr	r3, [r4, #8]
 80045de:	1b9b      	subs	r3, r3, r6
 80045e0:	60a3      	str	r3, [r4, #8]
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	4433      	add	r3, r6
 80045e6:	6023      	str	r3, [r4, #0]
 80045e8:	2000      	movs	r0, #0
 80045ea:	e7db      	b.n	80045a4 <__ssputs_r+0x58>
 80045ec:	462a      	mov	r2, r5
 80045ee:	f000 fb97 	bl	8004d20 <_realloc_r>
 80045f2:	4606      	mov	r6, r0
 80045f4:	2800      	cmp	r0, #0
 80045f6:	d1e1      	bne.n	80045bc <__ssputs_r+0x70>
 80045f8:	6921      	ldr	r1, [r4, #16]
 80045fa:	4650      	mov	r0, sl
 80045fc:	f000 fab0 	bl	8004b60 <_free_r>
 8004600:	e7c7      	b.n	8004592 <__ssputs_r+0x46>
	...

08004604 <_svfiprintf_r>:
 8004604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004608:	4698      	mov	r8, r3
 800460a:	898b      	ldrh	r3, [r1, #12]
 800460c:	061b      	lsls	r3, r3, #24
 800460e:	b09d      	sub	sp, #116	; 0x74
 8004610:	4607      	mov	r7, r0
 8004612:	460d      	mov	r5, r1
 8004614:	4614      	mov	r4, r2
 8004616:	d50e      	bpl.n	8004636 <_svfiprintf_r+0x32>
 8004618:	690b      	ldr	r3, [r1, #16]
 800461a:	b963      	cbnz	r3, 8004636 <_svfiprintf_r+0x32>
 800461c:	2140      	movs	r1, #64	; 0x40
 800461e:	f000 fb0b 	bl	8004c38 <_malloc_r>
 8004622:	6028      	str	r0, [r5, #0]
 8004624:	6128      	str	r0, [r5, #16]
 8004626:	b920      	cbnz	r0, 8004632 <_svfiprintf_r+0x2e>
 8004628:	230c      	movs	r3, #12
 800462a:	603b      	str	r3, [r7, #0]
 800462c:	f04f 30ff 	mov.w	r0, #4294967295
 8004630:	e0d1      	b.n	80047d6 <_svfiprintf_r+0x1d2>
 8004632:	2340      	movs	r3, #64	; 0x40
 8004634:	616b      	str	r3, [r5, #20]
 8004636:	2300      	movs	r3, #0
 8004638:	9309      	str	r3, [sp, #36]	; 0x24
 800463a:	2320      	movs	r3, #32
 800463c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004640:	f8cd 800c 	str.w	r8, [sp, #12]
 8004644:	2330      	movs	r3, #48	; 0x30
 8004646:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80047f0 <_svfiprintf_r+0x1ec>
 800464a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800464e:	f04f 0901 	mov.w	r9, #1
 8004652:	4623      	mov	r3, r4
 8004654:	469a      	mov	sl, r3
 8004656:	f813 2b01 	ldrb.w	r2, [r3], #1
 800465a:	b10a      	cbz	r2, 8004660 <_svfiprintf_r+0x5c>
 800465c:	2a25      	cmp	r2, #37	; 0x25
 800465e:	d1f9      	bne.n	8004654 <_svfiprintf_r+0x50>
 8004660:	ebba 0b04 	subs.w	fp, sl, r4
 8004664:	d00b      	beq.n	800467e <_svfiprintf_r+0x7a>
 8004666:	465b      	mov	r3, fp
 8004668:	4622      	mov	r2, r4
 800466a:	4629      	mov	r1, r5
 800466c:	4638      	mov	r0, r7
 800466e:	f7ff ff6d 	bl	800454c <__ssputs_r>
 8004672:	3001      	adds	r0, #1
 8004674:	f000 80aa 	beq.w	80047cc <_svfiprintf_r+0x1c8>
 8004678:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800467a:	445a      	add	r2, fp
 800467c:	9209      	str	r2, [sp, #36]	; 0x24
 800467e:	f89a 3000 	ldrb.w	r3, [sl]
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 80a2 	beq.w	80047cc <_svfiprintf_r+0x1c8>
 8004688:	2300      	movs	r3, #0
 800468a:	f04f 32ff 	mov.w	r2, #4294967295
 800468e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004692:	f10a 0a01 	add.w	sl, sl, #1
 8004696:	9304      	str	r3, [sp, #16]
 8004698:	9307      	str	r3, [sp, #28]
 800469a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800469e:	931a      	str	r3, [sp, #104]	; 0x68
 80046a0:	4654      	mov	r4, sl
 80046a2:	2205      	movs	r2, #5
 80046a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046a8:	4851      	ldr	r0, [pc, #324]	; (80047f0 <_svfiprintf_r+0x1ec>)
 80046aa:	f7fb fdc9 	bl	8000240 <memchr>
 80046ae:	9a04      	ldr	r2, [sp, #16]
 80046b0:	b9d8      	cbnz	r0, 80046ea <_svfiprintf_r+0xe6>
 80046b2:	06d0      	lsls	r0, r2, #27
 80046b4:	bf44      	itt	mi
 80046b6:	2320      	movmi	r3, #32
 80046b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046bc:	0711      	lsls	r1, r2, #28
 80046be:	bf44      	itt	mi
 80046c0:	232b      	movmi	r3, #43	; 0x2b
 80046c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046c6:	f89a 3000 	ldrb.w	r3, [sl]
 80046ca:	2b2a      	cmp	r3, #42	; 0x2a
 80046cc:	d015      	beq.n	80046fa <_svfiprintf_r+0xf6>
 80046ce:	9a07      	ldr	r2, [sp, #28]
 80046d0:	4654      	mov	r4, sl
 80046d2:	2000      	movs	r0, #0
 80046d4:	f04f 0c0a 	mov.w	ip, #10
 80046d8:	4621      	mov	r1, r4
 80046da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046de:	3b30      	subs	r3, #48	; 0x30
 80046e0:	2b09      	cmp	r3, #9
 80046e2:	d94e      	bls.n	8004782 <_svfiprintf_r+0x17e>
 80046e4:	b1b0      	cbz	r0, 8004714 <_svfiprintf_r+0x110>
 80046e6:	9207      	str	r2, [sp, #28]
 80046e8:	e014      	b.n	8004714 <_svfiprintf_r+0x110>
 80046ea:	eba0 0308 	sub.w	r3, r0, r8
 80046ee:	fa09 f303 	lsl.w	r3, r9, r3
 80046f2:	4313      	orrs	r3, r2
 80046f4:	9304      	str	r3, [sp, #16]
 80046f6:	46a2      	mov	sl, r4
 80046f8:	e7d2      	b.n	80046a0 <_svfiprintf_r+0x9c>
 80046fa:	9b03      	ldr	r3, [sp, #12]
 80046fc:	1d19      	adds	r1, r3, #4
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	9103      	str	r1, [sp, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	bfbb      	ittet	lt
 8004706:	425b      	neglt	r3, r3
 8004708:	f042 0202 	orrlt.w	r2, r2, #2
 800470c:	9307      	strge	r3, [sp, #28]
 800470e:	9307      	strlt	r3, [sp, #28]
 8004710:	bfb8      	it	lt
 8004712:	9204      	strlt	r2, [sp, #16]
 8004714:	7823      	ldrb	r3, [r4, #0]
 8004716:	2b2e      	cmp	r3, #46	; 0x2e
 8004718:	d10c      	bne.n	8004734 <_svfiprintf_r+0x130>
 800471a:	7863      	ldrb	r3, [r4, #1]
 800471c:	2b2a      	cmp	r3, #42	; 0x2a
 800471e:	d135      	bne.n	800478c <_svfiprintf_r+0x188>
 8004720:	9b03      	ldr	r3, [sp, #12]
 8004722:	1d1a      	adds	r2, r3, #4
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	9203      	str	r2, [sp, #12]
 8004728:	2b00      	cmp	r3, #0
 800472a:	bfb8      	it	lt
 800472c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004730:	3402      	adds	r4, #2
 8004732:	9305      	str	r3, [sp, #20]
 8004734:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004800 <_svfiprintf_r+0x1fc>
 8004738:	7821      	ldrb	r1, [r4, #0]
 800473a:	2203      	movs	r2, #3
 800473c:	4650      	mov	r0, sl
 800473e:	f7fb fd7f 	bl	8000240 <memchr>
 8004742:	b140      	cbz	r0, 8004756 <_svfiprintf_r+0x152>
 8004744:	2340      	movs	r3, #64	; 0x40
 8004746:	eba0 000a 	sub.w	r0, r0, sl
 800474a:	fa03 f000 	lsl.w	r0, r3, r0
 800474e:	9b04      	ldr	r3, [sp, #16]
 8004750:	4303      	orrs	r3, r0
 8004752:	3401      	adds	r4, #1
 8004754:	9304      	str	r3, [sp, #16]
 8004756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800475a:	4826      	ldr	r0, [pc, #152]	; (80047f4 <_svfiprintf_r+0x1f0>)
 800475c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004760:	2206      	movs	r2, #6
 8004762:	f7fb fd6d 	bl	8000240 <memchr>
 8004766:	2800      	cmp	r0, #0
 8004768:	d038      	beq.n	80047dc <_svfiprintf_r+0x1d8>
 800476a:	4b23      	ldr	r3, [pc, #140]	; (80047f8 <_svfiprintf_r+0x1f4>)
 800476c:	bb1b      	cbnz	r3, 80047b6 <_svfiprintf_r+0x1b2>
 800476e:	9b03      	ldr	r3, [sp, #12]
 8004770:	3307      	adds	r3, #7
 8004772:	f023 0307 	bic.w	r3, r3, #7
 8004776:	3308      	adds	r3, #8
 8004778:	9303      	str	r3, [sp, #12]
 800477a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800477c:	4433      	add	r3, r6
 800477e:	9309      	str	r3, [sp, #36]	; 0x24
 8004780:	e767      	b.n	8004652 <_svfiprintf_r+0x4e>
 8004782:	fb0c 3202 	mla	r2, ip, r2, r3
 8004786:	460c      	mov	r4, r1
 8004788:	2001      	movs	r0, #1
 800478a:	e7a5      	b.n	80046d8 <_svfiprintf_r+0xd4>
 800478c:	2300      	movs	r3, #0
 800478e:	3401      	adds	r4, #1
 8004790:	9305      	str	r3, [sp, #20]
 8004792:	4619      	mov	r1, r3
 8004794:	f04f 0c0a 	mov.w	ip, #10
 8004798:	4620      	mov	r0, r4
 800479a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800479e:	3a30      	subs	r2, #48	; 0x30
 80047a0:	2a09      	cmp	r2, #9
 80047a2:	d903      	bls.n	80047ac <_svfiprintf_r+0x1a8>
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0c5      	beq.n	8004734 <_svfiprintf_r+0x130>
 80047a8:	9105      	str	r1, [sp, #20]
 80047aa:	e7c3      	b.n	8004734 <_svfiprintf_r+0x130>
 80047ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80047b0:	4604      	mov	r4, r0
 80047b2:	2301      	movs	r3, #1
 80047b4:	e7f0      	b.n	8004798 <_svfiprintf_r+0x194>
 80047b6:	ab03      	add	r3, sp, #12
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	462a      	mov	r2, r5
 80047bc:	4b0f      	ldr	r3, [pc, #60]	; (80047fc <_svfiprintf_r+0x1f8>)
 80047be:	a904      	add	r1, sp, #16
 80047c0:	4638      	mov	r0, r7
 80047c2:	f3af 8000 	nop.w
 80047c6:	1c42      	adds	r2, r0, #1
 80047c8:	4606      	mov	r6, r0
 80047ca:	d1d6      	bne.n	800477a <_svfiprintf_r+0x176>
 80047cc:	89ab      	ldrh	r3, [r5, #12]
 80047ce:	065b      	lsls	r3, r3, #25
 80047d0:	f53f af2c 	bmi.w	800462c <_svfiprintf_r+0x28>
 80047d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047d6:	b01d      	add	sp, #116	; 0x74
 80047d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047dc:	ab03      	add	r3, sp, #12
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	462a      	mov	r2, r5
 80047e2:	4b06      	ldr	r3, [pc, #24]	; (80047fc <_svfiprintf_r+0x1f8>)
 80047e4:	a904      	add	r1, sp, #16
 80047e6:	4638      	mov	r0, r7
 80047e8:	f000 f87a 	bl	80048e0 <_printf_i>
 80047ec:	e7eb      	b.n	80047c6 <_svfiprintf_r+0x1c2>
 80047ee:	bf00      	nop
 80047f0:	080053e8 	.word	0x080053e8
 80047f4:	080053f2 	.word	0x080053f2
 80047f8:	00000000 	.word	0x00000000
 80047fc:	0800454d 	.word	0x0800454d
 8004800:	080053ee 	.word	0x080053ee

08004804 <_printf_common>:
 8004804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004808:	4616      	mov	r6, r2
 800480a:	4699      	mov	r9, r3
 800480c:	688a      	ldr	r2, [r1, #8]
 800480e:	690b      	ldr	r3, [r1, #16]
 8004810:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004814:	4293      	cmp	r3, r2
 8004816:	bfb8      	it	lt
 8004818:	4613      	movlt	r3, r2
 800481a:	6033      	str	r3, [r6, #0]
 800481c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004820:	4607      	mov	r7, r0
 8004822:	460c      	mov	r4, r1
 8004824:	b10a      	cbz	r2, 800482a <_printf_common+0x26>
 8004826:	3301      	adds	r3, #1
 8004828:	6033      	str	r3, [r6, #0]
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	0699      	lsls	r1, r3, #26
 800482e:	bf42      	ittt	mi
 8004830:	6833      	ldrmi	r3, [r6, #0]
 8004832:	3302      	addmi	r3, #2
 8004834:	6033      	strmi	r3, [r6, #0]
 8004836:	6825      	ldr	r5, [r4, #0]
 8004838:	f015 0506 	ands.w	r5, r5, #6
 800483c:	d106      	bne.n	800484c <_printf_common+0x48>
 800483e:	f104 0a19 	add.w	sl, r4, #25
 8004842:	68e3      	ldr	r3, [r4, #12]
 8004844:	6832      	ldr	r2, [r6, #0]
 8004846:	1a9b      	subs	r3, r3, r2
 8004848:	42ab      	cmp	r3, r5
 800484a:	dc26      	bgt.n	800489a <_printf_common+0x96>
 800484c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004850:	1e13      	subs	r3, r2, #0
 8004852:	6822      	ldr	r2, [r4, #0]
 8004854:	bf18      	it	ne
 8004856:	2301      	movne	r3, #1
 8004858:	0692      	lsls	r2, r2, #26
 800485a:	d42b      	bmi.n	80048b4 <_printf_common+0xb0>
 800485c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004860:	4649      	mov	r1, r9
 8004862:	4638      	mov	r0, r7
 8004864:	47c0      	blx	r8
 8004866:	3001      	adds	r0, #1
 8004868:	d01e      	beq.n	80048a8 <_printf_common+0xa4>
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	68e5      	ldr	r5, [r4, #12]
 800486e:	6832      	ldr	r2, [r6, #0]
 8004870:	f003 0306 	and.w	r3, r3, #6
 8004874:	2b04      	cmp	r3, #4
 8004876:	bf08      	it	eq
 8004878:	1aad      	subeq	r5, r5, r2
 800487a:	68a3      	ldr	r3, [r4, #8]
 800487c:	6922      	ldr	r2, [r4, #16]
 800487e:	bf0c      	ite	eq
 8004880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004884:	2500      	movne	r5, #0
 8004886:	4293      	cmp	r3, r2
 8004888:	bfc4      	itt	gt
 800488a:	1a9b      	subgt	r3, r3, r2
 800488c:	18ed      	addgt	r5, r5, r3
 800488e:	2600      	movs	r6, #0
 8004890:	341a      	adds	r4, #26
 8004892:	42b5      	cmp	r5, r6
 8004894:	d11a      	bne.n	80048cc <_printf_common+0xc8>
 8004896:	2000      	movs	r0, #0
 8004898:	e008      	b.n	80048ac <_printf_common+0xa8>
 800489a:	2301      	movs	r3, #1
 800489c:	4652      	mov	r2, sl
 800489e:	4649      	mov	r1, r9
 80048a0:	4638      	mov	r0, r7
 80048a2:	47c0      	blx	r8
 80048a4:	3001      	adds	r0, #1
 80048a6:	d103      	bne.n	80048b0 <_printf_common+0xac>
 80048a8:	f04f 30ff 	mov.w	r0, #4294967295
 80048ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048b0:	3501      	adds	r5, #1
 80048b2:	e7c6      	b.n	8004842 <_printf_common+0x3e>
 80048b4:	18e1      	adds	r1, r4, r3
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	2030      	movs	r0, #48	; 0x30
 80048ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048be:	4422      	add	r2, r4
 80048c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048c8:	3302      	adds	r3, #2
 80048ca:	e7c7      	b.n	800485c <_printf_common+0x58>
 80048cc:	2301      	movs	r3, #1
 80048ce:	4622      	mov	r2, r4
 80048d0:	4649      	mov	r1, r9
 80048d2:	4638      	mov	r0, r7
 80048d4:	47c0      	blx	r8
 80048d6:	3001      	adds	r0, #1
 80048d8:	d0e6      	beq.n	80048a8 <_printf_common+0xa4>
 80048da:	3601      	adds	r6, #1
 80048dc:	e7d9      	b.n	8004892 <_printf_common+0x8e>
	...

080048e0 <_printf_i>:
 80048e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048e4:	7e0f      	ldrb	r7, [r1, #24]
 80048e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048e8:	2f78      	cmp	r7, #120	; 0x78
 80048ea:	4691      	mov	r9, r2
 80048ec:	4680      	mov	r8, r0
 80048ee:	460c      	mov	r4, r1
 80048f0:	469a      	mov	sl, r3
 80048f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048f6:	d807      	bhi.n	8004908 <_printf_i+0x28>
 80048f8:	2f62      	cmp	r7, #98	; 0x62
 80048fa:	d80a      	bhi.n	8004912 <_printf_i+0x32>
 80048fc:	2f00      	cmp	r7, #0
 80048fe:	f000 80d8 	beq.w	8004ab2 <_printf_i+0x1d2>
 8004902:	2f58      	cmp	r7, #88	; 0x58
 8004904:	f000 80a3 	beq.w	8004a4e <_printf_i+0x16e>
 8004908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800490c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004910:	e03a      	b.n	8004988 <_printf_i+0xa8>
 8004912:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004916:	2b15      	cmp	r3, #21
 8004918:	d8f6      	bhi.n	8004908 <_printf_i+0x28>
 800491a:	a101      	add	r1, pc, #4	; (adr r1, 8004920 <_printf_i+0x40>)
 800491c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004920:	08004979 	.word	0x08004979
 8004924:	0800498d 	.word	0x0800498d
 8004928:	08004909 	.word	0x08004909
 800492c:	08004909 	.word	0x08004909
 8004930:	08004909 	.word	0x08004909
 8004934:	08004909 	.word	0x08004909
 8004938:	0800498d 	.word	0x0800498d
 800493c:	08004909 	.word	0x08004909
 8004940:	08004909 	.word	0x08004909
 8004944:	08004909 	.word	0x08004909
 8004948:	08004909 	.word	0x08004909
 800494c:	08004a99 	.word	0x08004a99
 8004950:	080049bd 	.word	0x080049bd
 8004954:	08004a7b 	.word	0x08004a7b
 8004958:	08004909 	.word	0x08004909
 800495c:	08004909 	.word	0x08004909
 8004960:	08004abb 	.word	0x08004abb
 8004964:	08004909 	.word	0x08004909
 8004968:	080049bd 	.word	0x080049bd
 800496c:	08004909 	.word	0x08004909
 8004970:	08004909 	.word	0x08004909
 8004974:	08004a83 	.word	0x08004a83
 8004978:	682b      	ldr	r3, [r5, #0]
 800497a:	1d1a      	adds	r2, r3, #4
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	602a      	str	r2, [r5, #0]
 8004980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004988:	2301      	movs	r3, #1
 800498a:	e0a3      	b.n	8004ad4 <_printf_i+0x1f4>
 800498c:	6820      	ldr	r0, [r4, #0]
 800498e:	6829      	ldr	r1, [r5, #0]
 8004990:	0606      	lsls	r6, r0, #24
 8004992:	f101 0304 	add.w	r3, r1, #4
 8004996:	d50a      	bpl.n	80049ae <_printf_i+0xce>
 8004998:	680e      	ldr	r6, [r1, #0]
 800499a:	602b      	str	r3, [r5, #0]
 800499c:	2e00      	cmp	r6, #0
 800499e:	da03      	bge.n	80049a8 <_printf_i+0xc8>
 80049a0:	232d      	movs	r3, #45	; 0x2d
 80049a2:	4276      	negs	r6, r6
 80049a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049a8:	485e      	ldr	r0, [pc, #376]	; (8004b24 <_printf_i+0x244>)
 80049aa:	230a      	movs	r3, #10
 80049ac:	e019      	b.n	80049e2 <_printf_i+0x102>
 80049ae:	680e      	ldr	r6, [r1, #0]
 80049b0:	602b      	str	r3, [r5, #0]
 80049b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049b6:	bf18      	it	ne
 80049b8:	b236      	sxthne	r6, r6
 80049ba:	e7ef      	b.n	800499c <_printf_i+0xbc>
 80049bc:	682b      	ldr	r3, [r5, #0]
 80049be:	6820      	ldr	r0, [r4, #0]
 80049c0:	1d19      	adds	r1, r3, #4
 80049c2:	6029      	str	r1, [r5, #0]
 80049c4:	0601      	lsls	r1, r0, #24
 80049c6:	d501      	bpl.n	80049cc <_printf_i+0xec>
 80049c8:	681e      	ldr	r6, [r3, #0]
 80049ca:	e002      	b.n	80049d2 <_printf_i+0xf2>
 80049cc:	0646      	lsls	r6, r0, #25
 80049ce:	d5fb      	bpl.n	80049c8 <_printf_i+0xe8>
 80049d0:	881e      	ldrh	r6, [r3, #0]
 80049d2:	4854      	ldr	r0, [pc, #336]	; (8004b24 <_printf_i+0x244>)
 80049d4:	2f6f      	cmp	r7, #111	; 0x6f
 80049d6:	bf0c      	ite	eq
 80049d8:	2308      	moveq	r3, #8
 80049da:	230a      	movne	r3, #10
 80049dc:	2100      	movs	r1, #0
 80049de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049e2:	6865      	ldr	r5, [r4, #4]
 80049e4:	60a5      	str	r5, [r4, #8]
 80049e6:	2d00      	cmp	r5, #0
 80049e8:	bfa2      	ittt	ge
 80049ea:	6821      	ldrge	r1, [r4, #0]
 80049ec:	f021 0104 	bicge.w	r1, r1, #4
 80049f0:	6021      	strge	r1, [r4, #0]
 80049f2:	b90e      	cbnz	r6, 80049f8 <_printf_i+0x118>
 80049f4:	2d00      	cmp	r5, #0
 80049f6:	d04d      	beq.n	8004a94 <_printf_i+0x1b4>
 80049f8:	4615      	mov	r5, r2
 80049fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80049fe:	fb03 6711 	mls	r7, r3, r1, r6
 8004a02:	5dc7      	ldrb	r7, [r0, r7]
 8004a04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a08:	4637      	mov	r7, r6
 8004a0a:	42bb      	cmp	r3, r7
 8004a0c:	460e      	mov	r6, r1
 8004a0e:	d9f4      	bls.n	80049fa <_printf_i+0x11a>
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d10b      	bne.n	8004a2c <_printf_i+0x14c>
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	07de      	lsls	r6, r3, #31
 8004a18:	d508      	bpl.n	8004a2c <_printf_i+0x14c>
 8004a1a:	6923      	ldr	r3, [r4, #16]
 8004a1c:	6861      	ldr	r1, [r4, #4]
 8004a1e:	4299      	cmp	r1, r3
 8004a20:	bfde      	ittt	le
 8004a22:	2330      	movle	r3, #48	; 0x30
 8004a24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a2c:	1b52      	subs	r2, r2, r5
 8004a2e:	6122      	str	r2, [r4, #16]
 8004a30:	f8cd a000 	str.w	sl, [sp]
 8004a34:	464b      	mov	r3, r9
 8004a36:	aa03      	add	r2, sp, #12
 8004a38:	4621      	mov	r1, r4
 8004a3a:	4640      	mov	r0, r8
 8004a3c:	f7ff fee2 	bl	8004804 <_printf_common>
 8004a40:	3001      	adds	r0, #1
 8004a42:	d14c      	bne.n	8004ade <_printf_i+0x1fe>
 8004a44:	f04f 30ff 	mov.w	r0, #4294967295
 8004a48:	b004      	add	sp, #16
 8004a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a4e:	4835      	ldr	r0, [pc, #212]	; (8004b24 <_printf_i+0x244>)
 8004a50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a54:	6829      	ldr	r1, [r5, #0]
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a5c:	6029      	str	r1, [r5, #0]
 8004a5e:	061d      	lsls	r5, r3, #24
 8004a60:	d514      	bpl.n	8004a8c <_printf_i+0x1ac>
 8004a62:	07df      	lsls	r7, r3, #31
 8004a64:	bf44      	itt	mi
 8004a66:	f043 0320 	orrmi.w	r3, r3, #32
 8004a6a:	6023      	strmi	r3, [r4, #0]
 8004a6c:	b91e      	cbnz	r6, 8004a76 <_printf_i+0x196>
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	f023 0320 	bic.w	r3, r3, #32
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	2310      	movs	r3, #16
 8004a78:	e7b0      	b.n	80049dc <_printf_i+0xfc>
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	f043 0320 	orr.w	r3, r3, #32
 8004a80:	6023      	str	r3, [r4, #0]
 8004a82:	2378      	movs	r3, #120	; 0x78
 8004a84:	4828      	ldr	r0, [pc, #160]	; (8004b28 <_printf_i+0x248>)
 8004a86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a8a:	e7e3      	b.n	8004a54 <_printf_i+0x174>
 8004a8c:	0659      	lsls	r1, r3, #25
 8004a8e:	bf48      	it	mi
 8004a90:	b2b6      	uxthmi	r6, r6
 8004a92:	e7e6      	b.n	8004a62 <_printf_i+0x182>
 8004a94:	4615      	mov	r5, r2
 8004a96:	e7bb      	b.n	8004a10 <_printf_i+0x130>
 8004a98:	682b      	ldr	r3, [r5, #0]
 8004a9a:	6826      	ldr	r6, [r4, #0]
 8004a9c:	6961      	ldr	r1, [r4, #20]
 8004a9e:	1d18      	adds	r0, r3, #4
 8004aa0:	6028      	str	r0, [r5, #0]
 8004aa2:	0635      	lsls	r5, r6, #24
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	d501      	bpl.n	8004aac <_printf_i+0x1cc>
 8004aa8:	6019      	str	r1, [r3, #0]
 8004aaa:	e002      	b.n	8004ab2 <_printf_i+0x1d2>
 8004aac:	0670      	lsls	r0, r6, #25
 8004aae:	d5fb      	bpl.n	8004aa8 <_printf_i+0x1c8>
 8004ab0:	8019      	strh	r1, [r3, #0]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	6123      	str	r3, [r4, #16]
 8004ab6:	4615      	mov	r5, r2
 8004ab8:	e7ba      	b.n	8004a30 <_printf_i+0x150>
 8004aba:	682b      	ldr	r3, [r5, #0]
 8004abc:	1d1a      	adds	r2, r3, #4
 8004abe:	602a      	str	r2, [r5, #0]
 8004ac0:	681d      	ldr	r5, [r3, #0]
 8004ac2:	6862      	ldr	r2, [r4, #4]
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f7fb fbba 	bl	8000240 <memchr>
 8004acc:	b108      	cbz	r0, 8004ad2 <_printf_i+0x1f2>
 8004ace:	1b40      	subs	r0, r0, r5
 8004ad0:	6060      	str	r0, [r4, #4]
 8004ad2:	6863      	ldr	r3, [r4, #4]
 8004ad4:	6123      	str	r3, [r4, #16]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004adc:	e7a8      	b.n	8004a30 <_printf_i+0x150>
 8004ade:	6923      	ldr	r3, [r4, #16]
 8004ae0:	462a      	mov	r2, r5
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	4640      	mov	r0, r8
 8004ae6:	47d0      	blx	sl
 8004ae8:	3001      	adds	r0, #1
 8004aea:	d0ab      	beq.n	8004a44 <_printf_i+0x164>
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	079b      	lsls	r3, r3, #30
 8004af0:	d413      	bmi.n	8004b1a <_printf_i+0x23a>
 8004af2:	68e0      	ldr	r0, [r4, #12]
 8004af4:	9b03      	ldr	r3, [sp, #12]
 8004af6:	4298      	cmp	r0, r3
 8004af8:	bfb8      	it	lt
 8004afa:	4618      	movlt	r0, r3
 8004afc:	e7a4      	b.n	8004a48 <_printf_i+0x168>
 8004afe:	2301      	movs	r3, #1
 8004b00:	4632      	mov	r2, r6
 8004b02:	4649      	mov	r1, r9
 8004b04:	4640      	mov	r0, r8
 8004b06:	47d0      	blx	sl
 8004b08:	3001      	adds	r0, #1
 8004b0a:	d09b      	beq.n	8004a44 <_printf_i+0x164>
 8004b0c:	3501      	adds	r5, #1
 8004b0e:	68e3      	ldr	r3, [r4, #12]
 8004b10:	9903      	ldr	r1, [sp, #12]
 8004b12:	1a5b      	subs	r3, r3, r1
 8004b14:	42ab      	cmp	r3, r5
 8004b16:	dcf2      	bgt.n	8004afe <_printf_i+0x21e>
 8004b18:	e7eb      	b.n	8004af2 <_printf_i+0x212>
 8004b1a:	2500      	movs	r5, #0
 8004b1c:	f104 0619 	add.w	r6, r4, #25
 8004b20:	e7f5      	b.n	8004b0e <_printf_i+0x22e>
 8004b22:	bf00      	nop
 8004b24:	080053f9 	.word	0x080053f9
 8004b28:	0800540a 	.word	0x0800540a

08004b2c <memmove>:
 8004b2c:	4288      	cmp	r0, r1
 8004b2e:	b510      	push	{r4, lr}
 8004b30:	eb01 0402 	add.w	r4, r1, r2
 8004b34:	d902      	bls.n	8004b3c <memmove+0x10>
 8004b36:	4284      	cmp	r4, r0
 8004b38:	4623      	mov	r3, r4
 8004b3a:	d807      	bhi.n	8004b4c <memmove+0x20>
 8004b3c:	1e43      	subs	r3, r0, #1
 8004b3e:	42a1      	cmp	r1, r4
 8004b40:	d008      	beq.n	8004b54 <memmove+0x28>
 8004b42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b4a:	e7f8      	b.n	8004b3e <memmove+0x12>
 8004b4c:	4402      	add	r2, r0
 8004b4e:	4601      	mov	r1, r0
 8004b50:	428a      	cmp	r2, r1
 8004b52:	d100      	bne.n	8004b56 <memmove+0x2a>
 8004b54:	bd10      	pop	{r4, pc}
 8004b56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b5e:	e7f7      	b.n	8004b50 <memmove+0x24>

08004b60 <_free_r>:
 8004b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b62:	2900      	cmp	r1, #0
 8004b64:	d044      	beq.n	8004bf0 <_free_r+0x90>
 8004b66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b6a:	9001      	str	r0, [sp, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f1a1 0404 	sub.w	r4, r1, #4
 8004b72:	bfb8      	it	lt
 8004b74:	18e4      	addlt	r4, r4, r3
 8004b76:	f000 f913 	bl	8004da0 <__malloc_lock>
 8004b7a:	4a1e      	ldr	r2, [pc, #120]	; (8004bf4 <_free_r+0x94>)
 8004b7c:	9801      	ldr	r0, [sp, #4]
 8004b7e:	6813      	ldr	r3, [r2, #0]
 8004b80:	b933      	cbnz	r3, 8004b90 <_free_r+0x30>
 8004b82:	6063      	str	r3, [r4, #4]
 8004b84:	6014      	str	r4, [r2, #0]
 8004b86:	b003      	add	sp, #12
 8004b88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b8c:	f000 b90e 	b.w	8004dac <__malloc_unlock>
 8004b90:	42a3      	cmp	r3, r4
 8004b92:	d908      	bls.n	8004ba6 <_free_r+0x46>
 8004b94:	6825      	ldr	r5, [r4, #0]
 8004b96:	1961      	adds	r1, r4, r5
 8004b98:	428b      	cmp	r3, r1
 8004b9a:	bf01      	itttt	eq
 8004b9c:	6819      	ldreq	r1, [r3, #0]
 8004b9e:	685b      	ldreq	r3, [r3, #4]
 8004ba0:	1949      	addeq	r1, r1, r5
 8004ba2:	6021      	streq	r1, [r4, #0]
 8004ba4:	e7ed      	b.n	8004b82 <_free_r+0x22>
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	b10b      	cbz	r3, 8004bb0 <_free_r+0x50>
 8004bac:	42a3      	cmp	r3, r4
 8004bae:	d9fa      	bls.n	8004ba6 <_free_r+0x46>
 8004bb0:	6811      	ldr	r1, [r2, #0]
 8004bb2:	1855      	adds	r5, r2, r1
 8004bb4:	42a5      	cmp	r5, r4
 8004bb6:	d10b      	bne.n	8004bd0 <_free_r+0x70>
 8004bb8:	6824      	ldr	r4, [r4, #0]
 8004bba:	4421      	add	r1, r4
 8004bbc:	1854      	adds	r4, r2, r1
 8004bbe:	42a3      	cmp	r3, r4
 8004bc0:	6011      	str	r1, [r2, #0]
 8004bc2:	d1e0      	bne.n	8004b86 <_free_r+0x26>
 8004bc4:	681c      	ldr	r4, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	6053      	str	r3, [r2, #4]
 8004bca:	4421      	add	r1, r4
 8004bcc:	6011      	str	r1, [r2, #0]
 8004bce:	e7da      	b.n	8004b86 <_free_r+0x26>
 8004bd0:	d902      	bls.n	8004bd8 <_free_r+0x78>
 8004bd2:	230c      	movs	r3, #12
 8004bd4:	6003      	str	r3, [r0, #0]
 8004bd6:	e7d6      	b.n	8004b86 <_free_r+0x26>
 8004bd8:	6825      	ldr	r5, [r4, #0]
 8004bda:	1961      	adds	r1, r4, r5
 8004bdc:	428b      	cmp	r3, r1
 8004bde:	bf04      	itt	eq
 8004be0:	6819      	ldreq	r1, [r3, #0]
 8004be2:	685b      	ldreq	r3, [r3, #4]
 8004be4:	6063      	str	r3, [r4, #4]
 8004be6:	bf04      	itt	eq
 8004be8:	1949      	addeq	r1, r1, r5
 8004bea:	6021      	streq	r1, [r4, #0]
 8004bec:	6054      	str	r4, [r2, #4]
 8004bee:	e7ca      	b.n	8004b86 <_free_r+0x26>
 8004bf0:	b003      	add	sp, #12
 8004bf2:	bd30      	pop	{r4, r5, pc}
 8004bf4:	20000210 	.word	0x20000210

08004bf8 <sbrk_aligned>:
 8004bf8:	b570      	push	{r4, r5, r6, lr}
 8004bfa:	4e0e      	ldr	r6, [pc, #56]	; (8004c34 <sbrk_aligned+0x3c>)
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	6831      	ldr	r1, [r6, #0]
 8004c00:	4605      	mov	r5, r0
 8004c02:	b911      	cbnz	r1, 8004c0a <sbrk_aligned+0x12>
 8004c04:	f000 f8bc 	bl	8004d80 <_sbrk_r>
 8004c08:	6030      	str	r0, [r6, #0]
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	f000 f8b7 	bl	8004d80 <_sbrk_r>
 8004c12:	1c43      	adds	r3, r0, #1
 8004c14:	d00a      	beq.n	8004c2c <sbrk_aligned+0x34>
 8004c16:	1cc4      	adds	r4, r0, #3
 8004c18:	f024 0403 	bic.w	r4, r4, #3
 8004c1c:	42a0      	cmp	r0, r4
 8004c1e:	d007      	beq.n	8004c30 <sbrk_aligned+0x38>
 8004c20:	1a21      	subs	r1, r4, r0
 8004c22:	4628      	mov	r0, r5
 8004c24:	f000 f8ac 	bl	8004d80 <_sbrk_r>
 8004c28:	3001      	adds	r0, #1
 8004c2a:	d101      	bne.n	8004c30 <sbrk_aligned+0x38>
 8004c2c:	f04f 34ff 	mov.w	r4, #4294967295
 8004c30:	4620      	mov	r0, r4
 8004c32:	bd70      	pop	{r4, r5, r6, pc}
 8004c34:	20000214 	.word	0x20000214

08004c38 <_malloc_r>:
 8004c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c3c:	1ccd      	adds	r5, r1, #3
 8004c3e:	f025 0503 	bic.w	r5, r5, #3
 8004c42:	3508      	adds	r5, #8
 8004c44:	2d0c      	cmp	r5, #12
 8004c46:	bf38      	it	cc
 8004c48:	250c      	movcc	r5, #12
 8004c4a:	2d00      	cmp	r5, #0
 8004c4c:	4607      	mov	r7, r0
 8004c4e:	db01      	blt.n	8004c54 <_malloc_r+0x1c>
 8004c50:	42a9      	cmp	r1, r5
 8004c52:	d905      	bls.n	8004c60 <_malloc_r+0x28>
 8004c54:	230c      	movs	r3, #12
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	2600      	movs	r6, #0
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c60:	4e2e      	ldr	r6, [pc, #184]	; (8004d1c <_malloc_r+0xe4>)
 8004c62:	f000 f89d 	bl	8004da0 <__malloc_lock>
 8004c66:	6833      	ldr	r3, [r6, #0]
 8004c68:	461c      	mov	r4, r3
 8004c6a:	bb34      	cbnz	r4, 8004cba <_malloc_r+0x82>
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	4638      	mov	r0, r7
 8004c70:	f7ff ffc2 	bl	8004bf8 <sbrk_aligned>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	4604      	mov	r4, r0
 8004c78:	d14d      	bne.n	8004d16 <_malloc_r+0xde>
 8004c7a:	6834      	ldr	r4, [r6, #0]
 8004c7c:	4626      	mov	r6, r4
 8004c7e:	2e00      	cmp	r6, #0
 8004c80:	d140      	bne.n	8004d04 <_malloc_r+0xcc>
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	4631      	mov	r1, r6
 8004c86:	4638      	mov	r0, r7
 8004c88:	eb04 0803 	add.w	r8, r4, r3
 8004c8c:	f000 f878 	bl	8004d80 <_sbrk_r>
 8004c90:	4580      	cmp	r8, r0
 8004c92:	d13a      	bne.n	8004d0a <_malloc_r+0xd2>
 8004c94:	6821      	ldr	r1, [r4, #0]
 8004c96:	3503      	adds	r5, #3
 8004c98:	1a6d      	subs	r5, r5, r1
 8004c9a:	f025 0503 	bic.w	r5, r5, #3
 8004c9e:	3508      	adds	r5, #8
 8004ca0:	2d0c      	cmp	r5, #12
 8004ca2:	bf38      	it	cc
 8004ca4:	250c      	movcc	r5, #12
 8004ca6:	4629      	mov	r1, r5
 8004ca8:	4638      	mov	r0, r7
 8004caa:	f7ff ffa5 	bl	8004bf8 <sbrk_aligned>
 8004cae:	3001      	adds	r0, #1
 8004cb0:	d02b      	beq.n	8004d0a <_malloc_r+0xd2>
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	442b      	add	r3, r5
 8004cb6:	6023      	str	r3, [r4, #0]
 8004cb8:	e00e      	b.n	8004cd8 <_malloc_r+0xa0>
 8004cba:	6822      	ldr	r2, [r4, #0]
 8004cbc:	1b52      	subs	r2, r2, r5
 8004cbe:	d41e      	bmi.n	8004cfe <_malloc_r+0xc6>
 8004cc0:	2a0b      	cmp	r2, #11
 8004cc2:	d916      	bls.n	8004cf2 <_malloc_r+0xba>
 8004cc4:	1961      	adds	r1, r4, r5
 8004cc6:	42a3      	cmp	r3, r4
 8004cc8:	6025      	str	r5, [r4, #0]
 8004cca:	bf18      	it	ne
 8004ccc:	6059      	strne	r1, [r3, #4]
 8004cce:	6863      	ldr	r3, [r4, #4]
 8004cd0:	bf08      	it	eq
 8004cd2:	6031      	streq	r1, [r6, #0]
 8004cd4:	5162      	str	r2, [r4, r5]
 8004cd6:	604b      	str	r3, [r1, #4]
 8004cd8:	4638      	mov	r0, r7
 8004cda:	f104 060b 	add.w	r6, r4, #11
 8004cde:	f000 f865 	bl	8004dac <__malloc_unlock>
 8004ce2:	f026 0607 	bic.w	r6, r6, #7
 8004ce6:	1d23      	adds	r3, r4, #4
 8004ce8:	1af2      	subs	r2, r6, r3
 8004cea:	d0b6      	beq.n	8004c5a <_malloc_r+0x22>
 8004cec:	1b9b      	subs	r3, r3, r6
 8004cee:	50a3      	str	r3, [r4, r2]
 8004cf0:	e7b3      	b.n	8004c5a <_malloc_r+0x22>
 8004cf2:	6862      	ldr	r2, [r4, #4]
 8004cf4:	42a3      	cmp	r3, r4
 8004cf6:	bf0c      	ite	eq
 8004cf8:	6032      	streq	r2, [r6, #0]
 8004cfa:	605a      	strne	r2, [r3, #4]
 8004cfc:	e7ec      	b.n	8004cd8 <_malloc_r+0xa0>
 8004cfe:	4623      	mov	r3, r4
 8004d00:	6864      	ldr	r4, [r4, #4]
 8004d02:	e7b2      	b.n	8004c6a <_malloc_r+0x32>
 8004d04:	4634      	mov	r4, r6
 8004d06:	6876      	ldr	r6, [r6, #4]
 8004d08:	e7b9      	b.n	8004c7e <_malloc_r+0x46>
 8004d0a:	230c      	movs	r3, #12
 8004d0c:	603b      	str	r3, [r7, #0]
 8004d0e:	4638      	mov	r0, r7
 8004d10:	f000 f84c 	bl	8004dac <__malloc_unlock>
 8004d14:	e7a1      	b.n	8004c5a <_malloc_r+0x22>
 8004d16:	6025      	str	r5, [r4, #0]
 8004d18:	e7de      	b.n	8004cd8 <_malloc_r+0xa0>
 8004d1a:	bf00      	nop
 8004d1c:	20000210 	.word	0x20000210

08004d20 <_realloc_r>:
 8004d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d24:	4680      	mov	r8, r0
 8004d26:	4614      	mov	r4, r2
 8004d28:	460e      	mov	r6, r1
 8004d2a:	b921      	cbnz	r1, 8004d36 <_realloc_r+0x16>
 8004d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d30:	4611      	mov	r1, r2
 8004d32:	f7ff bf81 	b.w	8004c38 <_malloc_r>
 8004d36:	b92a      	cbnz	r2, 8004d44 <_realloc_r+0x24>
 8004d38:	f7ff ff12 	bl	8004b60 <_free_r>
 8004d3c:	4625      	mov	r5, r4
 8004d3e:	4628      	mov	r0, r5
 8004d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d44:	f000 f838 	bl	8004db8 <_malloc_usable_size_r>
 8004d48:	4284      	cmp	r4, r0
 8004d4a:	4607      	mov	r7, r0
 8004d4c:	d802      	bhi.n	8004d54 <_realloc_r+0x34>
 8004d4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d52:	d812      	bhi.n	8004d7a <_realloc_r+0x5a>
 8004d54:	4621      	mov	r1, r4
 8004d56:	4640      	mov	r0, r8
 8004d58:	f7ff ff6e 	bl	8004c38 <_malloc_r>
 8004d5c:	4605      	mov	r5, r0
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	d0ed      	beq.n	8004d3e <_realloc_r+0x1e>
 8004d62:	42bc      	cmp	r4, r7
 8004d64:	4622      	mov	r2, r4
 8004d66:	4631      	mov	r1, r6
 8004d68:	bf28      	it	cs
 8004d6a:	463a      	movcs	r2, r7
 8004d6c:	f7ff fbb8 	bl	80044e0 <memcpy>
 8004d70:	4631      	mov	r1, r6
 8004d72:	4640      	mov	r0, r8
 8004d74:	f7ff fef4 	bl	8004b60 <_free_r>
 8004d78:	e7e1      	b.n	8004d3e <_realloc_r+0x1e>
 8004d7a:	4635      	mov	r5, r6
 8004d7c:	e7df      	b.n	8004d3e <_realloc_r+0x1e>
	...

08004d80 <_sbrk_r>:
 8004d80:	b538      	push	{r3, r4, r5, lr}
 8004d82:	4d06      	ldr	r5, [pc, #24]	; (8004d9c <_sbrk_r+0x1c>)
 8004d84:	2300      	movs	r3, #0
 8004d86:	4604      	mov	r4, r0
 8004d88:	4608      	mov	r0, r1
 8004d8a:	602b      	str	r3, [r5, #0]
 8004d8c:	f7fd f9c2 	bl	8002114 <_sbrk>
 8004d90:	1c43      	adds	r3, r0, #1
 8004d92:	d102      	bne.n	8004d9a <_sbrk_r+0x1a>
 8004d94:	682b      	ldr	r3, [r5, #0]
 8004d96:	b103      	cbz	r3, 8004d9a <_sbrk_r+0x1a>
 8004d98:	6023      	str	r3, [r4, #0]
 8004d9a:	bd38      	pop	{r3, r4, r5, pc}
 8004d9c:	20000218 	.word	0x20000218

08004da0 <__malloc_lock>:
 8004da0:	4801      	ldr	r0, [pc, #4]	; (8004da8 <__malloc_lock+0x8>)
 8004da2:	f000 b811 	b.w	8004dc8 <__retarget_lock_acquire_recursive>
 8004da6:	bf00      	nop
 8004da8:	2000021c 	.word	0x2000021c

08004dac <__malloc_unlock>:
 8004dac:	4801      	ldr	r0, [pc, #4]	; (8004db4 <__malloc_unlock+0x8>)
 8004dae:	f000 b80c 	b.w	8004dca <__retarget_lock_release_recursive>
 8004db2:	bf00      	nop
 8004db4:	2000021c 	.word	0x2000021c

08004db8 <_malloc_usable_size_r>:
 8004db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dbc:	1f18      	subs	r0, r3, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	bfbc      	itt	lt
 8004dc2:	580b      	ldrlt	r3, [r1, r0]
 8004dc4:	18c0      	addlt	r0, r0, r3
 8004dc6:	4770      	bx	lr

08004dc8 <__retarget_lock_acquire_recursive>:
 8004dc8:	4770      	bx	lr

08004dca <__retarget_lock_release_recursive>:
 8004dca:	4770      	bx	lr

08004dcc <_init>:
 8004dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dce:	bf00      	nop
 8004dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd2:	bc08      	pop	{r3}
 8004dd4:	469e      	mov	lr, r3
 8004dd6:	4770      	bx	lr

08004dd8 <_fini>:
 8004dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dda:	bf00      	nop
 8004ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dde:	bc08      	pop	{r3}
 8004de0:	469e      	mov	lr, r3
 8004de2:	4770      	bx	lr

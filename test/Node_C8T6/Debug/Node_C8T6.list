
Node_C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004210  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  08004320  08004320  00014320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004968  08004968  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08004968  08004968  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004968  08004968  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004968  08004968  00014968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800496c  0800496c  0001496c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004970  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000080  080049f0  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080049f0  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083f0  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001890  00000000  00000000  00028499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  00029d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002a720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001725a  00000000  00000000  0002b078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009823  00000000  00000000  000422d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d66  00000000  00000000  0004baf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf85b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c10  00000000  00000000  000cf8ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08004308 	.word	0x08004308

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08004308 	.word	0x08004308

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000174:	b480      	push	{r7}
 8000176:	b085      	sub	sp, #20
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000180:	4b0a      	ldr	r3, [pc, #40]	; (80001ac <NRF24_DelayMicroSeconds+0x38>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a0a      	ldr	r2, [pc, #40]	; (80001b0 <NRF24_DelayMicroSeconds+0x3c>)
 8000186:	fba2 2303 	umull	r2, r3, r2, r3
 800018a:	0c9a      	lsrs	r2, r3, #18
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	fb02 f303 	mul.w	r3, r2, r3
 8000192:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000194:	bf00      	nop
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	1e5a      	subs	r2, r3, #1
 800019a:	60fa      	str	r2, [r7, #12]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d1fa      	bne.n	8000196 <NRF24_DelayMicroSeconds+0x22>
}
 80001a0:	bf00      	nop
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	20000010 	.word	0x20000010
 80001b0:	165e9f81 	.word	0x165e9f81

080001b4 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d008      	beq.n	80001d4 <NRF24_csn+0x20>
 80001c2:	4b0a      	ldr	r3, [pc, #40]	; (80001ec <NRF24_csn+0x38>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4a0a      	ldr	r2, [pc, #40]	; (80001f0 <NRF24_csn+0x3c>)
 80001c8:	8811      	ldrh	r1, [r2, #0]
 80001ca:	2201      	movs	r2, #1
 80001cc:	4618      	mov	r0, r3
 80001ce:	f002 f880 	bl	80022d2 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80001d2:	e007      	b.n	80001e4 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80001d4:	4b05      	ldr	r3, [pc, #20]	; (80001ec <NRF24_csn+0x38>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a05      	ldr	r2, [pc, #20]	; (80001f0 <NRF24_csn+0x3c>)
 80001da:	8811      	ldrh	r1, [r2, #0]
 80001dc:	2200      	movs	r2, #0
 80001de:	4618      	mov	r0, r3
 80001e0:	f002 f877 	bl	80022d2 <HAL_GPIO_WritePin>
}
 80001e4:	bf00      	nop
 80001e6:	3708      	adds	r7, #8
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	200000b0 	.word	0x200000b0
 80001f0:	200000b4 	.word	0x200000b4

080001f4 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d008      	beq.n	8000214 <NRF24_ce+0x20>
 8000202:	4b0a      	ldr	r3, [pc, #40]	; (800022c <NRF24_ce+0x38>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a0a      	ldr	r2, [pc, #40]	; (8000230 <NRF24_ce+0x3c>)
 8000208:	8811      	ldrh	r1, [r2, #0]
 800020a:	2201      	movs	r2, #1
 800020c:	4618      	mov	r0, r3
 800020e:	f002 f860 	bl	80022d2 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000212:	e007      	b.n	8000224 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000214:	4b05      	ldr	r3, [pc, #20]	; (800022c <NRF24_ce+0x38>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a05      	ldr	r2, [pc, #20]	; (8000230 <NRF24_ce+0x3c>)
 800021a:	8811      	ldrh	r1, [r2, #0]
 800021c:	2200      	movs	r2, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f002 f857 	bl	80022d2 <HAL_GPIO_WritePin>
}
 8000224:	bf00      	nop
 8000226:	3708      	adds	r7, #8
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}
 800022c:	200000b0 	.word	0x200000b0
 8000230:	200000b6 	.word	0x200000b6

08000234 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800023e:	2000      	movs	r0, #0
 8000240:	f7ff ffb8 	bl	80001b4 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	f003 031f 	and.w	r3, r3, #31
 800024a:	b2db      	uxtb	r3, r3
 800024c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800024e:	f107 010c 	add.w	r1, r7, #12
 8000252:	2364      	movs	r3, #100	; 0x64
 8000254:	2201      	movs	r2, #1
 8000256:	480a      	ldr	r0, [pc, #40]	; (8000280 <NRF24_read_register+0x4c>)
 8000258:	f002 fd0a 	bl	8002c70 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800025c:	f107 030c 	add.w	r3, r7, #12
 8000260:	1c59      	adds	r1, r3, #1
 8000262:	2364      	movs	r3, #100	; 0x64
 8000264:	2201      	movs	r2, #1
 8000266:	4806      	ldr	r0, [pc, #24]	; (8000280 <NRF24_read_register+0x4c>)
 8000268:	f002 fe3e 	bl	8002ee8 <HAL_SPI_Receive>
	retData = spiBuf[1];
 800026c:	7b7b      	ldrb	r3, [r7, #13]
 800026e:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000270:	2001      	movs	r0, #1
 8000272:	f7ff ff9f 	bl	80001b4 <NRF24_csn>
	return retData;
 8000276:	7bfb      	ldrb	r3, [r7, #15]
}
 8000278:	4618      	mov	r0, r3
 800027a:	3710      	adds	r7, #16
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	200000b8 	.word	0x200000b8

08000284 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	6039      	str	r1, [r7, #0]
 800028e:	71fb      	strb	r3, [r7, #7]
 8000290:	4613      	mov	r3, r2
 8000292:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000294:	2000      	movs	r0, #0
 8000296:	f7ff ff8d 	bl	80001b4 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	f003 031f 	and.w	r3, r3, #31
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80002a4:	f107 010c 	add.w	r1, r7, #12
 80002a8:	2364      	movs	r3, #100	; 0x64
 80002aa:	2201      	movs	r2, #1
 80002ac:	4808      	ldr	r0, [pc, #32]	; (80002d0 <NRF24_read_registerN+0x4c>)
 80002ae:	f002 fcdf 	bl	8002c70 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80002b2:	79bb      	ldrb	r3, [r7, #6]
 80002b4:	b29a      	uxth	r2, r3
 80002b6:	2364      	movs	r3, #100	; 0x64
 80002b8:	6839      	ldr	r1, [r7, #0]
 80002ba:	4805      	ldr	r0, [pc, #20]	; (80002d0 <NRF24_read_registerN+0x4c>)
 80002bc:	f002 fe14 	bl	8002ee8 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80002c0:	2001      	movs	r0, #1
 80002c2:	f7ff ff77 	bl	80001b4 <NRF24_csn>
}
 80002c6:	bf00      	nop
 80002c8:	3710      	adds	r7, #16
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	200000b8 	.word	0x200000b8

080002d4 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	460a      	mov	r2, r1
 80002de:	71fb      	strb	r3, [r7, #7]
 80002e0:	4613      	mov	r3, r2
 80002e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80002e4:	2000      	movs	r0, #0
 80002e6:	f7ff ff65 	bl	80001b4 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	f043 0320 	orr.w	r3, r3, #32
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80002f4:	79bb      	ldrb	r3, [r7, #6]
 80002f6:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80002f8:	f107 010c 	add.w	r1, r7, #12
 80002fc:	2364      	movs	r3, #100	; 0x64
 80002fe:	2202      	movs	r2, #2
 8000300:	4804      	ldr	r0, [pc, #16]	; (8000314 <NRF24_write_register+0x40>)
 8000302:	f002 fcb5 	bl	8002c70 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000306:	2001      	movs	r0, #1
 8000308:	f7ff ff54 	bl	80001b4 <NRF24_csn>
}
 800030c:	bf00      	nop
 800030e:	3710      	adds	r7, #16
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	200000b8 	.word	0x200000b8

08000318 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	6039      	str	r1, [r7, #0]
 8000322:	71fb      	strb	r3, [r7, #7]
 8000324:	4613      	mov	r3, r2
 8000326:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000328:	2000      	movs	r0, #0
 800032a:	f7ff ff43 	bl	80001b4 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	f043 0320 	orr.w	r3, r3, #32
 8000334:	b2db      	uxtb	r3, r3
 8000336:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000338:	f107 010c 	add.w	r1, r7, #12
 800033c:	2364      	movs	r3, #100	; 0x64
 800033e:	2201      	movs	r2, #1
 8000340:	4808      	ldr	r0, [pc, #32]	; (8000364 <NRF24_write_registerN+0x4c>)
 8000342:	f002 fc95 	bl	8002c70 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000346:	79bb      	ldrb	r3, [r7, #6]
 8000348:	b29a      	uxth	r2, r3
 800034a:	2364      	movs	r3, #100	; 0x64
 800034c:	6839      	ldr	r1, [r7, #0]
 800034e:	4805      	ldr	r0, [pc, #20]	; (8000364 <NRF24_write_registerN+0x4c>)
 8000350:	f002 fc8e 	bl	8002c70 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000354:	2001      	movs	r0, #1
 8000356:	f7ff ff2d 	bl	80001b4 <NRF24_csn>
}
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	200000b8 	.word	0x200000b8

08000368 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	460b      	mov	r3, r1
 8000372:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000374:	2000      	movs	r0, #0
 8000376:	f7ff ff1d 	bl	80001b4 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800037a:	23a0      	movs	r3, #160	; 0xa0
 800037c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 800037e:	f107 010f 	add.w	r1, r7, #15
 8000382:	2364      	movs	r3, #100	; 0x64
 8000384:	2201      	movs	r2, #1
 8000386:	4808      	ldr	r0, [pc, #32]	; (80003a8 <NRF24_write_payload+0x40>)
 8000388:	f002 fc72 	bl	8002c70 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 800038c:	78fb      	ldrb	r3, [r7, #3]
 800038e:	b29a      	uxth	r2, r3
 8000390:	2364      	movs	r3, #100	; 0x64
 8000392:	6879      	ldr	r1, [r7, #4]
 8000394:	4804      	ldr	r0, [pc, #16]	; (80003a8 <NRF24_write_payload+0x40>)
 8000396:	f002 fc6b 	bl	8002c70 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800039a:	2001      	movs	r0, #1
 800039c:	f7ff ff0a 	bl	80001b4 <NRF24_csn>
}
 80003a0:	bf00      	nop
 80003a2:	3710      	adds	r7, #16
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	200000b8 	.word	0x200000b8

080003ac <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	460b      	mov	r3, r1
 80003b6:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80003b8:	f000 fa84 	bl	80008c4 <NRF24_getPayloadSize>
 80003bc:	4603      	mov	r3, r0
 80003be:	461a      	mov	r2, r3
 80003c0:	78fb      	ldrb	r3, [r7, #3]
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d303      	bcc.n	80003ce <NRF24_read_payload+0x22>
 80003c6:	f000 fa7d 	bl	80008c4 <NRF24_getPayloadSize>
 80003ca:	4603      	mov	r3, r0
 80003cc:	e000      	b.n	80003d0 <NRF24_read_payload+0x24>
 80003ce:	78fb      	ldrb	r3, [r7, #3]
 80003d0:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80003d2:	2000      	movs	r0, #0
 80003d4:	f7ff feee 	bl	80001b4 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80003d8:	2361      	movs	r3, #97	; 0x61
 80003da:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80003dc:	f107 010e 	add.w	r1, r7, #14
 80003e0:	2364      	movs	r3, #100	; 0x64
 80003e2:	2201      	movs	r2, #1
 80003e4:	4808      	ldr	r0, [pc, #32]	; (8000408 <NRF24_read_payload+0x5c>)
 80003e6:	f002 fc43 	bl	8002c70 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80003ea:	7bfb      	ldrb	r3, [r7, #15]
 80003ec:	b29a      	uxth	r2, r3
 80003ee:	2364      	movs	r3, #100	; 0x64
 80003f0:	6879      	ldr	r1, [r7, #4]
 80003f2:	4805      	ldr	r0, [pc, #20]	; (8000408 <NRF24_read_payload+0x5c>)
 80003f4:	f002 fd78 	bl	8002ee8 <HAL_SPI_Receive>
	NRF24_csn(1);
 80003f8:	2001      	movs	r0, #1
 80003fa:	f7ff fedb 	bl	80001b4 <NRF24_csn>
}
 80003fe:	bf00      	nop
 8000400:	3710      	adds	r7, #16
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	200000b8 	.word	0x200000b8

0800040c <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000410:	21ff      	movs	r1, #255	; 0xff
 8000412:	20e1      	movs	r0, #225	; 0xe1
 8000414:	f7ff ff5e 	bl	80002d4 <NRF24_write_register>
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}

0800041c <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000420:	21ff      	movs	r1, #255	; 0xff
 8000422:	20e2      	movs	r0, #226	; 0xe2
 8000424:	f7ff ff56 	bl	80002d4 <NRF24_write_register>
}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}

0800042c <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000432:	2007      	movs	r0, #7
 8000434:	f7ff fefe 	bl	8000234 <NRF24_read_register>
 8000438:	4603      	mov	r3, r0
 800043a:	71fb      	strb	r3, [r7, #7]
	return statReg;
 800043c:	79fb      	ldrb	r3, [r7, #7]
}
 800043e:	4618      	mov	r0, r3
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
	...

08000448 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000448:	b082      	sub	sp, #8
 800044a:	b580      	push	{r7, lr}
 800044c:	b084      	sub	sp, #16
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
 8000452:	61fb      	str	r3, [r7, #28]
 8000454:	460b      	mov	r3, r1
 8000456:	807b      	strh	r3, [r7, #2]
 8000458:	4613      	mov	r3, r2
 800045a:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800045c:	4b66      	ldr	r3, [pc, #408]	; (80005f8 <NRF24_begin+0x1b0>)
 800045e:	4618      	mov	r0, r3
 8000460:	f107 031c 	add.w	r3, r7, #28
 8000464:	2258      	movs	r2, #88	; 0x58
 8000466:	4619      	mov	r1, r3
 8000468:	f003 facc 	bl	8003a04 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 800046c:	4a63      	ldr	r2, [pc, #396]	; (80005fc <NRF24_begin+0x1b4>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000472:	4a63      	ldr	r2, [pc, #396]	; (8000600 <NRF24_begin+0x1b8>)
 8000474:	887b      	ldrh	r3, [r7, #2]
 8000476:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000478:	4a62      	ldr	r2, [pc, #392]	; (8000604 <NRF24_begin+0x1bc>)
 800047a:	883b      	ldrh	r3, [r7, #0]
 800047c:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 800047e:	2001      	movs	r0, #1
 8000480:	f7ff fe98 	bl	80001b4 <NRF24_csn>
	NRF24_ce(0);
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff feb5 	bl	80001f4 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800048a:	2005      	movs	r0, #5
 800048c:	f001 fc7e 	bl	8001d8c <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000490:	2108      	movs	r1, #8
 8000492:	2000      	movs	r0, #0
 8000494:	f7ff ff1e 	bl	80002d4 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000498:	213f      	movs	r1, #63	; 0x3f
 800049a:	2001      	movs	r0, #1
 800049c:	f7ff ff1a 	bl	80002d4 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80004a0:	2103      	movs	r1, #3
 80004a2:	2002      	movs	r0, #2
 80004a4:	f7ff ff16 	bl	80002d4 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80004a8:	2103      	movs	r1, #3
 80004aa:	2003      	movs	r0, #3
 80004ac:	f7ff ff12 	bl	80002d4 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80004b0:	2103      	movs	r1, #3
 80004b2:	2004      	movs	r0, #4
 80004b4:	f7ff ff0e 	bl	80002d4 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80004b8:	2102      	movs	r1, #2
 80004ba:	2005      	movs	r0, #5
 80004bc:	f7ff ff0a 	bl	80002d4 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80004c0:	210f      	movs	r1, #15
 80004c2:	2006      	movs	r0, #6
 80004c4:	f7ff ff06 	bl	80002d4 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80004c8:	210e      	movs	r1, #14
 80004ca:	2007      	movs	r0, #7
 80004cc:	f7ff ff02 	bl	80002d4 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80004d0:	2100      	movs	r1, #0
 80004d2:	2008      	movs	r0, #8
 80004d4:	f7ff fefe 	bl	80002d4 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80004d8:	2100      	movs	r1, #0
 80004da:	2009      	movs	r0, #9
 80004dc:	f7ff fefa 	bl	80002d4 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80004e0:	23e7      	movs	r3, #231	; 0xe7
 80004e2:	733b      	strb	r3, [r7, #12]
 80004e4:	23e7      	movs	r3, #231	; 0xe7
 80004e6:	72fb      	strb	r3, [r7, #11]
 80004e8:	23e7      	movs	r3, #231	; 0xe7
 80004ea:	72bb      	strb	r3, [r7, #10]
 80004ec:	23e7      	movs	r3, #231	; 0xe7
 80004ee:	727b      	strb	r3, [r7, #9]
 80004f0:	23e7      	movs	r3, #231	; 0xe7
 80004f2:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80004f4:	f107 0308 	add.w	r3, r7, #8
 80004f8:	2205      	movs	r2, #5
 80004fa:	4619      	mov	r1, r3
 80004fc:	200a      	movs	r0, #10
 80004fe:	f7ff ff0b 	bl	8000318 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000502:	23c2      	movs	r3, #194	; 0xc2
 8000504:	733b      	strb	r3, [r7, #12]
 8000506:	23c2      	movs	r3, #194	; 0xc2
 8000508:	72fb      	strb	r3, [r7, #11]
 800050a:	23c2      	movs	r3, #194	; 0xc2
 800050c:	72bb      	strb	r3, [r7, #10]
 800050e:	23c2      	movs	r3, #194	; 0xc2
 8000510:	727b      	strb	r3, [r7, #9]
 8000512:	23c2      	movs	r3, #194	; 0xc2
 8000514:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000516:	f107 0308 	add.w	r3, r7, #8
 800051a:	2205      	movs	r2, #5
 800051c:	4619      	mov	r1, r3
 800051e:	200b      	movs	r0, #11
 8000520:	f7ff fefa 	bl	8000318 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000524:	21c3      	movs	r1, #195	; 0xc3
 8000526:	200c      	movs	r0, #12
 8000528:	f7ff fed4 	bl	80002d4 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 800052c:	21c4      	movs	r1, #196	; 0xc4
 800052e:	200d      	movs	r0, #13
 8000530:	f7ff fed0 	bl	80002d4 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000534:	21c5      	movs	r1, #197	; 0xc5
 8000536:	200e      	movs	r0, #14
 8000538:	f7ff fecc 	bl	80002d4 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 800053c:	21c6      	movs	r1, #198	; 0xc6
 800053e:	200f      	movs	r0, #15
 8000540:	f7ff fec8 	bl	80002d4 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000544:	23e7      	movs	r3, #231	; 0xe7
 8000546:	733b      	strb	r3, [r7, #12]
 8000548:	23e7      	movs	r3, #231	; 0xe7
 800054a:	72fb      	strb	r3, [r7, #11]
 800054c:	23e7      	movs	r3, #231	; 0xe7
 800054e:	72bb      	strb	r3, [r7, #10]
 8000550:	23e7      	movs	r3, #231	; 0xe7
 8000552:	727b      	strb	r3, [r7, #9]
 8000554:	23e7      	movs	r3, #231	; 0xe7
 8000556:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000558:	f107 0308 	add.w	r3, r7, #8
 800055c:	2205      	movs	r2, #5
 800055e:	4619      	mov	r1, r3
 8000560:	2010      	movs	r0, #16
 8000562:	f7ff fed9 	bl	8000318 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000566:	2100      	movs	r1, #0
 8000568:	2011      	movs	r0, #17
 800056a:	f7ff feb3 	bl	80002d4 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800056e:	2100      	movs	r1, #0
 8000570:	2012      	movs	r0, #18
 8000572:	f7ff feaf 	bl	80002d4 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000576:	2100      	movs	r1, #0
 8000578:	2013      	movs	r0, #19
 800057a:	f7ff feab 	bl	80002d4 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800057e:	2100      	movs	r1, #0
 8000580:	2014      	movs	r0, #20
 8000582:	f7ff fea7 	bl	80002d4 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000586:	2100      	movs	r1, #0
 8000588:	2015      	movs	r0, #21
 800058a:	f7ff fea3 	bl	80002d4 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800058e:	2100      	movs	r1, #0
 8000590:	2016      	movs	r0, #22
 8000592:	f7ff fe9f 	bl	80002d4 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000596:	f000 fb25 	bl	8000be4 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800059a:	2100      	movs	r1, #0
 800059c:	201c      	movs	r0, #28
 800059e:	f7ff fe99 	bl	80002d4 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80005a2:	2100      	movs	r1, #0
 80005a4:	201d      	movs	r0, #29
 80005a6:	f7ff fe95 	bl	80002d4 <NRF24_write_register>
	printRadioSettings();
 80005aa:	f000 fb35 	bl	8000c18 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80005ae:	210f      	movs	r1, #15
 80005b0:	200f      	movs	r0, #15
 80005b2:	f000 f941 	bl	8000838 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80005b6:	2003      	movs	r0, #3
 80005b8:	f000 f9c3 	bl	8000942 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80005bc:	2001      	movs	r0, #1
 80005be:	f000 f9f9 	bl	80009b4 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80005c2:	2002      	movs	r0, #2
 80005c4:	f000 fa3c 	bl	8000a40 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80005c8:	f000 f98e 	bl	80008e8 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80005cc:	2020      	movs	r0, #32
 80005ce:	f000 f963 	bl	8000898 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80005d2:	f000 fafe 	bl	8000bd2 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80005d6:	204c      	movs	r0, #76	; 0x4c
 80005d8:	f000 f949 	bl	800086e <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80005dc:	f7ff ff16 	bl	800040c <NRF24_flush_tx>
	NRF24_flush_rx();
 80005e0:	f7ff ff1c 	bl	800041c <NRF24_flush_rx>
	
	NRF24_powerDown();
 80005e4:	f000 fa54 	bl	8000a90 <NRF24_powerDown>
	
}
 80005e8:	bf00      	nop
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005f2:	b002      	add	sp, #8
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	200000b8 	.word	0x200000b8
 80005fc:	200000b0 	.word	0x200000b0
 8000600:	200000b4 	.word	0x200000b4
 8000604:	200000b6 	.word	0x200000b6

08000608 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 800060c:	2000      	movs	r0, #0
 800060e:	f7ff fe11 	bl	8000234 <NRF24_read_register>
 8000612:	4603      	mov	r3, r0
 8000614:	f043 0303 	orr.w	r3, r3, #3
 8000618:	b2db      	uxtb	r3, r3
 800061a:	4619      	mov	r1, r3
 800061c:	2000      	movs	r0, #0
 800061e:	f7ff fe59 	bl	80002d4 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <NRF24_startListening+0x48>)
 8000624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000628:	4313      	orrs	r3, r2
 800062a:	d004      	beq.n	8000636 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 800062c:	2205      	movs	r2, #5
 800062e:	4908      	ldr	r1, [pc, #32]	; (8000650 <NRF24_startListening+0x48>)
 8000630:	200a      	movs	r0, #10
 8000632:	f7ff fe71 	bl	8000318 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 8000636:	f7ff fee9 	bl	800040c <NRF24_flush_tx>
	NRF24_flush_rx();
 800063a:	f7ff feef 	bl	800041c <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 800063e:	2001      	movs	r0, #1
 8000640:	f7ff fdd8 	bl	80001f4 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000644:	2096      	movs	r0, #150	; 0x96
 8000646:	f7ff fd95 	bl	8000174 <NRF24_DelayMicroSeconds>
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200000a0 	.word	0x200000a0

08000654 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000658:	2000      	movs	r0, #0
 800065a:	f7ff fdcb 	bl	80001f4 <NRF24_ce>
	NRF24_flush_tx();
 800065e:	f7ff fed5 	bl	800040c <NRF24_flush_tx>
	NRF24_flush_rx();
 8000662:	f7ff fedb 	bl	800041c <NRF24_flush_rx>
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000678:	f000 faab 	bl	8000bd2 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 800067c:	78fb      	ldrb	r3, [r7, #3]
 800067e:	4619      	mov	r1, r3
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f000 fa44 	bl	8000b0e <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000686:	f001 fb77 	bl	8001d78 <HAL_GetTick>
 800068a:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 800068c:	230a      	movs	r3, #10
 800068e:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000690:	f107 030d 	add.w	r3, r7, #13
 8000694:	2201      	movs	r2, #1
 8000696:	4619      	mov	r1, r3
 8000698:	2008      	movs	r0, #8
 800069a:	f7ff fdf3 	bl	8000284 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 800069e:	f7ff fec5 	bl	800042c <NRF24_get_status>
 80006a2:	4603      	mov	r3, r0
 80006a4:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d107      	bne.n	80006c0 <NRF24_write+0x54>
 80006b0:	f001 fb62 	bl	8001d78 <HAL_GetTick>
 80006b4:	4602      	mov	r2, r0
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	693a      	ldr	r2, [r7, #16]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d8e7      	bhi.n	8000690 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 80006c0:	f107 010b 	add.w	r1, r7, #11
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	4a0c      	ldr	r2, [pc, #48]	; (80006fc <NRF24_write+0x90>)
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fa4e 	bl	8000b6c <NRF24_whatHappened>
	retStatus = tx_ok;
 80006d0:	7b3b      	ldrb	r3, [r7, #12]
 80006d2:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <NRF24_write+0x90>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d005      	beq.n	80006e8 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 80006dc:	f000 f8fc 	bl	80008d8 <NRF24_getDynamicPayloadSize>
 80006e0:	4603      	mov	r3, r0
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <NRF24_write+0x94>)
 80006e6:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 80006e8:	f000 f80c 	bl	8000704 <NRF24_available>
	NRF24_flush_tx();
 80006ec:	f7ff fe8e 	bl	800040c <NRF24_flush_tx>
	return retStatus;
 80006f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3718      	adds	r7, #24
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000a8 	.word	0x200000a8
 8000700:	200000a9 	.word	0x200000a9

08000704 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000708:	2000      	movs	r0, #0
 800070a:	f000 f9d0 	bl	8000aae <NRF24_availablePipe>
 800070e:	4603      	mov	r3, r0
}
 8000710:	4618      	mov	r0, r3
 8000712:	bd80      	pop	{r7, pc}

08000714 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000720:	78fb      	ldrb	r3, [r7, #3]
 8000722:	4619      	mov	r1, r3
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff fe41 	bl	80003ac <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800072a:	2017      	movs	r0, #23
 800072c:	f7ff fd82 	bl	8000234 <NRF24_read_register>
 8000730:	4603      	mov	r3, r0
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000738:	f7ff fe70 	bl	800041c <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 800073c:	f000 f8cc 	bl	80008d8 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	2b00      	cmp	r3, #0
 8000744:	bf14      	ite	ne
 8000746:	2301      	movne	r3, #1
 8000748:	2300      	moveq	r3, #0
 800074a:	b2db      	uxtb	r3, r3
}
 800074c:	4618      	mov	r0, r3
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 800075e:	463b      	mov	r3, r7
 8000760:	2205      	movs	r2, #5
 8000762:	4619      	mov	r1, r3
 8000764:	200a      	movs	r0, #10
 8000766:	f7ff fdd7 	bl	8000318 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 800076a:	463b      	mov	r3, r7
 800076c:	2205      	movs	r2, #5
 800076e:	4619      	mov	r1, r3
 8000770:	2010      	movs	r0, #16
 8000772:	f7ff fdd1 	bl	8000318 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000776:	2320      	movs	r3, #32
 8000778:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <NRF24_openWritingPipe+0x44>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	7bfa      	ldrb	r2, [r7, #15]
 8000780:	4293      	cmp	r3, r2
 8000782:	bf28      	it	cs
 8000784:	4613      	movcs	r3, r2
 8000786:	b2db      	uxtb	r3, r3
 8000788:	4619      	mov	r1, r3
 800078a:	2011      	movs	r0, #17
 800078c:	f7ff fda2 	bl	80002d4 <NRF24_write_register>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200000aa 	.word	0x200000aa

0800079c <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4601      	mov	r1, r0
 80007a4:	e9c7 2300 	strd	r2, r3, [r7]
 80007a8:	460b      	mov	r3, r1
 80007aa:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d104      	bne.n	80007bc <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 80007b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80007b6:	491c      	ldr	r1, [pc, #112]	; (8000828 <NRF24_openReadingPipe+0x8c>)
 80007b8:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	2b06      	cmp	r3, #6
 80007c0:	d82d      	bhi.n	800081e <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d808      	bhi.n	80007da <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	4a18      	ldr	r2, [pc, #96]	; (800082c <NRF24_openReadingPipe+0x90>)
 80007cc:	5cd3      	ldrb	r3, [r2, r3]
 80007ce:	4639      	mov	r1, r7
 80007d0:	2205      	movs	r2, #5
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fda0 	bl	8000318 <NRF24_write_registerN>
 80007d8:	e007      	b.n	80007ea <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	4a13      	ldr	r2, [pc, #76]	; (800082c <NRF24_openReadingPipe+0x90>)
 80007de:	5cd3      	ldrb	r3, [r2, r3]
 80007e0:	4639      	mov	r1, r7
 80007e2:	2201      	movs	r2, #1
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff fd97 	bl	8000318 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	4a10      	ldr	r2, [pc, #64]	; (8000830 <NRF24_openReadingPipe+0x94>)
 80007ee:	5cd3      	ldrb	r3, [r2, r3]
 80007f0:	4a10      	ldr	r2, [pc, #64]	; (8000834 <NRF24_openReadingPipe+0x98>)
 80007f2:	7812      	ldrb	r2, [r2, #0]
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fd6c 	bl	80002d4 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 80007fc:	2002      	movs	r0, #2
 80007fe:	f7ff fd19 	bl	8000234 <NRF24_read_register>
 8000802:	4603      	mov	r3, r0
 8000804:	b25a      	sxtb	r2, r3
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	2101      	movs	r1, #1
 800080a:	fa01 f303 	lsl.w	r3, r1, r3
 800080e:	b25b      	sxtb	r3, r3
 8000810:	4313      	orrs	r3, r2
 8000812:	b25b      	sxtb	r3, r3
 8000814:	b2db      	uxtb	r3, r3
 8000816:	4619      	mov	r1, r3
 8000818:	2002      	movs	r0, #2
 800081a:	f7ff fd5b 	bl	80002d4 <NRF24_write_register>
	}
	
}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200000a0 	.word	0x200000a0
 800082c:	0800490c 	.word	0x0800490c
 8000830:	08004914 	.word	0x08004914
 8000834:	200000aa 	.word	0x200000aa

08000838 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	460a      	mov	r2, r1
 8000842:	71fb      	strb	r3, [r7, #7]
 8000844:	4613      	mov	r3, r2
 8000846:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	011b      	lsls	r3, r3, #4
 800084c:	b25a      	sxtb	r2, r3
 800084e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000852:	f003 030f 	and.w	r3, r3, #15
 8000856:	b25b      	sxtb	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	b25b      	sxtb	r3, r3
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4619      	mov	r1, r3
 8000860:	2004      	movs	r0, #4
 8000862:	f7ff fd37 	bl	80002d4 <NRF24_write_register>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b084      	sub	sp, #16
 8000872:	af00      	add	r7, sp, #0
 8000874:	4603      	mov	r3, r0
 8000876:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000878:	237f      	movs	r3, #127	; 0x7f
 800087a:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 800087c:	7bfa      	ldrb	r2, [r7, #15]
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	4293      	cmp	r3, r2
 8000882:	bf28      	it	cs
 8000884:	4613      	movcs	r3, r2
 8000886:	b2db      	uxtb	r3, r3
 8000888:	4619      	mov	r1, r3
 800088a:	2005      	movs	r0, #5
 800088c:	f7ff fd22 	bl	80002d4 <NRF24_write_register>
}
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80008a2:	2320      	movs	r3, #32
 80008a4:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80008a6:	7bfa      	ldrb	r2, [r7, #15]
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	4293      	cmp	r3, r2
 80008ac:	bf28      	it	cs
 80008ae:	4613      	movcs	r3, r2
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <NRF24_setPayloadSize+0x28>)
 80008b4:	701a      	strb	r2, [r3, #0]
}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	200000aa 	.word	0x200000aa

080008c4 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
	return payload_size;
 80008c8:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <NRF24_getPayloadSize+0x10>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	200000aa 	.word	0x200000aa

080008d8 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80008dc:	2060      	movs	r0, #96	; 0x60
 80008de:	f7ff fca9 	bl	8000234 <NRF24_read_register>
 80008e2:	4603      	mov	r3, r0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80008ec:	201d      	movs	r0, #29
 80008ee:	f7ff fca1 	bl	8000234 <NRF24_read_register>
 80008f2:	4603      	mov	r3, r0
 80008f4:	f023 0304 	bic.w	r3, r3, #4
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	4619      	mov	r1, r3
 80008fc:	201d      	movs	r0, #29
 80008fe:	f7ff fce9 	bl	80002d4 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000902:	2100      	movs	r1, #0
 8000904:	201c      	movs	r0, #28
 8000906:	f7ff fce5 	bl	80002d4 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800090a:	4b02      	ldr	r3, [pc, #8]	; (8000914 <NRF24_disableDynamicPayloads+0x2c>)
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200000ab 	.word	0x200000ab

08000918 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d004      	beq.n	8000932 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000928:	213f      	movs	r1, #63	; 0x3f
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff fcd2 	bl	80002d4 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000930:	e003      	b.n	800093a <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000932:	2100      	movs	r1, #0
 8000934:	2001      	movs	r0, #1
 8000936:	f7ff fccd 	bl	80002d4 <NRF24_write_register>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b084      	sub	sp, #16
 8000946:	af00      	add	r7, sp, #0
 8000948:	4603      	mov	r3, r0
 800094a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800094c:	2006      	movs	r0, #6
 800094e:	f7ff fc71 	bl	8000234 <NRF24_read_register>
 8000952:	4603      	mov	r3, r0
 8000954:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000956:	7bfb      	ldrb	r3, [r7, #15]
 8000958:	f023 0306 	bic.w	r3, r3, #6
 800095c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b03      	cmp	r3, #3
 8000962:	d104      	bne.n	800096e <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	f043 0306 	orr.w	r3, r3, #6
 800096a:	73fb      	strb	r3, [r7, #15]
 800096c:	e019      	b.n	80009a2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d104      	bne.n	800097e <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	73fb      	strb	r3, [r7, #15]
 800097c:	e011      	b.n	80009a2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d104      	bne.n	800098e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	f043 0302 	orr.w	r3, r3, #2
 800098a:	73fb      	strb	r3, [r7, #15]
 800098c:	e009      	b.n	80009a2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d006      	beq.n	80009a2 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	2b04      	cmp	r3, #4
 8000998:	d103      	bne.n	80009a2 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	f043 0306 	orr.w	r3, r3, #6
 80009a0:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	4619      	mov	r1, r3
 80009a6:	2006      	movs	r0, #6
 80009a8:	f7ff fc94 	bl	80002d4 <NRF24_write_register>
}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80009be:	2300      	movs	r3, #0
 80009c0:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80009c2:	2006      	movs	r0, #6
 80009c4:	f7ff fc36 	bl	8000234 <NRF24_read_register>
 80009c8:	4603      	mov	r3, r0
 80009ca:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 80009cc:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <NRF24_setDataRate+0x88>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80009d2:	7bbb      	ldrb	r3, [r7, #14]
 80009d4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80009d8:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d107      	bne.n	80009f0 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 80009e0:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <NRF24_setDataRate+0x88>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 80009e6:	7bbb      	ldrb	r3, [r7, #14]
 80009e8:	f043 0320 	orr.w	r3, r3, #32
 80009ec:	73bb      	strb	r3, [r7, #14]
 80009ee:	e00d      	b.n	8000a0c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d107      	bne.n	8000a06 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <NRF24_setDataRate+0x88>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80009fc:	7bbb      	ldrb	r3, [r7, #14]
 80009fe:	f043 0308 	orr.w	r3, r3, #8
 8000a02:	73bb      	strb	r3, [r7, #14]
 8000a04:	e002      	b.n	8000a0c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <NRF24_setDataRate+0x88>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000a0c:	7bbb      	ldrb	r3, [r7, #14]
 8000a0e:	4619      	mov	r1, r3
 8000a10:	2006      	movs	r0, #6
 8000a12:	f7ff fc5f 	bl	80002d4 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000a16:	2006      	movs	r0, #6
 8000a18:	f7ff fc0c 	bl	8000234 <NRF24_read_register>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	7bbb      	ldrb	r3, [r7, #14]
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d102      	bne.n	8000a2c <NRF24_setDataRate+0x78>
  {
    result = true;
 8000a26:	2301      	movs	r3, #1
 8000a28:	73fb      	strb	r3, [r7, #15]
 8000a2a:	e002      	b.n	8000a32 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <NRF24_setDataRate+0x88>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200000ac 	.word	0x200000ac

08000a40 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f7ff fbf2 	bl	8000234 <NRF24_read_register>
 8000a50:	4603      	mov	r3, r0
 8000a52:	f023 030c 	bic.w	r3, r3, #12
 8000a56:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d00f      	beq.n	8000a7e <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d104      	bne.n	8000a6e <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	f043 0308 	orr.w	r3, r3, #8
 8000a6a:	73fb      	strb	r3, [r7, #15]
 8000a6c:	e007      	b.n	8000a7e <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	4619      	mov	r1, r3
 8000a82:	2000      	movs	r0, #0
 8000a84:	f7ff fc26 	bl	80002d4 <NRF24_write_register>
}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000a94:	2000      	movs	r0, #0
 8000a96:	f7ff fbcd 	bl	8000234 <NRF24_read_register>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	f023 0302 	bic.w	r3, r3, #2
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f7ff fc15 	bl	80002d4 <NRF24_write_register>
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}

08000aae <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b084      	sub	sp, #16
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000ab6:	f7ff fcb9 	bl	800042c <NRF24_get_status>
 8000aba:	4603      	mov	r3, r0
 8000abc:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	bf14      	ite	ne
 8000ac8:	2301      	movne	r3, #1
 8000aca:	2300      	moveq	r3, #0
 8000acc:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000ace:	7bbb      	ldrb	r3, [r7, #14]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d017      	beq.n	8000b04 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d007      	beq.n	8000aea <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	085b      	lsrs	r3, r3, #1
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	f003 0307 	and.w	r3, r3, #7
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000aea:	2140      	movs	r1, #64	; 0x40
 8000aec:	2007      	movs	r0, #7
 8000aee:	f7ff fbf1 	bl	80002d4 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	f003 0320 	and.w	r3, r3, #32
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d003      	beq.n	8000b04 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000afc:	2120      	movs	r1, #32
 8000afe:	2007      	movs	r0, #7
 8000b00:	f7ff fbe8 	bl	80002d4 <NRF24_write_register>
    }
  }
  return result;
 8000b04:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	460b      	mov	r3, r1
 8000b18:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff fb6a 	bl	80001f4 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000b20:	2000      	movs	r0, #0
 8000b22:	f7ff fb87 	bl	8000234 <NRF24_read_register>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	f023 0301 	bic.w	r3, r3, #1
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	4619      	mov	r1, r3
 8000b36:	2000      	movs	r0, #0
 8000b38:	f7ff fbcc 	bl	80002d4 <NRF24_write_register>
  NRF24_ce(1);
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f7ff fb59 	bl	80001f4 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8000b42:	2096      	movs	r0, #150	; 0x96
 8000b44:	f7ff fb16 	bl	8000174 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000b48:	78fb      	ldrb	r3, [r7, #3]
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff fc0b 	bl	8000368 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000b52:	2001      	movs	r0, #1
 8000b54:	f7ff fb4e 	bl	80001f4 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000b58:	200f      	movs	r0, #15
 8000b5a:	f7ff fb0b 	bl	8000174 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f7ff fb48 	bl	80001f4 <NRF24_ce>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000b78:	f7ff fc58 	bl	800042c <NRF24_get_status>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000b86:	2170      	movs	r1, #112	; 0x70
 8000b88:	2007      	movs	r0, #7
 8000b8a:	f7ff fba3 	bl	80002d4 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000b8e:	7dfb      	ldrb	r3, [r7, #23]
 8000b90:	f003 0320 	and.w	r3, r3, #32
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	bf14      	ite	ne
 8000b98:	2301      	movne	r3, #1
 8000b9a:	2300      	moveq	r3, #0
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000ba2:	7dfb      	ldrb	r3, [r7, #23]
 8000ba4:	f003 0310 	and.w	r3, r3, #16
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	bf14      	ite	ne
 8000bac:	2301      	movne	r3, #1
 8000bae:	2300      	moveq	r3, #0
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000bb6:	7dfb      	ldrb	r3, [r7, #23]
 8000bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	bf14      	ite	ne
 8000bc0:	2301      	movne	r3, #1
 8000bc2:	2300      	moveq	r3, #0
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	701a      	strb	r2, [r3, #0]
}
 8000bca:	bf00      	nop
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000bd6:	2170      	movs	r1, #112	; 0x70
 8000bd8:	2007      	movs	r0, #7
 8000bda:	f7ff fb7b 	bl	80002d4 <NRF24_write_register>
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff fae2 	bl	80001b4 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000bf0:	2350      	movs	r3, #80	; 0x50
 8000bf2:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000bf4:	2373      	movs	r3, #115	; 0x73
 8000bf6:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000bf8:	1d39      	adds	r1, r7, #4
 8000bfa:	2364      	movs	r3, #100	; 0x64
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <NRF24_ACTIVATE_cmd+0x30>)
 8000c00:	f002 f836 	bl	8002c70 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f7ff fad5 	bl	80001b4 <NRF24_csn>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200000b8 	.word	0x200000b8

08000c18 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1a:	b0a1      	sub	sp, #132	; 0x84
 8000c1c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	49c3      	ldr	r1, [pc, #780]	; (8000f30 <printRadioSettings+0x318>)
 8000c24:	4618      	mov	r0, r3
 8000c26:	f002 ff03 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c2a:	f107 0308 	add.w	r3, r7, #8
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fa98 	bl	8000164 <strlen>
 8000c34:	4603      	mov	r3, r0
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	f107 0108 	add.w	r1, r7, #8
 8000c3c:	230a      	movs	r3, #10
 8000c3e:	48bd      	ldr	r0, [pc, #756]	; (8000f34 <printRadioSettings+0x31c>)
 8000c40:	f002 fd4b 	bl	80036da <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000c44:	2000      	movs	r0, #0
 8000c46:	f7ff faf5 	bl	8000234 <NRF24_read_register>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000c50:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c54:	f003 0308 	and.w	r3, r3, #8
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d013      	beq.n	8000c84 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000c5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c60:	f003 0304 	and.w	r3, r3, #4
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d006      	beq.n	8000c76 <printRadioSettings+0x5e>
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	49b2      	ldr	r1, [pc, #712]	; (8000f38 <printRadioSettings+0x320>)
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f002 fede 	bl	8003a30 <siprintf>
 8000c74:	e00c      	b.n	8000c90 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	49b0      	ldr	r1, [pc, #704]	; (8000f3c <printRadioSettings+0x324>)
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f002 fed7 	bl	8003a30 <siprintf>
 8000c82:	e005      	b.n	8000c90 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000c84:	f107 0308 	add.w	r3, r7, #8
 8000c88:	49ad      	ldr	r1, [pc, #692]	; (8000f40 <printRadioSettings+0x328>)
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f002 fed0 	bl	8003a30 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c90:	f107 0308 	add.w	r3, r7, #8
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fa65 	bl	8000164 <strlen>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	f107 0108 	add.w	r1, r7, #8
 8000ca2:	230a      	movs	r3, #10
 8000ca4:	48a3      	ldr	r0, [pc, #652]	; (8000f34 <printRadioSettings+0x31c>)
 8000ca6:	f002 fd18 	bl	80036da <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff fac2 	bl	8000234 <NRF24_read_register>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cb6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cba:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	bfcc      	ite	gt
 8000cc2:	2301      	movgt	r3, #1
 8000cc4:	2300      	movle	r3, #0
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cce:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	bfcc      	ite	gt
 8000cd6:	2301      	movgt	r3, #1
 8000cd8:	2300      	movle	r3, #0
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cde:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ce2:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	bfcc      	ite	gt
 8000cea:	2301      	movgt	r3, #1
 8000cec:	2300      	movle	r3, #0
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cf2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cf6:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	bfcc      	ite	gt
 8000cfe:	2301      	movgt	r3, #1
 8000d00:	2300      	movle	r3, #0
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d06:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d0a:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	bfcc      	ite	gt
 8000d12:	2301      	movgt	r3, #1
 8000d14:	2300      	movle	r3, #0
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d1e:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	bfcc      	ite	gt
 8000d26:	2301      	movgt	r3, #1
 8000d28:	2300      	movle	r3, #0
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	f107 0008 	add.w	r0, r7, #8
 8000d30:	9303      	str	r3, [sp, #12]
 8000d32:	9402      	str	r4, [sp, #8]
 8000d34:	9101      	str	r1, [sp, #4]
 8000d36:	9200      	str	r2, [sp, #0]
 8000d38:	4633      	mov	r3, r6
 8000d3a:	462a      	mov	r2, r5
 8000d3c:	4981      	ldr	r1, [pc, #516]	; (8000f44 <printRadioSettings+0x32c>)
 8000d3e:	f002 fe77 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d42:	f107 0308 	add.w	r3, r7, #8
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fa0c 	bl	8000164 <strlen>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	f107 0108 	add.w	r1, r7, #8
 8000d54:	230a      	movs	r3, #10
 8000d56:	4877      	ldr	r0, [pc, #476]	; (8000f34 <printRadioSettings+0x31c>)
 8000d58:	f002 fcbf 	bl	80036da <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	f7ff fa69 	bl	8000234 <NRF24_read_register>
 8000d62:	4603      	mov	r3, r0
 8000d64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d6c:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	bfcc      	ite	gt
 8000d74:	2301      	movgt	r3, #1
 8000d76:	2300      	movle	r3, #0
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d7c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d80:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	bfcc      	ite	gt
 8000d88:	2301      	movgt	r3, #1
 8000d8a:	2300      	movle	r3, #0
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d90:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d94:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	bfcc      	ite	gt
 8000d9c:	2301      	movgt	r3, #1
 8000d9e:	2300      	movle	r3, #0
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000da4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000da8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	bfcc      	ite	gt
 8000db0:	2301      	movgt	r3, #1
 8000db2:	2300      	movle	r3, #0
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000db8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dbc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	bfcc      	ite	gt
 8000dc4:	2301      	movgt	r3, #1
 8000dc6:	2300      	movle	r3, #0
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000dcc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dd0:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	bfcc      	ite	gt
 8000dd8:	2301      	movgt	r3, #1
 8000dda:	2300      	movle	r3, #0
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	f107 0008 	add.w	r0, r7, #8
 8000de2:	9303      	str	r3, [sp, #12]
 8000de4:	9402      	str	r4, [sp, #8]
 8000de6:	9101      	str	r1, [sp, #4]
 8000de8:	9200      	str	r2, [sp, #0]
 8000dea:	4633      	mov	r3, r6
 8000dec:	462a      	mov	r2, r5
 8000dee:	4956      	ldr	r1, [pc, #344]	; (8000f48 <printRadioSettings+0x330>)
 8000df0:	f002 fe1e 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000df4:	f107 0308 	add.w	r3, r7, #8
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff f9b3 	bl	8000164 <strlen>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	f107 0108 	add.w	r1, r7, #8
 8000e06:	230a      	movs	r3, #10
 8000e08:	484a      	ldr	r0, [pc, #296]	; (8000f34 <printRadioSettings+0x31c>)
 8000e0a:	f002 fc66 	bl	80036da <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8000e0e:	2003      	movs	r0, #3
 8000e10:	f7ff fa10 	bl	8000234 <NRF24_read_register>
 8000e14:	4603      	mov	r3, r0
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8000e1e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e22:	3302      	adds	r3, #2
 8000e24:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8000e28:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	4946      	ldr	r1, [pc, #280]	; (8000f4c <printRadioSettings+0x334>)
 8000e32:	4618      	mov	r0, r3
 8000e34:	f002 fdfc 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e38:	f107 0308 	add.w	r3, r7, #8
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff f991 	bl	8000164 <strlen>
 8000e42:	4603      	mov	r3, r0
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	f107 0108 	add.w	r1, r7, #8
 8000e4a:	230a      	movs	r3, #10
 8000e4c:	4839      	ldr	r0, [pc, #228]	; (8000f34 <printRadioSettings+0x31c>)
 8000e4e:	f002 fc44 	bl	80036da <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8000e52:	2005      	movs	r0, #5
 8000e54:	f7ff f9ee 	bl	8000234 <NRF24_read_register>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8000e5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000e66:	f107 0308 	add.w	r3, r7, #8
 8000e6a:	4939      	ldr	r1, [pc, #228]	; (8000f50 <printRadioSettings+0x338>)
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f002 fddf 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff f974 	bl	8000164 <strlen>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	f107 0108 	add.w	r1, r7, #8
 8000e84:	230a      	movs	r3, #10
 8000e86:	482b      	ldr	r0, [pc, #172]	; (8000f34 <printRadioSettings+0x31c>)
 8000e88:	f002 fc27 	bl	80036da <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8000e8c:	2006      	movs	r0, #6
 8000e8e:	f7ff f9d1 	bl	8000234 <NRF24_read_register>
 8000e92:	4603      	mov	r3, r0
 8000e94:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8000e98:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e9c:	f003 0308 	and.w	r3, r3, #8
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d006      	beq.n	8000eb2 <printRadioSettings+0x29a>
 8000ea4:	f107 0308 	add.w	r3, r7, #8
 8000ea8:	492a      	ldr	r1, [pc, #168]	; (8000f54 <printRadioSettings+0x33c>)
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f002 fdc0 	bl	8003a30 <siprintf>
 8000eb0:	e005      	b.n	8000ebe <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8000eb2:	f107 0308 	add.w	r3, r7, #8
 8000eb6:	4928      	ldr	r1, [pc, #160]	; (8000f58 <printRadioSettings+0x340>)
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f002 fdb9 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff f94e 	bl	8000164 <strlen>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	f107 0108 	add.w	r1, r7, #8
 8000ed0:	230a      	movs	r3, #10
 8000ed2:	4818      	ldr	r0, [pc, #96]	; (8000f34 <printRadioSettings+0x31c>)
 8000ed4:	f002 fc01 	bl	80036da <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8000ed8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000edc:	f003 0306 	and.w	r3, r3, #6
 8000ee0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8000ee4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ee8:	085b      	lsrs	r3, r3, #1
 8000eea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8000eee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d106      	bne.n	8000f04 <printRadioSettings+0x2ec>
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	4918      	ldr	r1, [pc, #96]	; (8000f5c <printRadioSettings+0x344>)
 8000efc:	4618      	mov	r0, r3
 8000efe:	f002 fd97 	bl	8003a30 <siprintf>
 8000f02:	e03b      	b.n	8000f7c <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8000f04:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d106      	bne.n	8000f1a <printRadioSettings+0x302>
 8000f0c:	f107 0308 	add.w	r3, r7, #8
 8000f10:	4913      	ldr	r1, [pc, #76]	; (8000f60 <printRadioSettings+0x348>)
 8000f12:	4618      	mov	r0, r3
 8000f14:	f002 fd8c 	bl	8003a30 <siprintf>
 8000f18:	e030      	b.n	8000f7c <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8000f1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d122      	bne.n	8000f68 <printRadioSettings+0x350>
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	490f      	ldr	r1, [pc, #60]	; (8000f64 <printRadioSettings+0x34c>)
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f002 fd81 	bl	8003a30 <siprintf>
 8000f2e:	e025      	b.n	8000f7c <printRadioSettings+0x364>
 8000f30:	08004320 	.word	0x08004320
 8000f34:	20000110 	.word	0x20000110
 8000f38:	08004354 	.word	0x08004354
 8000f3c:	08004370 	.word	0x08004370
 8000f40:	0800438c 	.word	0x0800438c
 8000f44:	080043a0 	.word	0x080043a0
 8000f48:	080043e4 	.word	0x080043e4
 8000f4c:	08004430 	.word	0x08004430
 8000f50:	0800444c 	.word	0x0800444c
 8000f54:	08004460 	.word	0x08004460
 8000f58:	08004478 	.word	0x08004478
 8000f5c:	08004490 	.word	0x08004490
 8000f60:	080044a4 	.word	0x080044a4
 8000f64:	080044b8 	.word	0x080044b8
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8000f68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	d105      	bne.n	8000f7c <printRadioSettings+0x364>
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	49d7      	ldr	r1, [pc, #860]	; (80012d4 <printRadioSettings+0x6bc>)
 8000f76:	4618      	mov	r0, r3
 8000f78:	f002 fd5a 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f7c:	f107 0308 	add.w	r3, r7, #8
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff f8ef 	bl	8000164 <strlen>
 8000f86:	4603      	mov	r3, r0
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	f107 0108 	add.w	r1, r7, #8
 8000f8e:	230a      	movs	r3, #10
 8000f90:	48d1      	ldr	r0, [pc, #836]	; (80012d8 <printRadioSettings+0x6c0>)
 8000f92:	f002 fba2 	bl	80036da <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8000f96:	463b      	mov	r3, r7
 8000f98:	2205      	movs	r2, #5
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	200a      	movs	r0, #10
 8000f9e:	f7ff f971 	bl	8000284 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000fa2:	793b      	ldrb	r3, [r7, #4]
 8000fa4:	461c      	mov	r4, r3
 8000fa6:	78fb      	ldrb	r3, [r7, #3]
 8000fa8:	461d      	mov	r5, r3
 8000faa:	78bb      	ldrb	r3, [r7, #2]
 8000fac:	787a      	ldrb	r2, [r7, #1]
 8000fae:	7839      	ldrb	r1, [r7, #0]
 8000fb0:	f107 0008 	add.w	r0, r7, #8
 8000fb4:	9102      	str	r1, [sp, #8]
 8000fb6:	9201      	str	r2, [sp, #4]
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	462b      	mov	r3, r5
 8000fbc:	4622      	mov	r2, r4
 8000fbe:	49c7      	ldr	r1, [pc, #796]	; (80012dc <printRadioSettings+0x6c4>)
 8000fc0:	f002 fd36 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff f8cb 	bl	8000164 <strlen>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	f107 0108 	add.w	r1, r7, #8
 8000fd6:	230a      	movs	r3, #10
 8000fd8:	48bf      	ldr	r0, [pc, #764]	; (80012d8 <printRadioSettings+0x6c0>)
 8000fda:	f002 fb7e 	bl	80036da <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8000fde:	463b      	mov	r3, r7
 8000fe0:	2205      	movs	r2, #5
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	200b      	movs	r0, #11
 8000fe6:	f7ff f94d 	bl	8000284 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000fea:	793b      	ldrb	r3, [r7, #4]
 8000fec:	461c      	mov	r4, r3
 8000fee:	78fb      	ldrb	r3, [r7, #3]
 8000ff0:	461d      	mov	r5, r3
 8000ff2:	78bb      	ldrb	r3, [r7, #2]
 8000ff4:	787a      	ldrb	r2, [r7, #1]
 8000ff6:	7839      	ldrb	r1, [r7, #0]
 8000ff8:	f107 0008 	add.w	r0, r7, #8
 8000ffc:	9102      	str	r1, [sp, #8]
 8000ffe:	9201      	str	r2, [sp, #4]
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	462b      	mov	r3, r5
 8001004:	4622      	mov	r2, r4
 8001006:	49b6      	ldr	r1, [pc, #728]	; (80012e0 <printRadioSettings+0x6c8>)
 8001008:	f002 fd12 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff f8a7 	bl	8000164 <strlen>
 8001016:	4603      	mov	r3, r0
 8001018:	b29a      	uxth	r2, r3
 800101a:	f107 0108 	add.w	r1, r7, #8
 800101e:	230a      	movs	r3, #10
 8001020:	48ad      	ldr	r0, [pc, #692]	; (80012d8 <printRadioSettings+0x6c0>)
 8001022:	f002 fb5a 	bl	80036da <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001026:	463b      	mov	r3, r7
 8001028:	2201      	movs	r2, #1
 800102a:	4619      	mov	r1, r3
 800102c:	200c      	movs	r0, #12
 800102e:	f7ff f929 	bl	8000284 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001032:	783b      	ldrb	r3, [r7, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	49aa      	ldr	r1, [pc, #680]	; (80012e4 <printRadioSettings+0x6cc>)
 800103c:	4618      	mov	r0, r3
 800103e:	f002 fcf7 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff f88c 	bl	8000164 <strlen>
 800104c:	4603      	mov	r3, r0
 800104e:	b29a      	uxth	r2, r3
 8001050:	f107 0108 	add.w	r1, r7, #8
 8001054:	230a      	movs	r3, #10
 8001056:	48a0      	ldr	r0, [pc, #640]	; (80012d8 <printRadioSettings+0x6c0>)
 8001058:	f002 fb3f 	bl	80036da <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800105c:	463b      	mov	r3, r7
 800105e:	2201      	movs	r2, #1
 8001060:	4619      	mov	r1, r3
 8001062:	200d      	movs	r0, #13
 8001064:	f7ff f90e 	bl	8000284 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001068:	783b      	ldrb	r3, [r7, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	499d      	ldr	r1, [pc, #628]	; (80012e8 <printRadioSettings+0x6d0>)
 8001072:	4618      	mov	r0, r3
 8001074:	f002 fcdc 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff f871 	bl	8000164 <strlen>
 8001082:	4603      	mov	r3, r0
 8001084:	b29a      	uxth	r2, r3
 8001086:	f107 0108 	add.w	r1, r7, #8
 800108a:	230a      	movs	r3, #10
 800108c:	4892      	ldr	r0, [pc, #584]	; (80012d8 <printRadioSettings+0x6c0>)
 800108e:	f002 fb24 	bl	80036da <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001092:	463b      	mov	r3, r7
 8001094:	2201      	movs	r2, #1
 8001096:	4619      	mov	r1, r3
 8001098:	200e      	movs	r0, #14
 800109a:	f7ff f8f3 	bl	8000284 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800109e:	783b      	ldrb	r3, [r7, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	4991      	ldr	r1, [pc, #580]	; (80012ec <printRadioSettings+0x6d4>)
 80010a8:	4618      	mov	r0, r3
 80010aa:	f002 fcc1 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f856 	bl	8000164 <strlen>
 80010b8:	4603      	mov	r3, r0
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	f107 0108 	add.w	r1, r7, #8
 80010c0:	230a      	movs	r3, #10
 80010c2:	4885      	ldr	r0, [pc, #532]	; (80012d8 <printRadioSettings+0x6c0>)
 80010c4:	f002 fb09 	bl	80036da <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80010c8:	463b      	mov	r3, r7
 80010ca:	2201      	movs	r2, #1
 80010cc:	4619      	mov	r1, r3
 80010ce:	200f      	movs	r0, #15
 80010d0:	f7ff f8d8 	bl	8000284 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80010d4:	783b      	ldrb	r3, [r7, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	f107 0308 	add.w	r3, r7, #8
 80010dc:	4984      	ldr	r1, [pc, #528]	; (80012f0 <printRadioSettings+0x6d8>)
 80010de:	4618      	mov	r0, r3
 80010e0:	f002 fca6 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff f83b 	bl	8000164 <strlen>
 80010ee:	4603      	mov	r3, r0
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	f107 0108 	add.w	r1, r7, #8
 80010f6:	230a      	movs	r3, #10
 80010f8:	4877      	ldr	r0, [pc, #476]	; (80012d8 <printRadioSettings+0x6c0>)
 80010fa:	f002 faee 	bl	80036da <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80010fe:	463b      	mov	r3, r7
 8001100:	2205      	movs	r2, #5
 8001102:	4619      	mov	r1, r3
 8001104:	2010      	movs	r0, #16
 8001106:	f7ff f8bd 	bl	8000284 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800110a:	793b      	ldrb	r3, [r7, #4]
 800110c:	461c      	mov	r4, r3
 800110e:	78fb      	ldrb	r3, [r7, #3]
 8001110:	461d      	mov	r5, r3
 8001112:	78bb      	ldrb	r3, [r7, #2]
 8001114:	787a      	ldrb	r2, [r7, #1]
 8001116:	7839      	ldrb	r1, [r7, #0]
 8001118:	f107 0008 	add.w	r0, r7, #8
 800111c:	9102      	str	r1, [sp, #8]
 800111e:	9201      	str	r2, [sp, #4]
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	462b      	mov	r3, r5
 8001124:	4622      	mov	r2, r4
 8001126:	4973      	ldr	r1, [pc, #460]	; (80012f4 <printRadioSettings+0x6dc>)
 8001128:	f002 fc82 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f817 	bl	8000164 <strlen>
 8001136:	4603      	mov	r3, r0
 8001138:	b29a      	uxth	r2, r3
 800113a:	f107 0108 	add.w	r1, r7, #8
 800113e:	230a      	movs	r3, #10
 8001140:	4865      	ldr	r0, [pc, #404]	; (80012d8 <printRadioSettings+0x6c0>)
 8001142:	f002 faca 	bl	80036da <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001146:	2011      	movs	r0, #17
 8001148:	f7ff f874 	bl	8000234 <NRF24_read_register>
 800114c:	4603      	mov	r3, r0
 800114e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001152:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001156:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4966      	ldr	r1, [pc, #408]	; (80012f8 <printRadioSettings+0x6e0>)
 8001160:	4618      	mov	r0, r3
 8001162:	f002 fc65 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	4618      	mov	r0, r3
 800116c:	f7fe fffa 	bl	8000164 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	f107 0108 	add.w	r1, r7, #8
 8001178:	230a      	movs	r3, #10
 800117a:	4857      	ldr	r0, [pc, #348]	; (80012d8 <printRadioSettings+0x6c0>)
 800117c:	f002 faad 	bl	80036da <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001180:	2012      	movs	r0, #18
 8001182:	f7ff f857 	bl	8000234 <NRF24_read_register>
 8001186:	4603      	mov	r3, r0
 8001188:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800118c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001190:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	4958      	ldr	r1, [pc, #352]	; (80012fc <printRadioSettings+0x6e4>)
 800119a:	4618      	mov	r0, r3
 800119c:	f002 fc48 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011a0:	f107 0308 	add.w	r3, r7, #8
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7fe ffdd 	bl	8000164 <strlen>
 80011aa:	4603      	mov	r3, r0
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	f107 0108 	add.w	r1, r7, #8
 80011b2:	230a      	movs	r3, #10
 80011b4:	4848      	ldr	r0, [pc, #288]	; (80012d8 <printRadioSettings+0x6c0>)
 80011b6:	f002 fa90 	bl	80036da <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 80011ba:	2013      	movs	r0, #19
 80011bc:	f7ff f83a 	bl	8000234 <NRF24_read_register>
 80011c0:	4603      	mov	r3, r0
 80011c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80011c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	494b      	ldr	r1, [pc, #300]	; (8001300 <printRadioSettings+0x6e8>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f002 fc2b 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	4618      	mov	r0, r3
 80011e0:	f7fe ffc0 	bl	8000164 <strlen>
 80011e4:	4603      	mov	r3, r0
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	f107 0108 	add.w	r1, r7, #8
 80011ec:	230a      	movs	r3, #10
 80011ee:	483a      	ldr	r0, [pc, #232]	; (80012d8 <printRadioSettings+0x6c0>)
 80011f0:	f002 fa73 	bl	80036da <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 80011f4:	2014      	movs	r0, #20
 80011f6:	f7ff f81d 	bl	8000234 <NRF24_read_register>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001200:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001204:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001208:	f107 0308 	add.w	r3, r7, #8
 800120c:	493d      	ldr	r1, [pc, #244]	; (8001304 <printRadioSettings+0x6ec>)
 800120e:	4618      	mov	r0, r3
 8001210:	f002 fc0e 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	4618      	mov	r0, r3
 800121a:	f7fe ffa3 	bl	8000164 <strlen>
 800121e:	4603      	mov	r3, r0
 8001220:	b29a      	uxth	r2, r3
 8001222:	f107 0108 	add.w	r1, r7, #8
 8001226:	230a      	movs	r3, #10
 8001228:	482b      	ldr	r0, [pc, #172]	; (80012d8 <printRadioSettings+0x6c0>)
 800122a:	f002 fa56 	bl	80036da <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 800122e:	2015      	movs	r0, #21
 8001230:	f7ff f800 	bl	8000234 <NRF24_read_register>
 8001234:	4603      	mov	r3, r0
 8001236:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800123a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800123e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001242:	f107 0308 	add.w	r3, r7, #8
 8001246:	4930      	ldr	r1, [pc, #192]	; (8001308 <printRadioSettings+0x6f0>)
 8001248:	4618      	mov	r0, r3
 800124a:	f002 fbf1 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	4618      	mov	r0, r3
 8001254:	f7fe ff86 	bl	8000164 <strlen>
 8001258:	4603      	mov	r3, r0
 800125a:	b29a      	uxth	r2, r3
 800125c:	f107 0108 	add.w	r1, r7, #8
 8001260:	230a      	movs	r3, #10
 8001262:	481d      	ldr	r0, [pc, #116]	; (80012d8 <printRadioSettings+0x6c0>)
 8001264:	f002 fa39 	bl	80036da <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8001268:	2016      	movs	r0, #22
 800126a:	f7fe ffe3 	bl	8000234 <NRF24_read_register>
 800126e:	4603      	mov	r3, r0
 8001270:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001274:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001278:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	4922      	ldr	r1, [pc, #136]	; (800130c <printRadioSettings+0x6f4>)
 8001282:	4618      	mov	r0, r3
 8001284:	f002 fbd4 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	4618      	mov	r0, r3
 800128e:	f7fe ff69 	bl	8000164 <strlen>
 8001292:	4603      	mov	r3, r0
 8001294:	b29a      	uxth	r2, r3
 8001296:	f107 0108 	add.w	r1, r7, #8
 800129a:	230a      	movs	r3, #10
 800129c:	480e      	ldr	r0, [pc, #56]	; (80012d8 <printRadioSettings+0x6c0>)
 800129e:	f002 fa1c 	bl	80036da <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80012a2:	201c      	movs	r0, #28
 80012a4:	f7fe ffc6 	bl	8000234 <NRF24_read_register>
 80012a8:	4603      	mov	r3, r0
 80012aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012b2:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	bfcc      	ite	gt
 80012ba:	2301      	movgt	r3, #1
 80012bc:	2300      	movle	r3, #0
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012c6:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	bfcc      	ite	gt
 80012ce:	2301      	movgt	r3, #1
 80012d0:	2300      	movle	r3, #0
 80012d2:	e01d      	b.n	8001310 <printRadioSettings+0x6f8>
 80012d4:	080044cc 	.word	0x080044cc
 80012d8:	20000110 	.word	0x20000110
 80012dc:	080044e0 	.word	0x080044e0
 80012e0:	08004510 	.word	0x08004510
 80012e4:	08004540 	.word	0x08004540
 80012e8:	08004568 	.word	0x08004568
 80012ec:	08004590 	.word	0x08004590
 80012f0:	080045b8 	.word	0x080045b8
 80012f4:	080045e0 	.word	0x080045e0
 80012f8:	0800460c 	.word	0x0800460c
 80012fc:	08004628 	.word	0x08004628
 8001300:	08004644 	.word	0x08004644
 8001304:	08004660 	.word	0x08004660
 8001308:	0800467c 	.word	0x0800467c
 800130c:	08004698 	.word	0x08004698
 8001310:	b2db      	uxtb	r3, r3
 8001312:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001314:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001318:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800131c:	2b00      	cmp	r3, #0
 800131e:	bfcc      	ite	gt
 8001320:	2301      	movgt	r3, #1
 8001322:	2300      	movle	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001328:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800132c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001330:	2b00      	cmp	r3, #0
 8001332:	bfcc      	ite	gt
 8001334:	2301      	movgt	r3, #1
 8001336:	2300      	movle	r3, #0
 8001338:	b2db      	uxtb	r3, r3
 800133a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800133c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001340:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001344:	2b00      	cmp	r3, #0
 8001346:	bfcc      	ite	gt
 8001348:	2301      	movgt	r3, #1
 800134a:	2300      	movle	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001350:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001354:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001358:	2b00      	cmp	r3, #0
 800135a:	bfcc      	ite	gt
 800135c:	2301      	movgt	r3, #1
 800135e:	2300      	movle	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	f107 0008 	add.w	r0, r7, #8
 8001366:	9303      	str	r3, [sp, #12]
 8001368:	9402      	str	r4, [sp, #8]
 800136a:	9101      	str	r1, [sp, #4]
 800136c:	9200      	str	r2, [sp, #0]
 800136e:	4633      	mov	r3, r6
 8001370:	462a      	mov	r2, r5
 8001372:	4936      	ldr	r1, [pc, #216]	; (800144c <printRadioSettings+0x834>)
 8001374:	f002 fb5c 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001378:	f107 0308 	add.w	r3, r7, #8
 800137c:	4618      	mov	r0, r3
 800137e:	f7fe fef1 	bl	8000164 <strlen>
 8001382:	4603      	mov	r3, r0
 8001384:	b29a      	uxth	r2, r3
 8001386:	f107 0108 	add.w	r1, r7, #8
 800138a:	230a      	movs	r3, #10
 800138c:	4830      	ldr	r0, [pc, #192]	; (8001450 <printRadioSettings+0x838>)
 800138e:	f002 f9a4 	bl	80036da <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001392:	201d      	movs	r0, #29
 8001394:	f7fe ff4e 	bl	8000234 <NRF24_read_register>
 8001398:	4603      	mov	r3, r0
 800139a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800139e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d006      	beq.n	80013b8 <printRadioSettings+0x7a0>
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	4929      	ldr	r1, [pc, #164]	; (8001454 <printRadioSettings+0x83c>)
 80013b0:	4618      	mov	r0, r3
 80013b2:	f002 fb3d 	bl	8003a30 <siprintf>
 80013b6:	e005      	b.n	80013c4 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	4926      	ldr	r1, [pc, #152]	; (8001458 <printRadioSettings+0x840>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f002 fb36 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7fe fecb 	bl	8000164 <strlen>
 80013ce:	4603      	mov	r3, r0
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	f107 0108 	add.w	r1, r7, #8
 80013d6:	230a      	movs	r3, #10
 80013d8:	481d      	ldr	r0, [pc, #116]	; (8001450 <printRadioSettings+0x838>)
 80013da:	f002 f97e 	bl	80036da <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80013de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <printRadioSettings+0x7e0>
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	491b      	ldr	r1, [pc, #108]	; (800145c <printRadioSettings+0x844>)
 80013f0:	4618      	mov	r0, r3
 80013f2:	f002 fb1d 	bl	8003a30 <siprintf>
 80013f6:	e005      	b.n	8001404 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80013f8:	f107 0308 	add.w	r3, r7, #8
 80013fc:	4918      	ldr	r1, [pc, #96]	; (8001460 <printRadioSettings+0x848>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f002 fb16 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	4618      	mov	r0, r3
 800140a:	f7fe feab 	bl	8000164 <strlen>
 800140e:	4603      	mov	r3, r0
 8001410:	b29a      	uxth	r2, r3
 8001412:	f107 0108 	add.w	r1, r7, #8
 8001416:	230a      	movs	r3, #10
 8001418:	480d      	ldr	r0, [pc, #52]	; (8001450 <printRadioSettings+0x838>)
 800141a:	f002 f95e 	bl	80036da <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	4910      	ldr	r1, [pc, #64]	; (8001464 <printRadioSettings+0x84c>)
 8001424:	4618      	mov	r0, r3
 8001426:	f002 fb03 	bl	8003a30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800142a:	f107 0308 	add.w	r3, r7, #8
 800142e:	4618      	mov	r0, r3
 8001430:	f7fe fe98 	bl	8000164 <strlen>
 8001434:	4603      	mov	r3, r0
 8001436:	b29a      	uxth	r2, r3
 8001438:	f107 0108 	add.w	r1, r7, #8
 800143c:	230a      	movs	r3, #10
 800143e:	4804      	ldr	r0, [pc, #16]	; (8001450 <printRadioSettings+0x838>)
 8001440:	f002 f94b 	bl	80036da <HAL_UART_Transmit>
}
 8001444:	bf00      	nop
 8001446:	3774      	adds	r7, #116	; 0x74
 8001448:	46bd      	mov	sp, r7
 800144a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800144c:	080046b4 	.word	0x080046b4
 8001450:	20000110 	.word	0x20000110
 8001454:	08004700 	.word	0x08004700
 8001458:	08004718 	.word	0x08004718
 800145c:	08004730 	.word	0x08004730
 8001460:	0800474c 	.word	0x0800474c
 8001464:	08004320 	.word	0x08004320

08001468 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001468:	b084      	sub	sp, #16
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
 800146e:	f107 0c08 	add.w	ip, r7, #8
 8001472:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <nrf24_DebugUART_Init+0x2c>)
 8001478:	4618      	mov	r0, r3
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	2244      	movs	r2, #68	; 0x44
 8001480:	4619      	mov	r1, r3
 8001482:	f002 fabf 	bl	8003a04 <memcpy>
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800148e:	b004      	add	sp, #16
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000110 	.word	0x20000110

08001498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800149c:	f000 fc14 	bl	8001cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a0:	f000 f82c 	bl	80014fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a4:	f000 f8c6 	bl	8001634 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014a8:	f000 f89a 	bl	80015e0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80014ac:	f000 f862 	bl	8001574 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	NRF_init_as_node(); //init NRF
 80014b0:	f000 f93e 	bl	8001730 <NRF_init_as_node>
	//set hooter light and alarm low
	alarm_light_and_hooter(0);
 80014b4:	2000      	movs	r0, #0
 80014b6:	f000 fa8d 	bl	80019d4 <alarm_light_and_hooter>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (!HAL_GPIO_ReadPin(BTN_pin_GPIO_Port, BTN_pin_Pin)) {
 80014ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014be:	480d      	ldr	r0, [pc, #52]	; (80014f4 <main+0x5c>)
 80014c0:	f000 fef0 	bl	80022a4 <HAL_GPIO_ReadPin>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10a      	bne.n	80014e0 <main+0x48>
			alarm_light_and_hooter(1);
 80014ca:	2001      	movs	r0, #1
 80014cc:	f000 fa82 	bl	80019d4 <alarm_light_and_hooter>
			Transmit_Update();
 80014d0:	f000 f970 	bl	80017b4 <Transmit_Update>
			Switch_to_Receiver_mode();
 80014d4:	f000 f9ac 	bl	8001830 <Switch_to_Receiver_mode>
			untill_alarm_reset(); //wait unitill either stopped by server or from input push button
 80014d8:	f000 f9c8 	bl	800186c <untill_alarm_reset>
			Switch_to_Transmitt_mode();
 80014dc:	f000 fa58 	bl	8001990 <Switch_to_Transmitt_mode>
		}

		HAL_GPIO_TogglePin(LED_pin_GPIO_Port, LED_pin_Pin);
 80014e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014e4:	4804      	ldr	r0, [pc, #16]	; (80014f8 <main+0x60>)
 80014e6:	f000 ff0c 	bl	8002302 <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 80014ea:	2032      	movs	r0, #50	; 0x32
 80014ec:	f000 fc4e 	bl	8001d8c <HAL_Delay>
		if (!HAL_GPIO_ReadPin(BTN_pin_GPIO_Port, BTN_pin_Pin)) {
 80014f0:	e7e3      	b.n	80014ba <main+0x22>
 80014f2:	bf00      	nop
 80014f4:	40011000 	.word	0x40011000
 80014f8:	40010800 	.word	0x40010800

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b090      	sub	sp, #64	; 0x40
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 0318 	add.w	r3, r7, #24
 8001506:	2228      	movs	r2, #40	; 0x28
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f002 fa88 	bl	8003a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800151e:	2302      	movs	r3, #2
 8001520:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001522:	2301      	movs	r3, #1
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001526:	2310      	movs	r3, #16
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800152a:	2300      	movs	r3, #0
 800152c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152e:	f107 0318 	add.w	r3, r7, #24
 8001532:	4618      	mov	r0, r3
 8001534:	f000 fefe 	bl	8002334 <HAL_RCC_OscConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800153e:	f000 fa73 	bl	8001a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001542:	230f      	movs	r3, #15
 8001544:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f001 f96c 	bl	8002838 <HAL_RCC_ClockConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001566:	f000 fa5f 	bl	8001a28 <Error_Handler>
  }
}
 800156a:	bf00      	nop
 800156c:	3740      	adds	r7, #64	; 0x40
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <MX_SPI1_Init+0x64>)
 800157a:	4a18      	ldr	r2, [pc, #96]	; (80015dc <MX_SPI1_Init+0x68>)
 800157c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <MX_SPI1_Init+0x64>)
 8001580:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001584:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001586:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <MX_SPI1_Init+0x64>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <MX_SPI1_Init+0x64>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_SPI1_Init+0x64>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <MX_SPI1_Init+0x64>)
 800159a:	2200      	movs	r2, #0
 800159c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015c0:	220a      	movs	r2, #10
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015c4:	4804      	ldr	r0, [pc, #16]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015c6:	f001 facf 	bl	8002b68 <HAL_SPI_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015d0:	f000 fa2a 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000154 	.word	0x20000154
 80015dc:	40013000 	.word	0x40013000

080015e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_USART2_UART_Init+0x4c>)
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <MX_USART2_UART_Init+0x50>)
 80015e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <MX_USART2_UART_Init+0x4c>)
 80015ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <MX_USART2_UART_Init+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <MX_USART2_UART_Init+0x4c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <MX_USART2_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <MX_USART2_UART_Init+0x4c>)
 8001606:	220c      	movs	r2, #12
 8001608:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <MX_USART2_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <MX_USART2_UART_Init+0x4c>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_USART2_UART_Init+0x4c>)
 8001618:	f002 f812 	bl	8003640 <HAL_UART_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001622:	f000 fa01 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200001ac 	.word	0x200001ac
 8001630:	40004400 	.word	0x40004400

08001634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001648:	4b35      	ldr	r3, [pc, #212]	; (8001720 <MX_GPIO_Init+0xec>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a34      	ldr	r2, [pc, #208]	; (8001720 <MX_GPIO_Init+0xec>)
 800164e:	f043 0310 	orr.w	r3, r3, #16
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b32      	ldr	r3, [pc, #200]	; (8001720 <MX_GPIO_Init+0xec>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0310 	and.w	r3, r3, #16
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001660:	4b2f      	ldr	r3, [pc, #188]	; (8001720 <MX_GPIO_Init+0xec>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a2e      	ldr	r2, [pc, #184]	; (8001720 <MX_GPIO_Init+0xec>)
 8001666:	f043 0304 	orr.w	r3, r3, #4
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b2c      	ldr	r3, [pc, #176]	; (8001720 <MX_GPIO_Init+0xec>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001678:	4b29      	ldr	r3, [pc, #164]	; (8001720 <MX_GPIO_Init+0xec>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	4a28      	ldr	r2, [pc, #160]	; (8001720 <MX_GPIO_Init+0xec>)
 800167e:	f043 0308 	orr.w	r3, r3, #8
 8001682:	6193      	str	r3, [r2, #24]
 8001684:	4b26      	ldr	r3, [pc, #152]	; (8001720 <MX_GPIO_Init+0xec>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_pin_GPIO_Port, LED_pin_Pin, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001696:	4823      	ldr	r0, [pc, #140]	; (8001724 <MX_GPIO_Init+0xf0>)
 8001698:	f000 fe1b 	bl	80022d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ALARM_HOOTER_pin_Pin|ALARM_LED_pin_Pin|CSN_pin_Pin|CE_pin_Pin, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	f44f 714c 	mov.w	r1, #816	; 0x330
 80016a2:	4821      	ldr	r0, [pc, #132]	; (8001728 <MX_GPIO_Init+0xf4>)
 80016a4:	f000 fe15 	bl	80022d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_pin_Pin */
  GPIO_InitStruct.Pin = BTN_pin_Pin;
 80016a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b2:	2301      	movs	r3, #1
 80016b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_pin_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 0310 	add.w	r3, r7, #16
 80016ba:	4619      	mov	r1, r3
 80016bc:	481b      	ldr	r0, [pc, #108]	; (800172c <MX_GPIO_Init+0xf8>)
 80016be:	f000 fc6d 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : MANUAL_STOP_ALARM_pin_Pin */
  GPIO_InitStruct.Pin = MANUAL_STOP_ALARM_pin_Pin;
 80016c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016cc:	2301      	movs	r3, #1
 80016ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MANUAL_STOP_ALARM_pin_GPIO_Port, &GPIO_InitStruct);
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	4619      	mov	r1, r3
 80016d6:	4814      	ldr	r0, [pc, #80]	; (8001728 <MX_GPIO_Init+0xf4>)
 80016d8:	f000 fc60 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_pin_Pin */
  GPIO_InitStruct.Pin = LED_pin_Pin;
 80016dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2302      	movs	r3, #2
 80016ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_pin_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	4619      	mov	r1, r3
 80016f4:	480b      	ldr	r0, [pc, #44]	; (8001724 <MX_GPIO_Init+0xf0>)
 80016f6:	f000 fc51 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ALARM_HOOTER_pin_Pin ALARM_LED_pin_Pin CSN_pin_Pin CE_pin_Pin */
  GPIO_InitStruct.Pin = ALARM_HOOTER_pin_Pin|ALARM_LED_pin_Pin|CSN_pin_Pin|CE_pin_Pin;
 80016fa:	f44f 734c 	mov.w	r3, #816	; 0x330
 80016fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001700:	2301      	movs	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2302      	movs	r3, #2
 800170a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	4619      	mov	r1, r3
 8001712:	4805      	ldr	r0, [pc, #20]	; (8001728 <MX_GPIO_Init+0xf4>)
 8001714:	f000 fc42 	bl	8001f9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001718:	bf00      	nop
 800171a:	3720      	adds	r7, #32
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40021000 	.word	0x40021000
 8001724:	40010800 	.word	0x40010800
 8001728:	40010c00 	.word	0x40010c00
 800172c:	40011000 	.word	0x40011000

08001730 <NRF_init_as_node>:

/* USER CODE BEGIN 4 */
void NRF_init_as_node(void) {
 8001730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001732:	b097      	sub	sp, #92	; 0x5c
 8001734:	af16      	add	r7, sp, #88	; 0x58
	NRF24_begin(CE_pin_GPIO_Port, CSN_pin_Pin, CE_pin_Pin, hspi1);
 8001736:	4c1b      	ldr	r4, [pc, #108]	; (80017a4 <NRF_init_as_node+0x74>)
 8001738:	4668      	mov	r0, sp
 800173a:	1d23      	adds	r3, r4, #4
 800173c:	2254      	movs	r2, #84	; 0x54
 800173e:	4619      	mov	r1, r3
 8001740:	f002 f960 	bl	8003a04 <memcpy>
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800174a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800174e:	4816      	ldr	r0, [pc, #88]	; (80017a8 <NRF_init_as_node+0x78>)
 8001750:	f7fe fe7a 	bl	8000448 <NRF24_begin>
	nrf24_DebugUART_Init(huart2);
 8001754:	4e15      	ldr	r6, [pc, #84]	; (80017ac <NRF_init_as_node+0x7c>)
 8001756:	466d      	mov	r5, sp
 8001758:	f106 0410 	add.w	r4, r6, #16
 800175c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800175e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001760:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001762:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001764:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001766:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	602b      	str	r3, [r5, #0]
 800176c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001770:	f7ff fe7a 	bl	8001468 <nrf24_DebugUART_Init>
	NRF24_openWritingPipe(pipe_addr);
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <NRF_init_as_node+0x80>)
 8001776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f7fe ffe9 	bl	8000754 <NRF24_openWritingPipe>
	NRF24_setAutoAck(true);
 8001782:	2001      	movs	r0, #1
 8001784:	f7ff f8c8 	bl	8000918 <NRF24_setAutoAck>
	NRF24_setChannel(52);
 8001788:	2034      	movs	r0, #52	; 0x34
 800178a:	f7ff f870 	bl	800086e <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 800178e:	2020      	movs	r0, #32
 8001790:	f7ff f882 	bl	8000898 <NRF24_setPayloadSize>
	printRadioSettings();
 8001794:	f7ff fa40 	bl	8000c18 <printRadioSettings>
	NRF24_stopListening();
 8001798:	f7fe ff5c 	bl	8000654 <NRF24_stopListening>
}
 800179c:	bf00      	nop
 800179e:	3704      	adds	r7, #4
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017a4:	20000154 	.word	0x20000154
 80017a8:	40010c00 	.word	0x40010c00
 80017ac:	200001ac 	.word	0x200001ac
 80017b0:	20000000 	.word	0x20000000

080017b4 <Transmit_Update>:
void Transmit_Update(void) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
	for (int i = 0; i < +10; i++) {
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	e024      	b.n	800180a <Transmit_Update+0x56>
		if (!NRF24_write(my_tx_data, 32)) {
 80017c0:	2120      	movs	r1, #32
 80017c2:	4816      	ldr	r0, [pc, #88]	; (800181c <Transmit_Update+0x68>)
 80017c4:	f7fe ff52 	bl	800066c <NRF24_write>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f083 0301 	eor.w	r3, r3, #1
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00d      	beq.n	80017f0 <Transmit_Update+0x3c>
			NRF24_write(my_tx_data, 32);
 80017d4:	2120      	movs	r1, #32
 80017d6:	4811      	ldr	r0, [pc, #68]	; (800181c <Transmit_Update+0x68>)
 80017d8:	f7fe ff48 	bl	800066c <NRF24_write>
			HAL_UART_Transmit(&huart2,
 80017dc:	230a      	movs	r3, #10
 80017de:	2221      	movs	r2, #33	; 0x21
 80017e0:	490f      	ldr	r1, [pc, #60]	; (8001820 <Transmit_Update+0x6c>)
 80017e2:	4810      	ldr	r0, [pc, #64]	; (8001824 <Transmit_Update+0x70>)
 80017e4:	f001 ff79 	bl	80036da <HAL_UART_Transmit>
					(uint8_t*) "Transmitt_update waiting for ack\n",
					strlen("Transmitt_update waiting for ack\n"), 10);
			HAL_Delay(200);
 80017e8:	20c8      	movs	r0, #200	; 0xc8
 80017ea:	f000 facf 	bl	8001d8c <HAL_Delay>
 80017ee:	e009      	b.n	8001804 <Transmit_Update+0x50>
		} else {
			HAL_UART_Transmit(&huart2,
 80017f0:	230a      	movs	r3, #10
 80017f2:	222a      	movs	r2, #42	; 0x2a
 80017f4:	490c      	ldr	r1, [pc, #48]	; (8001828 <Transmit_Update+0x74>)
 80017f6:	480b      	ldr	r0, [pc, #44]	; (8001824 <Transmit_Update+0x70>)
 80017f8:	f001 ff6f 	bl	80036da <HAL_UART_Transmit>
					(uint8_t*) "Transmitt_update Transmitted successfully\n",
					strlen("Transmitt_update Transmitted successfully\n"), 10);
			HAL_Delay(100);
 80017fc:	2064      	movs	r0, #100	; 0x64
 80017fe:	f000 fac5 	bl	8001d8c <HAL_Delay>
			break;
 8001802:	e006      	b.n	8001812 <Transmit_Update+0x5e>
	for (int i = 0; i < +10; i++) {
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3301      	adds	r3, #1
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b09      	cmp	r3, #9
 800180e:	ddd7      	ble.n	80017c0 <Transmit_Update+0xc>
		}
	}
}
 8001810:	bf00      	nop
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000008 	.word	0x20000008
 8001820:	08004864 	.word	0x08004864
 8001824:	200001ac 	.word	0x200001ac
 8001828:	08004888 	.word	0x08004888
 800182c:	00000000 	.word	0x00000000

08001830 <Switch_to_Receiver_mode>:
void Switch_to_Receiver_mode(void) {
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	NRF24_setChannel(52);
 8001834:	2034      	movs	r0, #52	; 0x34
 8001836:	f7ff f81a 	bl	800086e <NRF24_setChannel>
	pipe_addr = 0x11223344AB;
 800183a:	490b      	ldr	r1, [pc, #44]	; (8001868 <Switch_to_Receiver_mode+0x38>)
 800183c:	a308      	add	r3, pc, #32	; (adr r3, 8001860 <Switch_to_Receiver_mode+0x30>)
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	e9c1 2300 	strd	r2, r3, [r1]
	NRF24_openReadingPipe(0, pipe_addr);
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <Switch_to_Receiver_mode+0x38>)
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	2000      	movs	r0, #0
 800184e:	f7fe ffa5 	bl	800079c <NRF24_openReadingPipe>
	NRF24_startListening();
 8001852:	f7fe fed9 	bl	8000608 <NRF24_startListening>
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	f3af 8000 	nop.w
 8001860:	223344ab 	.word	0x223344ab
 8001864:	00000011 	.word	0x00000011
 8001868:	20000000 	.word	0x20000000

0800186c <untill_alarm_reset>:

void untill_alarm_reset(void) {
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	while (1) {
		if (NRF24_available()) {
 8001870:	f7fe ff48 	bl	8000704 <NRF24_available>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d046      	beq.n	8001908 <untill_alarm_reset+0x9c>
			NRF24_read(received_data_from_server, 32); //store received data
 800187a:	2120      	movs	r1, #32
 800187c:	4839      	ldr	r0, [pc, #228]	; (8001964 <untill_alarm_reset+0xf8>)
 800187e:	f7fe ff49 	bl	8000714 <NRF24_read>
			received_data_from_server[6] = '\r';
 8001882:	4b38      	ldr	r3, [pc, #224]	; (8001964 <untill_alarm_reset+0xf8>)
 8001884:	220d      	movs	r2, #13
 8001886:	719a      	strb	r2, [r3, #6]
			received_data_from_server[7] = '\n';
 8001888:	4b36      	ldr	r3, [pc, #216]	; (8001964 <untill_alarm_reset+0xf8>)
 800188a:	220a      	movs	r2, #10
 800188c:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit(&huart2, (uint8_t*) received_data_from_server,
 800188e:	230a      	movs	r3, #10
 8001890:	2207      	movs	r2, #7
 8001892:	4934      	ldr	r1, [pc, #208]	; (8001964 <untill_alarm_reset+0xf8>)
 8001894:	4834      	ldr	r0, [pc, #208]	; (8001968 <untill_alarm_reset+0xfc>)
 8001896:	f001 ff20 	bl	80036da <HAL_UART_Transmit>
					sizeof(received_data_from_server), 10); //send data to debug port
			//check if id and val matches, otherwise continue
			memcpy(trim_received_data_from_server, &received_data_from_server,
 800189a:	2205      	movs	r2, #5
 800189c:	4931      	ldr	r1, [pc, #196]	; (8001964 <untill_alarm_reset+0xf8>)
 800189e:	4833      	ldr	r0, [pc, #204]	; (800196c <untill_alarm_reset+0x100>)
 80018a0:	f002 f8b0 	bl	8003a04 <memcpy>
					5);
			HAL_UART_Transmit(&huart2,
 80018a4:	230a      	movs	r3, #10
 80018a6:	2205      	movs	r2, #5
 80018a8:	4930      	ldr	r1, [pc, #192]	; (800196c <untill_alarm_reset+0x100>)
 80018aa:	482f      	ldr	r0, [pc, #188]	; (8001968 <untill_alarm_reset+0xfc>)
 80018ac:	f001 ff15 	bl	80036da <HAL_UART_Transmit>
					(uint8_t*) trim_received_data_from_server, 5, 10); //send trimmed received data
			memcpy(read_node_id, &trim_received_data_from_server, 3); //get id of the node
 80018b0:	2203      	movs	r2, #3
 80018b2:	492e      	ldr	r1, [pc, #184]	; (800196c <untill_alarm_reset+0x100>)
 80018b4:	482e      	ldr	r0, [pc, #184]	; (8001970 <untill_alarm_reset+0x104>)
 80018b6:	f002 f8a5 	bl	8003a04 <memcpy>
			//read_node_status[1] = trim_received_data_from_server[5];  //get status of node
			//HAL_UART_Transmit(&huart2, (uint8_t*) read_node_id, 3,10); //send read node id
			if (strcmp((char*) received_data_from_server, "001,0") == 0) { //compare trimmed data and break if it is same
 80018ba:	492e      	ldr	r1, [pc, #184]	; (8001974 <untill_alarm_reset+0x108>)
 80018bc:	4829      	ldr	r0, [pc, #164]	; (8001964 <untill_alarm_reset+0xf8>)
 80018be:	f7fe fc47 	bl	8000150 <strcmp>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d103      	bne.n	80018d0 <untill_alarm_reset+0x64>
				alarm_light_and_hooter(0);
 80018c8:	2000      	movs	r0, #0
 80018ca:	f000 f883 	bl	80019d4 <alarm_light_and_hooter>
				break;
 80018ce:	e046      	b.n	800195e <untill_alarm_reset+0xf2>
			}
			if (!HAL_GPIO_ReadPin(MANUAL_STOP_ALARM_pin_GPIO_Port,
 80018d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018d4:	4828      	ldr	r0, [pc, #160]	; (8001978 <untill_alarm_reset+0x10c>)
 80018d6:	f000 fce5 	bl	80022a4 <HAL_GPIO_ReadPin>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d102      	bne.n	80018e6 <untill_alarm_reset+0x7a>
			MANUAL_STOP_ALARM_pin_Pin)) {
				manaul_turn_alarm_off = true;
 80018e0:	4b26      	ldr	r3, [pc, #152]	; (800197c <untill_alarm_reset+0x110>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
			}
			if (manaul_turn_alarm_off) {
 80018e6:	4b25      	ldr	r3, [pc, #148]	; (800197c <untill_alarm_reset+0x110>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00c      	beq.n	8001908 <untill_alarm_reset+0x9c>
				alarm_light_and_hooter(0);
 80018ee:	2000      	movs	r0, #0
 80018f0:	f000 f870 	bl	80019d4 <alarm_light_and_hooter>
				HAL_UART_Transmit(&huart2,
 80018f4:	230a      	movs	r3, #10
 80018f6:	221a      	movs	r2, #26
 80018f8:	4921      	ldr	r1, [pc, #132]	; (8001980 <untill_alarm_reset+0x114>)
 80018fa:	481b      	ldr	r0, [pc, #108]	; (8001968 <untill_alarm_reset+0xfc>)
 80018fc:	f001 feed 	bl	80036da <HAL_UART_Transmit>
						(uint8_t*) "Alarm manually turned off\n",
						strlen("Alarm manually turned off\n"), 10);
				manaul_turn_alarm_off = 0;
 8001900:	4b1e      	ldr	r3, [pc, #120]	; (800197c <untill_alarm_reset+0x110>)
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
				break;
 8001906:	e02a      	b.n	800195e <untill_alarm_reset+0xf2>
			}
		}
		if (!HAL_GPIO_ReadPin(MANUAL_STOP_ALARM_pin_GPIO_Port,
 8001908:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800190c:	481a      	ldr	r0, [pc, #104]	; (8001978 <untill_alarm_reset+0x10c>)
 800190e:	f000 fcc9 	bl	80022a4 <HAL_GPIO_ReadPin>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d102      	bne.n	800191e <untill_alarm_reset+0xb2>
		MANUAL_STOP_ALARM_pin_Pin)) {
			manaul_turn_alarm_off = true;
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <untill_alarm_reset+0x110>)
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
		}
		if (manaul_turn_alarm_off) {
 800191e:	4b17      	ldr	r3, [pc, #92]	; (800197c <untill_alarm_reset+0x110>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00c      	beq.n	8001940 <untill_alarm_reset+0xd4>
			alarm_light_and_hooter(0);
 8001926:	2000      	movs	r0, #0
 8001928:	f000 f854 	bl	80019d4 <alarm_light_and_hooter>
			HAL_UART_Transmit(&huart2, (uint8_t*) "Alarm manually turned off\n",
 800192c:	230a      	movs	r3, #10
 800192e:	221a      	movs	r2, #26
 8001930:	4913      	ldr	r1, [pc, #76]	; (8001980 <untill_alarm_reset+0x114>)
 8001932:	480d      	ldr	r0, [pc, #52]	; (8001968 <untill_alarm_reset+0xfc>)
 8001934:	f001 fed1 	bl	80036da <HAL_UART_Transmit>
					strlen("Alarm manually turned off\n"), 10);
			manaul_turn_alarm_off = 0;
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <untill_alarm_reset+0x110>)
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
			break;
 800193e:	e00e      	b.n	800195e <untill_alarm_reset+0xf2>
		}
		HAL_UART_Transmit(&huart2,
 8001940:	230a      	movs	r3, #10
 8001942:	2221      	movs	r2, #33	; 0x21
 8001944:	490f      	ldr	r1, [pc, #60]	; (8001984 <untill_alarm_reset+0x118>)
 8001946:	4808      	ldr	r0, [pc, #32]	; (8001968 <untill_alarm_reset+0xfc>)
 8001948:	f001 fec7 	bl	80036da <HAL_UART_Transmit>
				(uint8_t*) "waiting for response from server\n",
				strlen("waiting for response from server\n"), 10);
		HAL_GPIO_TogglePin(LED_pin_GPIO_Port, LED_pin_Pin);
 800194c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001950:	480d      	ldr	r0, [pc, #52]	; (8001988 <untill_alarm_reset+0x11c>)
 8001952:	f000 fcd6 	bl	8002302 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8001956:	20c8      	movs	r0, #200	; 0xc8
 8001958:	f000 fa18 	bl	8001d8c <HAL_Delay>
		if (NRF24_available()) {
 800195c:	e788      	b.n	8001870 <untill_alarm_reset+0x4>
	}
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200001f0 	.word	0x200001f0
 8001968:	200001ac 	.word	0x200001ac
 800196c:	200001f8 	.word	0x200001f8
 8001970:	20000200 	.word	0x20000200
 8001974:	080048b4 	.word	0x080048b4
 8001978:	40010c00 	.word	0x40010c00
 800197c:	20000204 	.word	0x20000204
 8001980:	080048bc 	.word	0x080048bc
 8001984:	080048d8 	.word	0x080048d8
 8001988:	40010800 	.word	0x40010800
 800198c:	00000000 	.word	0x00000000

08001990 <Switch_to_Transmitt_mode>:
void Switch_to_Transmitt_mode(void) {
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	NRF24_setChannel(52);
 8001994:	2034      	movs	r0, #52	; 0x34
 8001996:	f7fe ff6a 	bl	800086e <NRF24_setChannel>
	NRF24_stopListening();
 800199a:	f7fe fe5b 	bl	8000654 <NRF24_stopListening>
	pipe_addr = 0x11223344AA;
 800199e:	490c      	ldr	r1, [pc, #48]	; (80019d0 <Switch_to_Transmitt_mode+0x40>)
 80019a0:	a309      	add	r3, pc, #36	; (adr r3, 80019c8 <Switch_to_Transmitt_mode+0x38>)
 80019a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a6:	e9c1 2300 	strd	r2, r3, [r1]
	NRF24_openWritingPipe(pipe_addr);
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <Switch_to_Transmitt_mode+0x40>)
 80019ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7fe fece 	bl	8000754 <NRF24_openWritingPipe>
	NRF24_setChannel(52);
 80019b8:	2034      	movs	r0, #52	; 0x34
 80019ba:	f7fe ff58 	bl	800086e <NRF24_setChannel>
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	f3af 8000 	nop.w
 80019c8:	223344aa 	.word	0x223344aa
 80019cc:	00000011 	.word	0x00000011
 80019d0:	20000000 	.word	0x20000000

080019d4 <alarm_light_and_hooter>:
void alarm_light_and_hooter(bool a) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
	if (a == true) {
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00a      	beq.n	80019fa <alarm_light_and_hooter+0x26>
		HAL_GPIO_WritePin(ALARM_LED_pin_GPIO_Port, ALARM_LED_pin_Pin, 1);
 80019e4:	2201      	movs	r2, #1
 80019e6:	2120      	movs	r1, #32
 80019e8:	480e      	ldr	r0, [pc, #56]	; (8001a24 <alarm_light_and_hooter+0x50>)
 80019ea:	f000 fc72 	bl	80022d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ALARM_HOOTER_pin_GPIO_Port, ALARM_HOOTER_pin_Pin, 1);
 80019ee:	2201      	movs	r2, #1
 80019f0:	2110      	movs	r1, #16
 80019f2:	480c      	ldr	r0, [pc, #48]	; (8001a24 <alarm_light_and_hooter+0x50>)
 80019f4:	f000 fc6d 	bl	80022d2 <HAL_GPIO_WritePin>
	} else if (a == false) {
		HAL_GPIO_WritePin(ALARM_LED_pin_GPIO_Port, ALARM_LED_pin_Pin, 0);
		HAL_GPIO_WritePin(ALARM_HOOTER_pin_GPIO_Port, ALARM_HOOTER_pin_Pin, 0);
	}
}
 80019f8:	e00f      	b.n	8001a1a <alarm_light_and_hooter+0x46>
	} else if (a == false) {
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	f083 0301 	eor.w	r3, r3, #1
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d009      	beq.n	8001a1a <alarm_light_and_hooter+0x46>
		HAL_GPIO_WritePin(ALARM_LED_pin_GPIO_Port, ALARM_LED_pin_Pin, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2120      	movs	r1, #32
 8001a0a:	4806      	ldr	r0, [pc, #24]	; (8001a24 <alarm_light_and_hooter+0x50>)
 8001a0c:	f000 fc61 	bl	80022d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ALARM_HOOTER_pin_GPIO_Port, ALARM_HOOTER_pin_Pin, 0);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2110      	movs	r1, #16
 8001a14:	4803      	ldr	r0, [pc, #12]	; (8001a24 <alarm_light_and_hooter+0x50>)
 8001a16:	f000 fc5c 	bl	80022d2 <HAL_GPIO_WritePin>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40010c00 	.word	0x40010c00

08001a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a2c:	b672      	cpsid	i
}
 8001a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_TogglePin(LED_pin_GPIO_Port, LED_pin_Pin);
 8001a30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a34:	4803      	ldr	r0, [pc, #12]	; (8001a44 <Error_Handler+0x1c>)
 8001a36:	f000 fc64 	bl	8002302 <HAL_GPIO_TogglePin>
		HAL_Delay(2000);
 8001a3a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a3e:	f000 f9a5 	bl	8001d8c <HAL_Delay>
		HAL_GPIO_TogglePin(LED_pin_GPIO_Port, LED_pin_Pin);
 8001a42:	e7f5      	b.n	8001a30 <Error_Handler+0x8>
 8001a44:	40010800 	.word	0x40010800

08001a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <HAL_MspInit+0x40>)
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	4a0d      	ldr	r2, [pc, #52]	; (8001a88 <HAL_MspInit+0x40>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6193      	str	r3, [r2, #24]
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_MspInit+0x40>)
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <HAL_MspInit+0x40>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	4a07      	ldr	r2, [pc, #28]	; (8001a88 <HAL_MspInit+0x40>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	61d3      	str	r3, [r2, #28]
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_MspInit+0x40>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	40021000 	.word	0x40021000

08001a8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0310 	add.w	r3, r7, #16
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a1b      	ldr	r2, [pc, #108]	; (8001b14 <HAL_SPI_MspInit+0x88>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d12f      	bne.n	8001b0c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aac:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <HAL_SPI_MspInit+0x8c>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	4a19      	ldr	r2, [pc, #100]	; (8001b18 <HAL_SPI_MspInit+0x8c>)
 8001ab2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ab6:	6193      	str	r3, [r2, #24]
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <HAL_SPI_MspInit+0x8c>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <HAL_SPI_MspInit+0x8c>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	4a13      	ldr	r2, [pc, #76]	; (8001b18 <HAL_SPI_MspInit+0x8c>)
 8001aca:	f043 0304 	orr.w	r3, r3, #4
 8001ace:	6193      	str	r3, [r2, #24]
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <HAL_SPI_MspInit+0x8c>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001adc:	23a0      	movs	r3, #160	; 0xa0
 8001ade:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	4619      	mov	r1, r3
 8001aee:	480b      	ldr	r0, [pc, #44]	; (8001b1c <HAL_SPI_MspInit+0x90>)
 8001af0:	f000 fa54 	bl	8001f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001af4:	2340      	movs	r3, #64	; 0x40
 8001af6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f107 0310 	add.w	r3, r7, #16
 8001b04:	4619      	mov	r1, r3
 8001b06:	4805      	ldr	r0, [pc, #20]	; (8001b1c <HAL_SPI_MspInit+0x90>)
 8001b08:	f000 fa48 	bl	8001f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b0c:	bf00      	nop
 8001b0e:	3720      	adds	r7, #32
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40013000 	.word	0x40013000
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40010800 	.word	0x40010800

08001b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a1b      	ldr	r2, [pc, #108]	; (8001ba8 <HAL_UART_MspInit+0x88>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d12f      	bne.n	8001ba0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b40:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <HAL_UART_MspInit+0x8c>)
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	4a19      	ldr	r2, [pc, #100]	; (8001bac <HAL_UART_MspInit+0x8c>)
 8001b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4a:	61d3      	str	r3, [r2, #28]
 8001b4c:	4b17      	ldr	r3, [pc, #92]	; (8001bac <HAL_UART_MspInit+0x8c>)
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <HAL_UART_MspInit+0x8c>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	4a13      	ldr	r2, [pc, #76]	; (8001bac <HAL_UART_MspInit+0x8c>)
 8001b5e:	f043 0304 	orr.w	r3, r3, #4
 8001b62:	6193      	str	r3, [r2, #24]
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_UART_MspInit+0x8c>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b70:	2304      	movs	r3, #4
 8001b72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	4619      	mov	r1, r3
 8001b82:	480b      	ldr	r0, [pc, #44]	; (8001bb0 <HAL_UART_MspInit+0x90>)
 8001b84:	f000 fa0a 	bl	8001f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b88:	2308      	movs	r3, #8
 8001b8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	f107 0310 	add.w	r3, r7, #16
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <HAL_UART_MspInit+0x90>)
 8001b9c:	f000 f9fe 	bl	8001f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ba0:	bf00      	nop
 8001ba2:	3720      	adds	r7, #32
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40004400 	.word	0x40004400
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40010800 	.word	0x40010800

08001bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <NMI_Handler+0x4>

08001bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bbe:	e7fe      	b.n	8001bbe <HardFault_Handler+0x4>

08001bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <MemManage_Handler+0x4>

08001bc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bca:	e7fe      	b.n	8001bca <BusFault_Handler+0x4>

08001bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <UsageFault_Handler+0x4>

08001bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfa:	f000 f8ab 	bl	8001d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c0c:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <_sbrk+0x5c>)
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <_sbrk+0x60>)
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d102      	bne.n	8001c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <_sbrk+0x64>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <_sbrk+0x68>)
 8001c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d207      	bcs.n	8001c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c34:	f001 febc 	bl	80039b0 <__errno>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c42:	e009      	b.n	8001c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <_sbrk+0x64>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4a:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	4a05      	ldr	r2, [pc, #20]	; (8001c68 <_sbrk+0x64>)
 8001c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c56:	68fb      	ldr	r3, [r7, #12]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20005000 	.word	0x20005000
 8001c64:	00000400 	.word	0x00000400
 8001c68:	20000208 	.word	0x20000208
 8001c6c:	20000220 	.word	0x20000220

08001c70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c7c:	480c      	ldr	r0, [pc, #48]	; (8001cb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c7e:	490d      	ldr	r1, [pc, #52]	; (8001cb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c80:	4a0d      	ldr	r2, [pc, #52]	; (8001cb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c84:	e002      	b.n	8001c8c <LoopCopyDataInit>

08001c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8a:	3304      	adds	r3, #4

08001c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c90:	d3f9      	bcc.n	8001c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c92:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c94:	4c0a      	ldr	r4, [pc, #40]	; (8001cc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c98:	e001      	b.n	8001c9e <LoopFillZerobss>

08001c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c9c:	3204      	adds	r2, #4

08001c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca0:	d3fb      	bcc.n	8001c9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ca2:	f7ff ffe5 	bl	8001c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ca6:	f001 fe89 	bl	80039bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001caa:	f7ff fbf5 	bl	8001498 <main>
  bx lr
 8001cae:	4770      	bx	lr
  ldr r0, =_sdata
 8001cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001cb8:	08004970 	.word	0x08004970
  ldr r2, =_sbss
 8001cbc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001cc0:	20000220 	.word	0x20000220

08001cc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cc4:	e7fe      	b.n	8001cc4 <ADC1_2_IRQHandler>
	...

08001cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <HAL_Init+0x28>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a07      	ldr	r2, [pc, #28]	; (8001cf0 <HAL_Init+0x28>)
 8001cd2:	f043 0310 	orr.w	r3, r3, #16
 8001cd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd8:	2003      	movs	r0, #3
 8001cda:	f000 f92b 	bl	8001f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cde:	200f      	movs	r0, #15
 8001ce0:	f000 f808 	bl	8001cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce4:	f7ff feb0 	bl	8001a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40022000 	.word	0x40022000

08001cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_InitTick+0x54>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_InitTick+0x58>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f935 	bl	8001f82 <HAL_SYSTICK_Config>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00e      	b.n	8001d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b0f      	cmp	r3, #15
 8001d26:	d80a      	bhi.n	8001d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	f000 f90b 	bl	8001f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d34:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <HAL_InitTick+0x5c>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e000      	b.n	8001d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000010 	.word	0x20000010
 8001d4c:	20000018 	.word	0x20000018
 8001d50:	20000014 	.word	0x20000014

08001d54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_IncTick+0x1c>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_IncTick+0x20>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	4a03      	ldr	r2, [pc, #12]	; (8001d74 <HAL_IncTick+0x20>)
 8001d66:	6013      	str	r3, [r2, #0]
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	20000018 	.word	0x20000018
 8001d74:	2000020c 	.word	0x2000020c

08001d78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d7c:	4b02      	ldr	r3, [pc, #8]	; (8001d88 <HAL_GetTick+0x10>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	2000020c 	.word	0x2000020c

08001d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff fff0 	bl	8001d78 <HAL_GetTick>
 8001d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d005      	beq.n	8001db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <HAL_Delay+0x44>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001db2:	bf00      	nop
 8001db4:	f7ff ffe0 	bl	8001d78 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d8f7      	bhi.n	8001db4 <HAL_Delay+0x28>
  {
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000018 	.word	0x20000018

08001dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df0:	4013      	ands	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <__NVIC_GetPriorityGrouping+0x18>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	f003 0307 	and.w	r3, r3, #7
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	6039      	str	r1, [r7, #0]
 8001e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	db0a      	blt.n	8001e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	490c      	ldr	r1, [pc, #48]	; (8001e84 <__NVIC_SetPriority+0x4c>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	0112      	lsls	r2, r2, #4
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e60:	e00a      	b.n	8001e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4908      	ldr	r1, [pc, #32]	; (8001e88 <__NVIC_SetPriority+0x50>)
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	3b04      	subs	r3, #4
 8001e70:	0112      	lsls	r2, r2, #4
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	440b      	add	r3, r1
 8001e76:	761a      	strb	r2, [r3, #24]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000e100 	.word	0xe000e100
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b089      	sub	sp, #36	; 0x24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f1c3 0307 	rsb	r3, r3, #7
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	bf28      	it	cs
 8001eaa:	2304      	movcs	r3, #4
 8001eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d902      	bls.n	8001ebc <NVIC_EncodePriority+0x30>
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3b03      	subs	r3, #3
 8001eba:	e000      	b.n	8001ebe <NVIC_EncodePriority+0x32>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	401a      	ands	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	43d9      	mvns	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	4313      	orrs	r3, r2
         );
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	; 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f00:	d301      	bcc.n	8001f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f02:	2301      	movs	r3, #1
 8001f04:	e00f      	b.n	8001f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f06:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <SysTick_Config+0x40>)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0e:	210f      	movs	r1, #15
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	f7ff ff90 	bl	8001e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <SysTick_Config+0x40>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1e:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <SysTick_Config+0x40>)
 8001f20:	2207      	movs	r2, #7
 8001f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	e000e010 	.word	0xe000e010

08001f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ff49 	bl	8001dd4 <__NVIC_SetPriorityGrouping>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f5c:	f7ff ff5e 	bl	8001e1c <__NVIC_GetPriorityGrouping>
 8001f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	6978      	ldr	r0, [r7, #20]
 8001f68:	f7ff ff90 	bl	8001e8c <NVIC_EncodePriority>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff5f 	bl	8001e38 <__NVIC_SetPriority>
}
 8001f7a:	bf00      	nop
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ffb0 	bl	8001ef0 <SysTick_Config>
 8001f90:	4603      	mov	r3, r0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b08b      	sub	sp, #44	; 0x2c
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001faa:	2300      	movs	r3, #0
 8001fac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fae:	e169      	b.n	8002284 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	69fa      	ldr	r2, [r7, #28]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	f040 8158 	bne.w	800227e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	4a9a      	ldr	r2, [pc, #616]	; (800223c <HAL_GPIO_Init+0x2a0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d05e      	beq.n	8002096 <HAL_GPIO_Init+0xfa>
 8001fd8:	4a98      	ldr	r2, [pc, #608]	; (800223c <HAL_GPIO_Init+0x2a0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d875      	bhi.n	80020ca <HAL_GPIO_Init+0x12e>
 8001fde:	4a98      	ldr	r2, [pc, #608]	; (8002240 <HAL_GPIO_Init+0x2a4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d058      	beq.n	8002096 <HAL_GPIO_Init+0xfa>
 8001fe4:	4a96      	ldr	r2, [pc, #600]	; (8002240 <HAL_GPIO_Init+0x2a4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d86f      	bhi.n	80020ca <HAL_GPIO_Init+0x12e>
 8001fea:	4a96      	ldr	r2, [pc, #600]	; (8002244 <HAL_GPIO_Init+0x2a8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d052      	beq.n	8002096 <HAL_GPIO_Init+0xfa>
 8001ff0:	4a94      	ldr	r2, [pc, #592]	; (8002244 <HAL_GPIO_Init+0x2a8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d869      	bhi.n	80020ca <HAL_GPIO_Init+0x12e>
 8001ff6:	4a94      	ldr	r2, [pc, #592]	; (8002248 <HAL_GPIO_Init+0x2ac>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d04c      	beq.n	8002096 <HAL_GPIO_Init+0xfa>
 8001ffc:	4a92      	ldr	r2, [pc, #584]	; (8002248 <HAL_GPIO_Init+0x2ac>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d863      	bhi.n	80020ca <HAL_GPIO_Init+0x12e>
 8002002:	4a92      	ldr	r2, [pc, #584]	; (800224c <HAL_GPIO_Init+0x2b0>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d046      	beq.n	8002096 <HAL_GPIO_Init+0xfa>
 8002008:	4a90      	ldr	r2, [pc, #576]	; (800224c <HAL_GPIO_Init+0x2b0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d85d      	bhi.n	80020ca <HAL_GPIO_Init+0x12e>
 800200e:	2b12      	cmp	r3, #18
 8002010:	d82a      	bhi.n	8002068 <HAL_GPIO_Init+0xcc>
 8002012:	2b12      	cmp	r3, #18
 8002014:	d859      	bhi.n	80020ca <HAL_GPIO_Init+0x12e>
 8002016:	a201      	add	r2, pc, #4	; (adr r2, 800201c <HAL_GPIO_Init+0x80>)
 8002018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201c:	08002097 	.word	0x08002097
 8002020:	08002071 	.word	0x08002071
 8002024:	08002083 	.word	0x08002083
 8002028:	080020c5 	.word	0x080020c5
 800202c:	080020cb 	.word	0x080020cb
 8002030:	080020cb 	.word	0x080020cb
 8002034:	080020cb 	.word	0x080020cb
 8002038:	080020cb 	.word	0x080020cb
 800203c:	080020cb 	.word	0x080020cb
 8002040:	080020cb 	.word	0x080020cb
 8002044:	080020cb 	.word	0x080020cb
 8002048:	080020cb 	.word	0x080020cb
 800204c:	080020cb 	.word	0x080020cb
 8002050:	080020cb 	.word	0x080020cb
 8002054:	080020cb 	.word	0x080020cb
 8002058:	080020cb 	.word	0x080020cb
 800205c:	080020cb 	.word	0x080020cb
 8002060:	08002079 	.word	0x08002079
 8002064:	0800208d 	.word	0x0800208d
 8002068:	4a79      	ldr	r2, [pc, #484]	; (8002250 <HAL_GPIO_Init+0x2b4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d013      	beq.n	8002096 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800206e:	e02c      	b.n	80020ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	623b      	str	r3, [r7, #32]
          break;
 8002076:	e029      	b.n	80020cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	3304      	adds	r3, #4
 800207e:	623b      	str	r3, [r7, #32]
          break;
 8002080:	e024      	b.n	80020cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	3308      	adds	r3, #8
 8002088:	623b      	str	r3, [r7, #32]
          break;
 800208a:	e01f      	b.n	80020cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	330c      	adds	r3, #12
 8002092:	623b      	str	r3, [r7, #32]
          break;
 8002094:	e01a      	b.n	80020cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800209e:	2304      	movs	r3, #4
 80020a0:	623b      	str	r3, [r7, #32]
          break;
 80020a2:	e013      	b.n	80020cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d105      	bne.n	80020b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020ac:	2308      	movs	r3, #8
 80020ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	611a      	str	r2, [r3, #16]
          break;
 80020b6:	e009      	b.n	80020cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020b8:	2308      	movs	r3, #8
 80020ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69fa      	ldr	r2, [r7, #28]
 80020c0:	615a      	str	r2, [r3, #20]
          break;
 80020c2:	e003      	b.n	80020cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020c4:	2300      	movs	r3, #0
 80020c6:	623b      	str	r3, [r7, #32]
          break;
 80020c8:	e000      	b.n	80020cc <HAL_GPIO_Init+0x130>
          break;
 80020ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	2bff      	cmp	r3, #255	; 0xff
 80020d0:	d801      	bhi.n	80020d6 <HAL_GPIO_Init+0x13a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	e001      	b.n	80020da <HAL_GPIO_Init+0x13e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3304      	adds	r3, #4
 80020da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	2bff      	cmp	r3, #255	; 0xff
 80020e0:	d802      	bhi.n	80020e8 <HAL_GPIO_Init+0x14c>
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	e002      	b.n	80020ee <HAL_GPIO_Init+0x152>
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	3b08      	subs	r3, #8
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	210f      	movs	r1, #15
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	fa01 f303 	lsl.w	r3, r1, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	401a      	ands	r2, r3
 8002100:	6a39      	ldr	r1, [r7, #32]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	fa01 f303 	lsl.w	r3, r1, r3
 8002108:	431a      	orrs	r2, r3
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 80b1 	beq.w	800227e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800211c:	4b4d      	ldr	r3, [pc, #308]	; (8002254 <HAL_GPIO_Init+0x2b8>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	4a4c      	ldr	r2, [pc, #304]	; (8002254 <HAL_GPIO_Init+0x2b8>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6193      	str	r3, [r2, #24]
 8002128:	4b4a      	ldr	r3, [pc, #296]	; (8002254 <HAL_GPIO_Init+0x2b8>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002134:	4a48      	ldr	r2, [pc, #288]	; (8002258 <HAL_GPIO_Init+0x2bc>)
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	089b      	lsrs	r3, r3, #2
 800213a:	3302      	adds	r3, #2
 800213c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002140:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	220f      	movs	r2, #15
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	4013      	ands	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a40      	ldr	r2, [pc, #256]	; (800225c <HAL_GPIO_Init+0x2c0>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d013      	beq.n	8002188 <HAL_GPIO_Init+0x1ec>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a3f      	ldr	r2, [pc, #252]	; (8002260 <HAL_GPIO_Init+0x2c4>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d00d      	beq.n	8002184 <HAL_GPIO_Init+0x1e8>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a3e      	ldr	r2, [pc, #248]	; (8002264 <HAL_GPIO_Init+0x2c8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d007      	beq.n	8002180 <HAL_GPIO_Init+0x1e4>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a3d      	ldr	r2, [pc, #244]	; (8002268 <HAL_GPIO_Init+0x2cc>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d101      	bne.n	800217c <HAL_GPIO_Init+0x1e0>
 8002178:	2303      	movs	r3, #3
 800217a:	e006      	b.n	800218a <HAL_GPIO_Init+0x1ee>
 800217c:	2304      	movs	r3, #4
 800217e:	e004      	b.n	800218a <HAL_GPIO_Init+0x1ee>
 8002180:	2302      	movs	r3, #2
 8002182:	e002      	b.n	800218a <HAL_GPIO_Init+0x1ee>
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <HAL_GPIO_Init+0x1ee>
 8002188:	2300      	movs	r3, #0
 800218a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218c:	f002 0203 	and.w	r2, r2, #3
 8002190:	0092      	lsls	r2, r2, #2
 8002192:	4093      	lsls	r3, r2
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800219a:	492f      	ldr	r1, [pc, #188]	; (8002258 <HAL_GPIO_Init+0x2bc>)
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	3302      	adds	r3, #2
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d006      	beq.n	80021c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021b4:	4b2d      	ldr	r3, [pc, #180]	; (800226c <HAL_GPIO_Init+0x2d0>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	492c      	ldr	r1, [pc, #176]	; (800226c <HAL_GPIO_Init+0x2d0>)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	600b      	str	r3, [r1, #0]
 80021c0:	e006      	b.n	80021d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021c2:	4b2a      	ldr	r3, [pc, #168]	; (800226c <HAL_GPIO_Init+0x2d0>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	4928      	ldr	r1, [pc, #160]	; (800226c <HAL_GPIO_Init+0x2d0>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d006      	beq.n	80021ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021dc:	4b23      	ldr	r3, [pc, #140]	; (800226c <HAL_GPIO_Init+0x2d0>)
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	4922      	ldr	r1, [pc, #136]	; (800226c <HAL_GPIO_Init+0x2d0>)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]
 80021e8:	e006      	b.n	80021f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_GPIO_Init+0x2d0>)
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	491e      	ldr	r1, [pc, #120]	; (800226c <HAL_GPIO_Init+0x2d0>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d006      	beq.n	8002212 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002204:	4b19      	ldr	r3, [pc, #100]	; (800226c <HAL_GPIO_Init+0x2d0>)
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	4918      	ldr	r1, [pc, #96]	; (800226c <HAL_GPIO_Init+0x2d0>)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	608b      	str	r3, [r1, #8]
 8002210:	e006      	b.n	8002220 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002212:	4b16      	ldr	r3, [pc, #88]	; (800226c <HAL_GPIO_Init+0x2d0>)
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	43db      	mvns	r3, r3
 800221a:	4914      	ldr	r1, [pc, #80]	; (800226c <HAL_GPIO_Init+0x2d0>)
 800221c:	4013      	ands	r3, r2
 800221e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d021      	beq.n	8002270 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800222c:	4b0f      	ldr	r3, [pc, #60]	; (800226c <HAL_GPIO_Init+0x2d0>)
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	490e      	ldr	r1, [pc, #56]	; (800226c <HAL_GPIO_Init+0x2d0>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	60cb      	str	r3, [r1, #12]
 8002238:	e021      	b.n	800227e <HAL_GPIO_Init+0x2e2>
 800223a:	bf00      	nop
 800223c:	10320000 	.word	0x10320000
 8002240:	10310000 	.word	0x10310000
 8002244:	10220000 	.word	0x10220000
 8002248:	10210000 	.word	0x10210000
 800224c:	10120000 	.word	0x10120000
 8002250:	10110000 	.word	0x10110000
 8002254:	40021000 	.word	0x40021000
 8002258:	40010000 	.word	0x40010000
 800225c:	40010800 	.word	0x40010800
 8002260:	40010c00 	.word	0x40010c00
 8002264:	40011000 	.word	0x40011000
 8002268:	40011400 	.word	0x40011400
 800226c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_GPIO_Init+0x304>)
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	43db      	mvns	r3, r3
 8002278:	4909      	ldr	r1, [pc, #36]	; (80022a0 <HAL_GPIO_Init+0x304>)
 800227a:	4013      	ands	r3, r2
 800227c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	3301      	adds	r3, #1
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	fa22 f303 	lsr.w	r3, r2, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	f47f ae8e 	bne.w	8001fb0 <HAL_GPIO_Init+0x14>
  }
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	372c      	adds	r7, #44	; 0x2c
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	40010400 	.word	0x40010400

080022a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	887b      	ldrh	r3, [r7, #2]
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d002      	beq.n	80022c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	e001      	b.n	80022c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022c2:	2300      	movs	r3, #0
 80022c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr

080022d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	807b      	strh	r3, [r7, #2]
 80022de:	4613      	mov	r3, r2
 80022e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022e2:	787b      	ldrb	r3, [r7, #1]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022e8:	887a      	ldrh	r2, [r7, #2]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022ee:	e003      	b.n	80022f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022f0:	887b      	ldrh	r3, [r7, #2]
 80022f2:	041a      	lsls	r2, r3, #16
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	611a      	str	r2, [r3, #16]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr

08002302 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002302:	b480      	push	{r7}
 8002304:	b085      	sub	sp, #20
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002314:	887a      	ldrh	r2, [r7, #2]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4013      	ands	r3, r2
 800231a:	041a      	lsls	r2, r3, #16
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	43d9      	mvns	r1, r3
 8002320:	887b      	ldrh	r3, [r7, #2]
 8002322:	400b      	ands	r3, r1
 8002324:	431a      	orrs	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	611a      	str	r2, [r3, #16]
}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr

08002334 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e272      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8087 	beq.w	8002462 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002354:	4b92      	ldr	r3, [pc, #584]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b04      	cmp	r3, #4
 800235e:	d00c      	beq.n	800237a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002360:	4b8f      	ldr	r3, [pc, #572]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 030c 	and.w	r3, r3, #12
 8002368:	2b08      	cmp	r3, #8
 800236a:	d112      	bne.n	8002392 <HAL_RCC_OscConfig+0x5e>
 800236c:	4b8c      	ldr	r3, [pc, #560]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002378:	d10b      	bne.n	8002392 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237a:	4b89      	ldr	r3, [pc, #548]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d06c      	beq.n	8002460 <HAL_RCC_OscConfig+0x12c>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d168      	bne.n	8002460 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e24c      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239a:	d106      	bne.n	80023aa <HAL_RCC_OscConfig+0x76>
 800239c:	4b80      	ldr	r3, [pc, #512]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a7f      	ldr	r2, [pc, #508]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	e02e      	b.n	8002408 <HAL_RCC_OscConfig+0xd4>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10c      	bne.n	80023cc <HAL_RCC_OscConfig+0x98>
 80023b2:	4b7b      	ldr	r3, [pc, #492]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a7a      	ldr	r2, [pc, #488]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	4b78      	ldr	r3, [pc, #480]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a77      	ldr	r2, [pc, #476]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e01d      	b.n	8002408 <HAL_RCC_OscConfig+0xd4>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCC_OscConfig+0xbc>
 80023d6:	4b72      	ldr	r3, [pc, #456]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a71      	ldr	r2, [pc, #452]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	4b6f      	ldr	r3, [pc, #444]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a6e      	ldr	r2, [pc, #440]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	e00b      	b.n	8002408 <HAL_RCC_OscConfig+0xd4>
 80023f0:	4b6b      	ldr	r3, [pc, #428]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a6a      	ldr	r2, [pc, #424]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	4b68      	ldr	r3, [pc, #416]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a67      	ldr	r2, [pc, #412]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 8002402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002406:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d013      	beq.n	8002438 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7ff fcb2 	bl	8001d78 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002418:	f7ff fcae 	bl	8001d78 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b64      	cmp	r3, #100	; 0x64
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e200      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	4b5d      	ldr	r3, [pc, #372]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0xe4>
 8002436:	e014      	b.n	8002462 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7ff fc9e 	bl	8001d78 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002440:	f7ff fc9a 	bl	8001d78 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b64      	cmp	r3, #100	; 0x64
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e1ec      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002452:	4b53      	ldr	r3, [pc, #332]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x10c>
 800245e:	e000      	b.n	8002462 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d063      	beq.n	8002536 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800246e:	4b4c      	ldr	r3, [pc, #304]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00b      	beq.n	8002492 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800247a:	4b49      	ldr	r3, [pc, #292]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b08      	cmp	r3, #8
 8002484:	d11c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x18c>
 8002486:	4b46      	ldr	r3, [pc, #280]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d116      	bne.n	80024c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002492:	4b43      	ldr	r3, [pc, #268]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d005      	beq.n	80024aa <HAL_RCC_OscConfig+0x176>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d001      	beq.n	80024aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e1c0      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024aa:	4b3d      	ldr	r3, [pc, #244]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4939      	ldr	r1, [pc, #228]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024be:	e03a      	b.n	8002536 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d020      	beq.n	800250a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c8:	4b36      	ldr	r3, [pc, #216]	; (80025a4 <HAL_RCC_OscConfig+0x270>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ce:	f7ff fc53 	bl	8001d78 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d6:	f7ff fc4f 	bl	8001d78 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e1a1      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e8:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f4:	4b2a      	ldr	r3, [pc, #168]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4927      	ldr	r1, [pc, #156]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 8002504:	4313      	orrs	r3, r2
 8002506:	600b      	str	r3, [r1, #0]
 8002508:	e015      	b.n	8002536 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800250a:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <HAL_RCC_OscConfig+0x270>)
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7ff fc32 	bl	8001d78 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002518:	f7ff fc2e 	bl	8001d78 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e180      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252a:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d03a      	beq.n	80025b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d019      	beq.n	800257e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800254a:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <HAL_RCC_OscConfig+0x274>)
 800254c:	2201      	movs	r2, #1
 800254e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002550:	f7ff fc12 	bl	8001d78 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002558:	f7ff fc0e 	bl	8001d78 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e160      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256a:	4b0d      	ldr	r3, [pc, #52]	; (80025a0 <HAL_RCC_OscConfig+0x26c>)
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002576:	2001      	movs	r0, #1
 8002578:	f000 fad8 	bl	8002b2c <RCC_Delay>
 800257c:	e01c      	b.n	80025b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800257e:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <HAL_RCC_OscConfig+0x274>)
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002584:	f7ff fbf8 	bl	8001d78 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800258a:	e00f      	b.n	80025ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800258c:	f7ff fbf4 	bl	8001d78 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d908      	bls.n	80025ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e146      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000
 80025a4:	42420000 	.word	0x42420000
 80025a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ac:	4b92      	ldr	r3, [pc, #584]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1e9      	bne.n	800258c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 80a6 	beq.w	8002712 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c6:	2300      	movs	r3, #0
 80025c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ca:	4b8b      	ldr	r3, [pc, #556]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10d      	bne.n	80025f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d6:	4b88      	ldr	r3, [pc, #544]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	4a87      	ldr	r2, [pc, #540]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e0:	61d3      	str	r3, [r2, #28]
 80025e2:	4b85      	ldr	r3, [pc, #532]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ee:	2301      	movs	r3, #1
 80025f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f2:	4b82      	ldr	r3, [pc, #520]	; (80027fc <HAL_RCC_OscConfig+0x4c8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d118      	bne.n	8002630 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025fe:	4b7f      	ldr	r3, [pc, #508]	; (80027fc <HAL_RCC_OscConfig+0x4c8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a7e      	ldr	r2, [pc, #504]	; (80027fc <HAL_RCC_OscConfig+0x4c8>)
 8002604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800260a:	f7ff fbb5 	bl	8001d78 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002612:	f7ff fbb1 	bl	8001d78 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b64      	cmp	r3, #100	; 0x64
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e103      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002624:	4b75      	ldr	r3, [pc, #468]	; (80027fc <HAL_RCC_OscConfig+0x4c8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d106      	bne.n	8002646 <HAL_RCC_OscConfig+0x312>
 8002638:	4b6f      	ldr	r3, [pc, #444]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	4a6e      	ldr	r2, [pc, #440]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	6213      	str	r3, [r2, #32]
 8002644:	e02d      	b.n	80026a2 <HAL_RCC_OscConfig+0x36e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10c      	bne.n	8002668 <HAL_RCC_OscConfig+0x334>
 800264e:	4b6a      	ldr	r3, [pc, #424]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	4a69      	ldr	r2, [pc, #420]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002654:	f023 0301 	bic.w	r3, r3, #1
 8002658:	6213      	str	r3, [r2, #32]
 800265a:	4b67      	ldr	r3, [pc, #412]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	4a66      	ldr	r2, [pc, #408]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002660:	f023 0304 	bic.w	r3, r3, #4
 8002664:	6213      	str	r3, [r2, #32]
 8002666:	e01c      	b.n	80026a2 <HAL_RCC_OscConfig+0x36e>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b05      	cmp	r3, #5
 800266e:	d10c      	bne.n	800268a <HAL_RCC_OscConfig+0x356>
 8002670:	4b61      	ldr	r3, [pc, #388]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4a60      	ldr	r2, [pc, #384]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002676:	f043 0304 	orr.w	r3, r3, #4
 800267a:	6213      	str	r3, [r2, #32]
 800267c:	4b5e      	ldr	r3, [pc, #376]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4a5d      	ldr	r2, [pc, #372]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	6213      	str	r3, [r2, #32]
 8002688:	e00b      	b.n	80026a2 <HAL_RCC_OscConfig+0x36e>
 800268a:	4b5b      	ldr	r3, [pc, #364]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	4a5a      	ldr	r2, [pc, #360]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002690:	f023 0301 	bic.w	r3, r3, #1
 8002694:	6213      	str	r3, [r2, #32]
 8002696:	4b58      	ldr	r3, [pc, #352]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	4a57      	ldr	r2, [pc, #348]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 800269c:	f023 0304 	bic.w	r3, r3, #4
 80026a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d015      	beq.n	80026d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026aa:	f7ff fb65 	bl	8001d78 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b0:	e00a      	b.n	80026c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b2:	f7ff fb61 	bl	8001d78 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e0b1      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c8:	4b4b      	ldr	r3, [pc, #300]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0ee      	beq.n	80026b2 <HAL_RCC_OscConfig+0x37e>
 80026d4:	e014      	b.n	8002700 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d6:	f7ff fb4f 	bl	8001d78 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026dc:	e00a      	b.n	80026f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026de:	f7ff fb4b 	bl	8001d78 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e09b      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f4:	4b40      	ldr	r3, [pc, #256]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1ee      	bne.n	80026de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002700:	7dfb      	ldrb	r3, [r7, #23]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d105      	bne.n	8002712 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002706:	4b3c      	ldr	r3, [pc, #240]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	4a3b      	ldr	r2, [pc, #236]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 800270c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002710:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8087 	beq.w	800282a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800271c:	4b36      	ldr	r3, [pc, #216]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 030c 	and.w	r3, r3, #12
 8002724:	2b08      	cmp	r3, #8
 8002726:	d061      	beq.n	80027ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d146      	bne.n	80027be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002730:	4b33      	ldr	r3, [pc, #204]	; (8002800 <HAL_RCC_OscConfig+0x4cc>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002736:	f7ff fb1f 	bl	8001d78 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273e:	f7ff fb1b 	bl	8001d78 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e06d      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002750:	4b29      	ldr	r3, [pc, #164]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f0      	bne.n	800273e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002764:	d108      	bne.n	8002778 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002766:	4b24      	ldr	r3, [pc, #144]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	4921      	ldr	r1, [pc, #132]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002778:	4b1f      	ldr	r3, [pc, #124]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a19      	ldr	r1, [r3, #32]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	430b      	orrs	r3, r1
 800278a:	491b      	ldr	r1, [pc, #108]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002790:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <HAL_RCC_OscConfig+0x4cc>)
 8002792:	2201      	movs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002796:	f7ff faef 	bl	8001d78 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279e:	f7ff faeb 	bl	8001d78 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e03d      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027b0:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x46a>
 80027bc:	e035      	b.n	800282a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <HAL_RCC_OscConfig+0x4cc>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7ff fad8 	bl	8001d78 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027cc:	f7ff fad4 	bl	8001d78 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e026      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x498>
 80027ea:	e01e      	b.n	800282a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d107      	bne.n	8002804 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e019      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40007000 	.word	0x40007000
 8002800:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_RCC_OscConfig+0x500>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	429a      	cmp	r2, r3
 8002816:	d106      	bne.n	8002826 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002822:	429a      	cmp	r2, r3
 8002824:	d001      	beq.n	800282a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000

08002838 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0d0      	b.n	80029ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800284c:	4b6a      	ldr	r3, [pc, #424]	; (80029f8 <HAL_RCC_ClockConfig+0x1c0>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d910      	bls.n	800287c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285a:	4b67      	ldr	r3, [pc, #412]	; (80029f8 <HAL_RCC_ClockConfig+0x1c0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 0207 	bic.w	r2, r3, #7
 8002862:	4965      	ldr	r1, [pc, #404]	; (80029f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800286a:	4b63      	ldr	r3, [pc, #396]	; (80029f8 <HAL_RCC_ClockConfig+0x1c0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0b8      	b.n	80029ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d020      	beq.n	80028ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002894:	4b59      	ldr	r3, [pc, #356]	; (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	4a58      	ldr	r2, [pc, #352]	; (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 800289a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800289e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028ac:	4b53      	ldr	r3, [pc, #332]	; (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	4a52      	ldr	r2, [pc, #328]	; (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 80028b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b8:	4b50      	ldr	r3, [pc, #320]	; (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	494d      	ldr	r1, [pc, #308]	; (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d040      	beq.n	8002958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d107      	bne.n	80028ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028de:	4b47      	ldr	r3, [pc, #284]	; (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d115      	bne.n	8002916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e07f      	b.n	80029ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d107      	bne.n	8002906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f6:	4b41      	ldr	r3, [pc, #260]	; (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e073      	b.n	80029ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002906:	4b3d      	ldr	r3, [pc, #244]	; (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e06b      	b.n	80029ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002916:	4b39      	ldr	r3, [pc, #228]	; (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f023 0203 	bic.w	r2, r3, #3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	4936      	ldr	r1, [pc, #216]	; (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 8002924:	4313      	orrs	r3, r2
 8002926:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002928:	f7ff fa26 	bl	8001d78 <HAL_GetTick>
 800292c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292e:	e00a      	b.n	8002946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002930:	f7ff fa22 	bl	8001d78 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	f241 3288 	movw	r2, #5000	; 0x1388
 800293e:	4293      	cmp	r3, r2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e053      	b.n	80029ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002946:	4b2d      	ldr	r3, [pc, #180]	; (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 020c 	and.w	r2, r3, #12
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	429a      	cmp	r2, r3
 8002956:	d1eb      	bne.n	8002930 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002958:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <HAL_RCC_ClockConfig+0x1c0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d210      	bcs.n	8002988 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 0207 	bic.w	r2, r3, #7
 800296e:	4922      	ldr	r1, [pc, #136]	; (80029f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002976:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e032      	b.n	80029ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002994:	4b19      	ldr	r3, [pc, #100]	; (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4916      	ldr	r1, [pc, #88]	; (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d009      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029b2:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	490e      	ldr	r1, [pc, #56]	; (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029c6:	f000 f821 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 80029ca:	4602      	mov	r2, r0
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	490a      	ldr	r1, [pc, #40]	; (8002a00 <HAL_RCC_ClockConfig+0x1c8>)
 80029d8:	5ccb      	ldrb	r3, [r1, r3]
 80029da:	fa22 f303 	lsr.w	r3, r2, r3
 80029de:	4a09      	ldr	r2, [pc, #36]	; (8002a04 <HAL_RCC_ClockConfig+0x1cc>)
 80029e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029e2:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <HAL_RCC_ClockConfig+0x1d0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff f984 	bl	8001cf4 <HAL_InitTick>

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40022000 	.word	0x40022000
 80029fc:	40021000 	.word	0x40021000
 8002a00:	0800491c 	.word	0x0800491c
 8002a04:	20000010 	.word	0x20000010
 8002a08:	20000014 	.word	0x20000014

08002a0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a0c:	b490      	push	{r4, r7}
 8002a0e:	b08a      	sub	sp, #40	; 0x28
 8002a10:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a12:	4b29      	ldr	r3, [pc, #164]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002a14:	1d3c      	adds	r4, r7, #4
 8002a16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a1c:	f240 2301 	movw	r3, #513	; 0x201
 8002a20:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
 8002a26:	2300      	movs	r3, #0
 8002a28:	61bb      	str	r3, [r7, #24]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a36:	4b21      	ldr	r3, [pc, #132]	; (8002abc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d002      	beq.n	8002a4c <HAL_RCC_GetSysClockFreq+0x40>
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d003      	beq.n	8002a52 <HAL_RCC_GetSysClockFreq+0x46>
 8002a4a:	e02b      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a4c:	4b1c      	ldr	r3, [pc, #112]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a4e:	623b      	str	r3, [r7, #32]
      break;
 8002a50:	e02b      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	0c9b      	lsrs	r3, r3, #18
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	3328      	adds	r3, #40	; 0x28
 8002a5c:	443b      	add	r3, r7
 8002a5e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a62:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d012      	beq.n	8002a94 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a6e:	4b13      	ldr	r3, [pc, #76]	; (8002abc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	0c5b      	lsrs	r3, r3, #17
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	3328      	adds	r3, #40	; 0x28
 8002a7a:	443b      	add	r3, r7
 8002a7c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a80:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	4a0e      	ldr	r2, [pc, #56]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a86:	fb03 f202 	mul.w	r2, r3, r2
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
 8002a92:	e004      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	4a0b      	ldr	r2, [pc, #44]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a98:	fb02 f303 	mul.w	r3, r2, r3
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	623b      	str	r3, [r7, #32]
      break;
 8002aa2:	e002      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002aa6:	623b      	str	r3, [r7, #32]
      break;
 8002aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3728      	adds	r7, #40	; 0x28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc90      	pop	{r4, r7}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	080048fc 	.word	0x080048fc
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	007a1200 	.word	0x007a1200
 8002ac4:	003d0900 	.word	0x003d0900

08002ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002acc:	4b02      	ldr	r3, [pc, #8]	; (8002ad8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ace:	681b      	ldr	r3, [r3, #0]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	20000010 	.word	0x20000010

08002adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ae0:	f7ff fff2 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	0a1b      	lsrs	r3, r3, #8
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	4903      	ldr	r1, [pc, #12]	; (8002b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002af2:	5ccb      	ldrb	r3, [r1, r3]
 8002af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40021000 	.word	0x40021000
 8002b00:	0800492c 	.word	0x0800492c

08002b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b08:	f7ff ffde 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	0adb      	lsrs	r3, r3, #11
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	4903      	ldr	r1, [pc, #12]	; (8002b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b1a:	5ccb      	ldrb	r3, [r1, r3]
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40021000 	.word	0x40021000
 8002b28:	0800492c 	.word	0x0800492c

08002b2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b34:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <RCC_Delay+0x34>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <RCC_Delay+0x38>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	0a5b      	lsrs	r3, r3, #9
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	fb02 f303 	mul.w	r3, r2, r3
 8002b46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b48:	bf00      	nop
  }
  while (Delay --);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1e5a      	subs	r2, r3, #1
 8002b4e:	60fa      	str	r2, [r7, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f9      	bne.n	8002b48 <RCC_Delay+0x1c>
}
 8002b54:	bf00      	nop
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr
 8002b60:	20000010 	.word	0x20000010
 8002b64:	10624dd3 	.word	0x10624dd3

08002b68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e076      	b.n	8002c68 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d108      	bne.n	8002b94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b8a:	d009      	beq.n	8002ba0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	61da      	str	r2, [r3, #28]
 8002b92:	e005      	b.n	8002ba0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fe ff66 	bl	8001a8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c24:	ea42 0103 	orr.w	r1, r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	0c1a      	lsrs	r2, r3, #16
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f002 0204 	and.w	r2, r2, #4
 8002c46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	69da      	ldr	r2, [r3, #28]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_SPI_Transmit+0x22>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e126      	b.n	8002ee0 <HAL_SPI_Transmit+0x270>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c9a:	f7ff f86d 	bl	8001d78 <HAL_GetTick>
 8002c9e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d002      	beq.n	8002cb6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cb4:	e10b      	b.n	8002ece <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <HAL_SPI_Transmit+0x52>
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d102      	bne.n	8002cc8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cc6:	e102      	b.n	8002ece <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2203      	movs	r2, #3
 8002ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	88fa      	ldrh	r2, [r7, #6]
 8002ce0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	88fa      	ldrh	r2, [r7, #6]
 8002ce6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d0e:	d10f      	bne.n	8002d30 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d2e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b40      	cmp	r3, #64	; 0x40
 8002d3c:	d007      	beq.n	8002d4e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d56:	d14b      	bne.n	8002df0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <HAL_SPI_Transmit+0xf6>
 8002d60:	8afb      	ldrh	r3, [r7, #22]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d13e      	bne.n	8002de4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	881a      	ldrh	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	1c9a      	adds	r2, r3, #2
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d8a:	e02b      	b.n	8002de4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d112      	bne.n	8002dc0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	881a      	ldrh	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	1c9a      	adds	r2, r3, #2
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dbe:	e011      	b.n	8002de4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dc0:	f7fe ffda 	bl	8001d78 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d803      	bhi.n	8002dd8 <HAL_SPI_Transmit+0x168>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd6:	d102      	bne.n	8002dde <HAL_SPI_Transmit+0x16e>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d102      	bne.n	8002de4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002de2:	e074      	b.n	8002ece <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1ce      	bne.n	8002d8c <HAL_SPI_Transmit+0x11c>
 8002dee:	e04c      	b.n	8002e8a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_SPI_Transmit+0x18e>
 8002df8:	8afb      	ldrh	r3, [r7, #22]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d140      	bne.n	8002e80 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	330c      	adds	r3, #12
 8002e08:	7812      	ldrb	r2, [r2, #0]
 8002e0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e24:	e02c      	b.n	8002e80 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d113      	bne.n	8002e5c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	330c      	adds	r3, #12
 8002e3e:	7812      	ldrb	r2, [r2, #0]
 8002e40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e5a:	e011      	b.n	8002e80 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e5c:	f7fe ff8c 	bl	8001d78 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d803      	bhi.n	8002e74 <HAL_SPI_Transmit+0x204>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e72:	d102      	bne.n	8002e7a <HAL_SPI_Transmit+0x20a>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d102      	bne.n	8002e80 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e7e:	e026      	b.n	8002ece <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1cd      	bne.n	8002e26 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	6839      	ldr	r1, [r7, #0]
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 fbb8 	bl	8003604 <SPI_EndRxTxTransaction>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10a      	bne.n	8002ebe <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	77fb      	strb	r3, [r7, #31]
 8002eca:	e000      	b.n	8002ece <HAL_SPI_Transmit+0x25e>
  }

error:
 8002ecc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ede:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3720      	adds	r7, #32
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f04:	d112      	bne.n	8002f2c <HAL_SPI_Receive+0x44>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10e      	bne.n	8002f2c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2204      	movs	r2, #4
 8002f12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f8f1 	bl	800310a <HAL_SPI_TransmitReceive>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	e0ea      	b.n	8003102 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_SPI_Receive+0x52>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e0e3      	b.n	8003102 <HAL_SPI_Receive+0x21a>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f42:	f7fe ff19 	bl	8001d78 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d002      	beq.n	8002f5a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002f54:	2302      	movs	r3, #2
 8002f56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f58:	e0ca      	b.n	80030f0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <HAL_SPI_Receive+0x7e>
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d102      	bne.n	8002f6c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f6a:	e0c1      	b.n	80030f0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2204      	movs	r2, #4
 8002f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	88fa      	ldrh	r2, [r7, #6]
 8002f84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	88fa      	ldrh	r2, [r7, #6]
 8002f8a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb2:	d10f      	bne.n	8002fd4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fd2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fde:	2b40      	cmp	r3, #64	; 0x40
 8002fe0:	d007      	beq.n	8002ff2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ff0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d162      	bne.n	80030c0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ffa:	e02e      	b.n	800305a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b01      	cmp	r3, #1
 8003008:	d115      	bne.n	8003036 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f103 020c 	add.w	r2, r3, #12
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003016:	7812      	ldrb	r2, [r2, #0]
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003034:	e011      	b.n	800305a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003036:	f7fe fe9f 	bl	8001d78 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d803      	bhi.n	800304e <HAL_SPI_Receive+0x166>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304c:	d102      	bne.n	8003054 <HAL_SPI_Receive+0x16c>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003058:	e04a      	b.n	80030f0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800305e:	b29b      	uxth	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1cb      	bne.n	8002ffc <HAL_SPI_Receive+0x114>
 8003064:	e031      	b.n	80030ca <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b01      	cmp	r3, #1
 8003072:	d113      	bne.n	800309c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307e:	b292      	uxth	r2, r2
 8003080:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	1c9a      	adds	r2, r3, #2
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	87da      	strh	r2, [r3, #62]	; 0x3e
 800309a:	e011      	b.n	80030c0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800309c:	f7fe fe6c 	bl	8001d78 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d803      	bhi.n	80030b4 <HAL_SPI_Receive+0x1cc>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b2:	d102      	bne.n	80030ba <HAL_SPI_Receive+0x1d2>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d102      	bne.n	80030c0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80030be:	e017      	b.n	80030f0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1cd      	bne.n	8003066 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	6839      	ldr	r1, [r7, #0]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 fa46 	bl	8003560 <SPI_EndRxTransaction>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2220      	movs	r2, #32
 80030de:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	75fb      	strb	r3, [r7, #23]
 80030ec:	e000      	b.n	80030f0 <HAL_SPI_Receive+0x208>
  }

error :
 80030ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003100:	7dfb      	ldrb	r3, [r7, #23]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b08c      	sub	sp, #48	; 0x30
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003118:	2301      	movs	r3, #1
 800311a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <HAL_SPI_TransmitReceive+0x26>
 800312c:	2302      	movs	r3, #2
 800312e:	e18a      	b.n	8003446 <HAL_SPI_TransmitReceive+0x33c>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003138:	f7fe fe1e 	bl	8001d78 <HAL_GetTick>
 800313c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003144:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800314e:	887b      	ldrh	r3, [r7, #2]
 8003150:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003152:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003156:	2b01      	cmp	r3, #1
 8003158:	d00f      	beq.n	800317a <HAL_SPI_TransmitReceive+0x70>
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003160:	d107      	bne.n	8003172 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d103      	bne.n	8003172 <HAL_SPI_TransmitReceive+0x68>
 800316a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800316e:	2b04      	cmp	r3, #4
 8003170:	d003      	beq.n	800317a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003172:	2302      	movs	r3, #2
 8003174:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003178:	e15b      	b.n	8003432 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_SPI_TransmitReceive+0x82>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <HAL_SPI_TransmitReceive+0x82>
 8003186:	887b      	ldrh	r3, [r7, #2]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d103      	bne.n	8003194 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003192:	e14e      	b.n	8003432 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b04      	cmp	r3, #4
 800319e:	d003      	beq.n	80031a8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2205      	movs	r2, #5
 80031a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	887a      	ldrh	r2, [r7, #2]
 80031b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	887a      	ldrh	r2, [r7, #2]
 80031be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	887a      	ldrh	r2, [r7, #2]
 80031ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	887a      	ldrh	r2, [r7, #2]
 80031d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e8:	2b40      	cmp	r3, #64	; 0x40
 80031ea:	d007      	beq.n	80031fc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003204:	d178      	bne.n	80032f8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <HAL_SPI_TransmitReceive+0x10a>
 800320e:	8b7b      	ldrh	r3, [r7, #26]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d166      	bne.n	80032e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003218:	881a      	ldrh	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	1c9a      	adds	r2, r3, #2
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003238:	e053      	b.n	80032e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b02      	cmp	r3, #2
 8003246:	d11b      	bne.n	8003280 <HAL_SPI_TransmitReceive+0x176>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d016      	beq.n	8003280 <HAL_SPI_TransmitReceive+0x176>
 8003252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003254:	2b01      	cmp	r3, #1
 8003256:	d113      	bne.n	8003280 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	881a      	ldrh	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	1c9a      	adds	r2, r3, #2
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003272:	b29b      	uxth	r3, r3
 8003274:	3b01      	subs	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b01      	cmp	r3, #1
 800328c:	d119      	bne.n	80032c2 <HAL_SPI_TransmitReceive+0x1b8>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d014      	beq.n	80032c2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a2:	b292      	uxth	r2, r2
 80032a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032aa:	1c9a      	adds	r2, r3, #2
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032be:	2301      	movs	r3, #1
 80032c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032c2:	f7fe fd59 	bl	8001d78 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d807      	bhi.n	80032e2 <HAL_SPI_TransmitReceive+0x1d8>
 80032d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d003      	beq.n	80032e2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80032e0:	e0a7      	b.n	8003432 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1a6      	bne.n	800323a <HAL_SPI_TransmitReceive+0x130>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1a1      	bne.n	800323a <HAL_SPI_TransmitReceive+0x130>
 80032f6:	e07c      	b.n	80033f2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <HAL_SPI_TransmitReceive+0x1fc>
 8003300:	8b7b      	ldrh	r3, [r7, #26]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d16b      	bne.n	80033de <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	330c      	adds	r3, #12
 8003310:	7812      	ldrb	r2, [r2, #0]
 8003312:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800332c:	e057      	b.n	80033de <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b02      	cmp	r3, #2
 800333a:	d11c      	bne.n	8003376 <HAL_SPI_TransmitReceive+0x26c>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d017      	beq.n	8003376 <HAL_SPI_TransmitReceive+0x26c>
 8003346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003348:	2b01      	cmp	r3, #1
 800334a:	d114      	bne.n	8003376 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	330c      	adds	r3, #12
 8003356:	7812      	ldrb	r2, [r2, #0]
 8003358:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b01      	cmp	r3, #1
 8003382:	d119      	bne.n	80033b8 <HAL_SPI_TransmitReceive+0x2ae>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d014      	beq.n	80033b8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033b4:	2301      	movs	r3, #1
 80033b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033b8:	f7fe fcde 	bl	8001d78 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d803      	bhi.n	80033d0 <HAL_SPI_TransmitReceive+0x2c6>
 80033c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ce:	d102      	bne.n	80033d6 <HAL_SPI_TransmitReceive+0x2cc>
 80033d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d103      	bne.n	80033de <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033dc:	e029      	b.n	8003432 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1a2      	bne.n	800332e <HAL_SPI_TransmitReceive+0x224>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d19d      	bne.n	800332e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f904 	bl	8003604 <SPI_EndRxTxTransaction>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d006      	beq.n	8003410 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800340e:	e010      	b.n	8003432 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10b      	bne.n	8003430 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	e000      	b.n	8003432 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003430:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003442:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003446:	4618      	mov	r0, r3
 8003448:	3730      	adds	r7, #48	; 0x30
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	603b      	str	r3, [r7, #0]
 800345c:	4613      	mov	r3, r2
 800345e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003460:	f7fe fc8a 	bl	8001d78 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	4413      	add	r3, r2
 800346e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003470:	f7fe fc82 	bl	8001d78 <HAL_GetTick>
 8003474:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003476:	4b39      	ldr	r3, [pc, #228]	; (800355c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	015b      	lsls	r3, r3, #5
 800347c:	0d1b      	lsrs	r3, r3, #20
 800347e:	69fa      	ldr	r2, [r7, #28]
 8003480:	fb02 f303 	mul.w	r3, r2, r3
 8003484:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003486:	e054      	b.n	8003532 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348e:	d050      	beq.n	8003532 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003490:	f7fe fc72 	bl	8001d78 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	429a      	cmp	r2, r3
 800349e:	d902      	bls.n	80034a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d13d      	bne.n	8003522 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034be:	d111      	bne.n	80034e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c8:	d004      	beq.n	80034d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d2:	d107      	bne.n	80034e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ec:	d10f      	bne.n	800350e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800350c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e017      	b.n	8003552 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	3b01      	subs	r3, #1
 8003530:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4013      	ands	r3, r2
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	429a      	cmp	r2, r3
 8003540:	bf0c      	ite	eq
 8003542:	2301      	moveq	r3, #1
 8003544:	2300      	movne	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	461a      	mov	r2, r3
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	429a      	cmp	r2, r3
 800354e:	d19b      	bne.n	8003488 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3720      	adds	r7, #32
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000010 	.word	0x20000010

08003560 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af02      	add	r7, sp, #8
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003574:	d111      	bne.n	800359a <SPI_EndRxTransaction+0x3a>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800357e:	d004      	beq.n	800358a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003588:	d107      	bne.n	800359a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003598:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035a2:	d117      	bne.n	80035d4 <SPI_EndRxTransaction+0x74>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ac:	d112      	bne.n	80035d4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2200      	movs	r2, #0
 80035b6:	2101      	movs	r1, #1
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f7ff ff49 	bl	8003450 <SPI_WaitFlagStateUntilTimeout>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d01a      	beq.n	80035fa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	f043 0220 	orr.w	r2, r3, #32
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e013      	b.n	80035fc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2200      	movs	r2, #0
 80035dc:	2180      	movs	r1, #128	; 0x80
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f7ff ff36 	bl	8003450 <SPI_WaitFlagStateUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ee:	f043 0220 	orr.w	r2, r3, #32
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e000      	b.n	80035fc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2200      	movs	r2, #0
 8003618:	2180      	movs	r1, #128	; 0x80
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f7ff ff18 	bl	8003450 <SPI_WaitFlagStateUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d007      	beq.n	8003636 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362a:	f043 0220 	orr.w	r2, r3, #32
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e000      	b.n	8003638 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e03f      	b.n	80036d2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fe fa5a 	bl	8001b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2224      	movs	r2, #36	; 0x24
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003682:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f905 	bl	8003894 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003698:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695a      	ldr	r2, [r3, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b08a      	sub	sp, #40	; 0x28
 80036de:	af02      	add	r7, sp, #8
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	603b      	str	r3, [r7, #0]
 80036e6:	4613      	mov	r3, r2
 80036e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	d17c      	bne.n	80037f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <HAL_UART_Transmit+0x2c>
 8003700:	88fb      	ldrh	r3, [r7, #6]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e075      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UART_Transmit+0x3e>
 8003714:	2302      	movs	r3, #2
 8003716:	e06e      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2221      	movs	r2, #33	; 0x21
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800372e:	f7fe fb23 	bl	8001d78 <HAL_GetTick>
 8003732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	88fa      	ldrh	r2, [r7, #6]
 8003738:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	88fa      	ldrh	r2, [r7, #6]
 800373e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003748:	d108      	bne.n	800375c <HAL_UART_Transmit+0x82>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d104      	bne.n	800375c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	e003      	b.n	8003764 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003760:	2300      	movs	r3, #0
 8003762:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800376c:	e02a      	b.n	80037c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2200      	movs	r2, #0
 8003776:	2180      	movs	r1, #128	; 0x80
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f840 	bl	80037fe <UART_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e036      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10b      	bne.n	80037a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800379c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	3302      	adds	r3, #2
 80037a2:	61bb      	str	r3, [r7, #24]
 80037a4:	e007      	b.n	80037b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	781a      	ldrb	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	3301      	adds	r3, #1
 80037b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1cf      	bne.n	800376e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2200      	movs	r2, #0
 80037d6:	2140      	movs	r1, #64	; 0x40
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 f810 	bl	80037fe <UART_WaitOnFlagUntilTimeout>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e006      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	e000      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037f4:	2302      	movs	r3, #2
  }
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	4613      	mov	r3, r2
 800380c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800380e:	e02c      	b.n	800386a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003816:	d028      	beq.n	800386a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d007      	beq.n	800382e <UART_WaitOnFlagUntilTimeout+0x30>
 800381e:	f7fe faab 	bl	8001d78 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	429a      	cmp	r2, r3
 800382c:	d21d      	bcs.n	800386a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800383c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0201 	bic.w	r2, r2, #1
 800384c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e00f      	b.n	800388a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4013      	ands	r3, r2
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	429a      	cmp	r2, r3
 8003878:	bf0c      	ite	eq
 800387a:	2301      	moveq	r3, #1
 800387c:	2300      	movne	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	79fb      	ldrb	r3, [r7, #7]
 8003884:	429a      	cmp	r2, r3
 8003886:	d0c3      	beq.n	8003810 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038ce:	f023 030c 	bic.w	r3, r3, #12
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	68b9      	ldr	r1, [r7, #8]
 80038d8:	430b      	orrs	r3, r1
 80038da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a2c      	ldr	r2, [pc, #176]	; (80039a8 <UART_SetConfig+0x114>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d103      	bne.n	8003904 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80038fc:	f7ff f902 	bl	8002b04 <HAL_RCC_GetPCLK2Freq>
 8003900:	60f8      	str	r0, [r7, #12]
 8003902:	e002      	b.n	800390a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003904:	f7ff f8ea 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 8003908:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	009a      	lsls	r2, r3, #2
 8003914:	441a      	add	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003920:	4a22      	ldr	r2, [pc, #136]	; (80039ac <UART_SetConfig+0x118>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	0119      	lsls	r1, r3, #4
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	009a      	lsls	r2, r3, #2
 8003934:	441a      	add	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003940:	4b1a      	ldr	r3, [pc, #104]	; (80039ac <UART_SetConfig+0x118>)
 8003942:	fba3 0302 	umull	r0, r3, r3, r2
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	2064      	movs	r0, #100	; 0x64
 800394a:	fb00 f303 	mul.w	r3, r0, r3
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	3332      	adds	r3, #50	; 0x32
 8003954:	4a15      	ldr	r2, [pc, #84]	; (80039ac <UART_SetConfig+0x118>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	095b      	lsrs	r3, r3, #5
 800395c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003960:	4419      	add	r1, r3
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	009a      	lsls	r2, r3, #2
 800396c:	441a      	add	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	fbb2 f2f3 	udiv	r2, r2, r3
 8003978:	4b0c      	ldr	r3, [pc, #48]	; (80039ac <UART_SetConfig+0x118>)
 800397a:	fba3 0302 	umull	r0, r3, r3, r2
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	2064      	movs	r0, #100	; 0x64
 8003982:	fb00 f303 	mul.w	r3, r0, r3
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	3332      	adds	r3, #50	; 0x32
 800398c:	4a07      	ldr	r2, [pc, #28]	; (80039ac <UART_SetConfig+0x118>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	f003 020f 	and.w	r2, r3, #15
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	440a      	add	r2, r1
 800399e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039a0:	bf00      	nop
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40013800 	.word	0x40013800
 80039ac:	51eb851f 	.word	0x51eb851f

080039b0 <__errno>:
 80039b0:	4b01      	ldr	r3, [pc, #4]	; (80039b8 <__errno+0x8>)
 80039b2:	6818      	ldr	r0, [r3, #0]
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	2000001c 	.word	0x2000001c

080039bc <__libc_init_array>:
 80039bc:	b570      	push	{r4, r5, r6, lr}
 80039be:	2600      	movs	r6, #0
 80039c0:	4d0c      	ldr	r5, [pc, #48]	; (80039f4 <__libc_init_array+0x38>)
 80039c2:	4c0d      	ldr	r4, [pc, #52]	; (80039f8 <__libc_init_array+0x3c>)
 80039c4:	1b64      	subs	r4, r4, r5
 80039c6:	10a4      	asrs	r4, r4, #2
 80039c8:	42a6      	cmp	r6, r4
 80039ca:	d109      	bne.n	80039e0 <__libc_init_array+0x24>
 80039cc:	f000 fc9c 	bl	8004308 <_init>
 80039d0:	2600      	movs	r6, #0
 80039d2:	4d0a      	ldr	r5, [pc, #40]	; (80039fc <__libc_init_array+0x40>)
 80039d4:	4c0a      	ldr	r4, [pc, #40]	; (8003a00 <__libc_init_array+0x44>)
 80039d6:	1b64      	subs	r4, r4, r5
 80039d8:	10a4      	asrs	r4, r4, #2
 80039da:	42a6      	cmp	r6, r4
 80039dc:	d105      	bne.n	80039ea <__libc_init_array+0x2e>
 80039de:	bd70      	pop	{r4, r5, r6, pc}
 80039e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e4:	4798      	blx	r3
 80039e6:	3601      	adds	r6, #1
 80039e8:	e7ee      	b.n	80039c8 <__libc_init_array+0xc>
 80039ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ee:	4798      	blx	r3
 80039f0:	3601      	adds	r6, #1
 80039f2:	e7f2      	b.n	80039da <__libc_init_array+0x1e>
 80039f4:	08004968 	.word	0x08004968
 80039f8:	08004968 	.word	0x08004968
 80039fc:	08004968 	.word	0x08004968
 8003a00:	0800496c 	.word	0x0800496c

08003a04 <memcpy>:
 8003a04:	440a      	add	r2, r1
 8003a06:	4291      	cmp	r1, r2
 8003a08:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a0c:	d100      	bne.n	8003a10 <memcpy+0xc>
 8003a0e:	4770      	bx	lr
 8003a10:	b510      	push	{r4, lr}
 8003a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a16:	4291      	cmp	r1, r2
 8003a18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a1c:	d1f9      	bne.n	8003a12 <memcpy+0xe>
 8003a1e:	bd10      	pop	{r4, pc}

08003a20 <memset>:
 8003a20:	4603      	mov	r3, r0
 8003a22:	4402      	add	r2, r0
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d100      	bne.n	8003a2a <memset+0xa>
 8003a28:	4770      	bx	lr
 8003a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a2e:	e7f9      	b.n	8003a24 <memset+0x4>

08003a30 <siprintf>:
 8003a30:	b40e      	push	{r1, r2, r3}
 8003a32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a36:	b500      	push	{lr}
 8003a38:	b09c      	sub	sp, #112	; 0x70
 8003a3a:	ab1d      	add	r3, sp, #116	; 0x74
 8003a3c:	9002      	str	r0, [sp, #8]
 8003a3e:	9006      	str	r0, [sp, #24]
 8003a40:	9107      	str	r1, [sp, #28]
 8003a42:	9104      	str	r1, [sp, #16]
 8003a44:	4808      	ldr	r0, [pc, #32]	; (8003a68 <siprintf+0x38>)
 8003a46:	4909      	ldr	r1, [pc, #36]	; (8003a6c <siprintf+0x3c>)
 8003a48:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a4c:	9105      	str	r1, [sp, #20]
 8003a4e:	6800      	ldr	r0, [r0, #0]
 8003a50:	a902      	add	r1, sp, #8
 8003a52:	9301      	str	r3, [sp, #4]
 8003a54:	f000 f868 	bl	8003b28 <_svfiprintf_r>
 8003a58:	2200      	movs	r2, #0
 8003a5a:	9b02      	ldr	r3, [sp, #8]
 8003a5c:	701a      	strb	r2, [r3, #0]
 8003a5e:	b01c      	add	sp, #112	; 0x70
 8003a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a64:	b003      	add	sp, #12
 8003a66:	4770      	bx	lr
 8003a68:	2000001c 	.word	0x2000001c
 8003a6c:	ffff0208 	.word	0xffff0208

08003a70 <__ssputs_r>:
 8003a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a74:	688e      	ldr	r6, [r1, #8]
 8003a76:	4682      	mov	sl, r0
 8003a78:	429e      	cmp	r6, r3
 8003a7a:	460c      	mov	r4, r1
 8003a7c:	4690      	mov	r8, r2
 8003a7e:	461f      	mov	r7, r3
 8003a80:	d838      	bhi.n	8003af4 <__ssputs_r+0x84>
 8003a82:	898a      	ldrh	r2, [r1, #12]
 8003a84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a88:	d032      	beq.n	8003af0 <__ssputs_r+0x80>
 8003a8a:	6825      	ldr	r5, [r4, #0]
 8003a8c:	6909      	ldr	r1, [r1, #16]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	eba5 0901 	sub.w	r9, r5, r1
 8003a94:	6965      	ldr	r5, [r4, #20]
 8003a96:	444b      	add	r3, r9
 8003a98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003aa0:	106d      	asrs	r5, r5, #1
 8003aa2:	429d      	cmp	r5, r3
 8003aa4:	bf38      	it	cc
 8003aa6:	461d      	movcc	r5, r3
 8003aa8:	0553      	lsls	r3, r2, #21
 8003aaa:	d531      	bpl.n	8003b10 <__ssputs_r+0xa0>
 8003aac:	4629      	mov	r1, r5
 8003aae:	f000 fb61 	bl	8004174 <_malloc_r>
 8003ab2:	4606      	mov	r6, r0
 8003ab4:	b950      	cbnz	r0, 8003acc <__ssputs_r+0x5c>
 8003ab6:	230c      	movs	r3, #12
 8003ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8003abc:	f8ca 3000 	str.w	r3, [sl]
 8003ac0:	89a3      	ldrh	r3, [r4, #12]
 8003ac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ac6:	81a3      	strh	r3, [r4, #12]
 8003ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003acc:	464a      	mov	r2, r9
 8003ace:	6921      	ldr	r1, [r4, #16]
 8003ad0:	f7ff ff98 	bl	8003a04 <memcpy>
 8003ad4:	89a3      	ldrh	r3, [r4, #12]
 8003ad6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ade:	81a3      	strh	r3, [r4, #12]
 8003ae0:	6126      	str	r6, [r4, #16]
 8003ae2:	444e      	add	r6, r9
 8003ae4:	6026      	str	r6, [r4, #0]
 8003ae6:	463e      	mov	r6, r7
 8003ae8:	6165      	str	r5, [r4, #20]
 8003aea:	eba5 0509 	sub.w	r5, r5, r9
 8003aee:	60a5      	str	r5, [r4, #8]
 8003af0:	42be      	cmp	r6, r7
 8003af2:	d900      	bls.n	8003af6 <__ssputs_r+0x86>
 8003af4:	463e      	mov	r6, r7
 8003af6:	4632      	mov	r2, r6
 8003af8:	4641      	mov	r1, r8
 8003afa:	6820      	ldr	r0, [r4, #0]
 8003afc:	f000 fab8 	bl	8004070 <memmove>
 8003b00:	68a3      	ldr	r3, [r4, #8]
 8003b02:	2000      	movs	r0, #0
 8003b04:	1b9b      	subs	r3, r3, r6
 8003b06:	60a3      	str	r3, [r4, #8]
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	4433      	add	r3, r6
 8003b0c:	6023      	str	r3, [r4, #0]
 8003b0e:	e7db      	b.n	8003ac8 <__ssputs_r+0x58>
 8003b10:	462a      	mov	r2, r5
 8003b12:	f000 fba3 	bl	800425c <_realloc_r>
 8003b16:	4606      	mov	r6, r0
 8003b18:	2800      	cmp	r0, #0
 8003b1a:	d1e1      	bne.n	8003ae0 <__ssputs_r+0x70>
 8003b1c:	4650      	mov	r0, sl
 8003b1e:	6921      	ldr	r1, [r4, #16]
 8003b20:	f000 fac0 	bl	80040a4 <_free_r>
 8003b24:	e7c7      	b.n	8003ab6 <__ssputs_r+0x46>
	...

08003b28 <_svfiprintf_r>:
 8003b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b2c:	4698      	mov	r8, r3
 8003b2e:	898b      	ldrh	r3, [r1, #12]
 8003b30:	4607      	mov	r7, r0
 8003b32:	061b      	lsls	r3, r3, #24
 8003b34:	460d      	mov	r5, r1
 8003b36:	4614      	mov	r4, r2
 8003b38:	b09d      	sub	sp, #116	; 0x74
 8003b3a:	d50e      	bpl.n	8003b5a <_svfiprintf_r+0x32>
 8003b3c:	690b      	ldr	r3, [r1, #16]
 8003b3e:	b963      	cbnz	r3, 8003b5a <_svfiprintf_r+0x32>
 8003b40:	2140      	movs	r1, #64	; 0x40
 8003b42:	f000 fb17 	bl	8004174 <_malloc_r>
 8003b46:	6028      	str	r0, [r5, #0]
 8003b48:	6128      	str	r0, [r5, #16]
 8003b4a:	b920      	cbnz	r0, 8003b56 <_svfiprintf_r+0x2e>
 8003b4c:	230c      	movs	r3, #12
 8003b4e:	603b      	str	r3, [r7, #0]
 8003b50:	f04f 30ff 	mov.w	r0, #4294967295
 8003b54:	e0d1      	b.n	8003cfa <_svfiprintf_r+0x1d2>
 8003b56:	2340      	movs	r3, #64	; 0x40
 8003b58:	616b      	str	r3, [r5, #20]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b5e:	2320      	movs	r3, #32
 8003b60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b64:	2330      	movs	r3, #48	; 0x30
 8003b66:	f04f 0901 	mov.w	r9, #1
 8003b6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003d14 <_svfiprintf_r+0x1ec>
 8003b72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b76:	4623      	mov	r3, r4
 8003b78:	469a      	mov	sl, r3
 8003b7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b7e:	b10a      	cbz	r2, 8003b84 <_svfiprintf_r+0x5c>
 8003b80:	2a25      	cmp	r2, #37	; 0x25
 8003b82:	d1f9      	bne.n	8003b78 <_svfiprintf_r+0x50>
 8003b84:	ebba 0b04 	subs.w	fp, sl, r4
 8003b88:	d00b      	beq.n	8003ba2 <_svfiprintf_r+0x7a>
 8003b8a:	465b      	mov	r3, fp
 8003b8c:	4622      	mov	r2, r4
 8003b8e:	4629      	mov	r1, r5
 8003b90:	4638      	mov	r0, r7
 8003b92:	f7ff ff6d 	bl	8003a70 <__ssputs_r>
 8003b96:	3001      	adds	r0, #1
 8003b98:	f000 80aa 	beq.w	8003cf0 <_svfiprintf_r+0x1c8>
 8003b9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b9e:	445a      	add	r2, fp
 8003ba0:	9209      	str	r2, [sp, #36]	; 0x24
 8003ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 80a2 	beq.w	8003cf0 <_svfiprintf_r+0x1c8>
 8003bac:	2300      	movs	r3, #0
 8003bae:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bb6:	f10a 0a01 	add.w	sl, sl, #1
 8003bba:	9304      	str	r3, [sp, #16]
 8003bbc:	9307      	str	r3, [sp, #28]
 8003bbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bc2:	931a      	str	r3, [sp, #104]	; 0x68
 8003bc4:	4654      	mov	r4, sl
 8003bc6:	2205      	movs	r2, #5
 8003bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bcc:	4851      	ldr	r0, [pc, #324]	; (8003d14 <_svfiprintf_r+0x1ec>)
 8003bce:	f000 fa41 	bl	8004054 <memchr>
 8003bd2:	9a04      	ldr	r2, [sp, #16]
 8003bd4:	b9d8      	cbnz	r0, 8003c0e <_svfiprintf_r+0xe6>
 8003bd6:	06d0      	lsls	r0, r2, #27
 8003bd8:	bf44      	itt	mi
 8003bda:	2320      	movmi	r3, #32
 8003bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003be0:	0711      	lsls	r1, r2, #28
 8003be2:	bf44      	itt	mi
 8003be4:	232b      	movmi	r3, #43	; 0x2b
 8003be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bea:	f89a 3000 	ldrb.w	r3, [sl]
 8003bee:	2b2a      	cmp	r3, #42	; 0x2a
 8003bf0:	d015      	beq.n	8003c1e <_svfiprintf_r+0xf6>
 8003bf2:	4654      	mov	r4, sl
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	f04f 0c0a 	mov.w	ip, #10
 8003bfa:	9a07      	ldr	r2, [sp, #28]
 8003bfc:	4621      	mov	r1, r4
 8003bfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c02:	3b30      	subs	r3, #48	; 0x30
 8003c04:	2b09      	cmp	r3, #9
 8003c06:	d94e      	bls.n	8003ca6 <_svfiprintf_r+0x17e>
 8003c08:	b1b0      	cbz	r0, 8003c38 <_svfiprintf_r+0x110>
 8003c0a:	9207      	str	r2, [sp, #28]
 8003c0c:	e014      	b.n	8003c38 <_svfiprintf_r+0x110>
 8003c0e:	eba0 0308 	sub.w	r3, r0, r8
 8003c12:	fa09 f303 	lsl.w	r3, r9, r3
 8003c16:	4313      	orrs	r3, r2
 8003c18:	46a2      	mov	sl, r4
 8003c1a:	9304      	str	r3, [sp, #16]
 8003c1c:	e7d2      	b.n	8003bc4 <_svfiprintf_r+0x9c>
 8003c1e:	9b03      	ldr	r3, [sp, #12]
 8003c20:	1d19      	adds	r1, r3, #4
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	9103      	str	r1, [sp, #12]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	bfbb      	ittet	lt
 8003c2a:	425b      	neglt	r3, r3
 8003c2c:	f042 0202 	orrlt.w	r2, r2, #2
 8003c30:	9307      	strge	r3, [sp, #28]
 8003c32:	9307      	strlt	r3, [sp, #28]
 8003c34:	bfb8      	it	lt
 8003c36:	9204      	strlt	r2, [sp, #16]
 8003c38:	7823      	ldrb	r3, [r4, #0]
 8003c3a:	2b2e      	cmp	r3, #46	; 0x2e
 8003c3c:	d10c      	bne.n	8003c58 <_svfiprintf_r+0x130>
 8003c3e:	7863      	ldrb	r3, [r4, #1]
 8003c40:	2b2a      	cmp	r3, #42	; 0x2a
 8003c42:	d135      	bne.n	8003cb0 <_svfiprintf_r+0x188>
 8003c44:	9b03      	ldr	r3, [sp, #12]
 8003c46:	3402      	adds	r4, #2
 8003c48:	1d1a      	adds	r2, r3, #4
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	9203      	str	r2, [sp, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	bfb8      	it	lt
 8003c52:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c56:	9305      	str	r3, [sp, #20]
 8003c58:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003d18 <_svfiprintf_r+0x1f0>
 8003c5c:	2203      	movs	r2, #3
 8003c5e:	4650      	mov	r0, sl
 8003c60:	7821      	ldrb	r1, [r4, #0]
 8003c62:	f000 f9f7 	bl	8004054 <memchr>
 8003c66:	b140      	cbz	r0, 8003c7a <_svfiprintf_r+0x152>
 8003c68:	2340      	movs	r3, #64	; 0x40
 8003c6a:	eba0 000a 	sub.w	r0, r0, sl
 8003c6e:	fa03 f000 	lsl.w	r0, r3, r0
 8003c72:	9b04      	ldr	r3, [sp, #16]
 8003c74:	3401      	adds	r4, #1
 8003c76:	4303      	orrs	r3, r0
 8003c78:	9304      	str	r3, [sp, #16]
 8003c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c7e:	2206      	movs	r2, #6
 8003c80:	4826      	ldr	r0, [pc, #152]	; (8003d1c <_svfiprintf_r+0x1f4>)
 8003c82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c86:	f000 f9e5 	bl	8004054 <memchr>
 8003c8a:	2800      	cmp	r0, #0
 8003c8c:	d038      	beq.n	8003d00 <_svfiprintf_r+0x1d8>
 8003c8e:	4b24      	ldr	r3, [pc, #144]	; (8003d20 <_svfiprintf_r+0x1f8>)
 8003c90:	bb1b      	cbnz	r3, 8003cda <_svfiprintf_r+0x1b2>
 8003c92:	9b03      	ldr	r3, [sp, #12]
 8003c94:	3307      	adds	r3, #7
 8003c96:	f023 0307 	bic.w	r3, r3, #7
 8003c9a:	3308      	adds	r3, #8
 8003c9c:	9303      	str	r3, [sp, #12]
 8003c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ca0:	4433      	add	r3, r6
 8003ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ca4:	e767      	b.n	8003b76 <_svfiprintf_r+0x4e>
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	2001      	movs	r0, #1
 8003caa:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cae:	e7a5      	b.n	8003bfc <_svfiprintf_r+0xd4>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f04f 0c0a 	mov.w	ip, #10
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	3401      	adds	r4, #1
 8003cba:	9305      	str	r3, [sp, #20]
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cc2:	3a30      	subs	r2, #48	; 0x30
 8003cc4:	2a09      	cmp	r2, #9
 8003cc6:	d903      	bls.n	8003cd0 <_svfiprintf_r+0x1a8>
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0c5      	beq.n	8003c58 <_svfiprintf_r+0x130>
 8003ccc:	9105      	str	r1, [sp, #20]
 8003cce:	e7c3      	b.n	8003c58 <_svfiprintf_r+0x130>
 8003cd0:	4604      	mov	r4, r0
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cd8:	e7f0      	b.n	8003cbc <_svfiprintf_r+0x194>
 8003cda:	ab03      	add	r3, sp, #12
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	462a      	mov	r2, r5
 8003ce0:	4638      	mov	r0, r7
 8003ce2:	4b10      	ldr	r3, [pc, #64]	; (8003d24 <_svfiprintf_r+0x1fc>)
 8003ce4:	a904      	add	r1, sp, #16
 8003ce6:	f3af 8000 	nop.w
 8003cea:	1c42      	adds	r2, r0, #1
 8003cec:	4606      	mov	r6, r0
 8003cee:	d1d6      	bne.n	8003c9e <_svfiprintf_r+0x176>
 8003cf0:	89ab      	ldrh	r3, [r5, #12]
 8003cf2:	065b      	lsls	r3, r3, #25
 8003cf4:	f53f af2c 	bmi.w	8003b50 <_svfiprintf_r+0x28>
 8003cf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cfa:	b01d      	add	sp, #116	; 0x74
 8003cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d00:	ab03      	add	r3, sp, #12
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	462a      	mov	r2, r5
 8003d06:	4638      	mov	r0, r7
 8003d08:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <_svfiprintf_r+0x1fc>)
 8003d0a:	a904      	add	r1, sp, #16
 8003d0c:	f000 f87c 	bl	8003e08 <_printf_i>
 8003d10:	e7eb      	b.n	8003cea <_svfiprintf_r+0x1c2>
 8003d12:	bf00      	nop
 8003d14:	08004934 	.word	0x08004934
 8003d18:	0800493a 	.word	0x0800493a
 8003d1c:	0800493e 	.word	0x0800493e
 8003d20:	00000000 	.word	0x00000000
 8003d24:	08003a71 	.word	0x08003a71

08003d28 <_printf_common>:
 8003d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d2c:	4616      	mov	r6, r2
 8003d2e:	4699      	mov	r9, r3
 8003d30:	688a      	ldr	r2, [r1, #8]
 8003d32:	690b      	ldr	r3, [r1, #16]
 8003d34:	4607      	mov	r7, r0
 8003d36:	4293      	cmp	r3, r2
 8003d38:	bfb8      	it	lt
 8003d3a:	4613      	movlt	r3, r2
 8003d3c:	6033      	str	r3, [r6, #0]
 8003d3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d42:	460c      	mov	r4, r1
 8003d44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d48:	b10a      	cbz	r2, 8003d4e <_printf_common+0x26>
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	6033      	str	r3, [r6, #0]
 8003d4e:	6823      	ldr	r3, [r4, #0]
 8003d50:	0699      	lsls	r1, r3, #26
 8003d52:	bf42      	ittt	mi
 8003d54:	6833      	ldrmi	r3, [r6, #0]
 8003d56:	3302      	addmi	r3, #2
 8003d58:	6033      	strmi	r3, [r6, #0]
 8003d5a:	6825      	ldr	r5, [r4, #0]
 8003d5c:	f015 0506 	ands.w	r5, r5, #6
 8003d60:	d106      	bne.n	8003d70 <_printf_common+0x48>
 8003d62:	f104 0a19 	add.w	sl, r4, #25
 8003d66:	68e3      	ldr	r3, [r4, #12]
 8003d68:	6832      	ldr	r2, [r6, #0]
 8003d6a:	1a9b      	subs	r3, r3, r2
 8003d6c:	42ab      	cmp	r3, r5
 8003d6e:	dc28      	bgt.n	8003dc2 <_printf_common+0x9a>
 8003d70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d74:	1e13      	subs	r3, r2, #0
 8003d76:	6822      	ldr	r2, [r4, #0]
 8003d78:	bf18      	it	ne
 8003d7a:	2301      	movne	r3, #1
 8003d7c:	0692      	lsls	r2, r2, #26
 8003d7e:	d42d      	bmi.n	8003ddc <_printf_common+0xb4>
 8003d80:	4649      	mov	r1, r9
 8003d82:	4638      	mov	r0, r7
 8003d84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d88:	47c0      	blx	r8
 8003d8a:	3001      	adds	r0, #1
 8003d8c:	d020      	beq.n	8003dd0 <_printf_common+0xa8>
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	68e5      	ldr	r5, [r4, #12]
 8003d92:	f003 0306 	and.w	r3, r3, #6
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	bf18      	it	ne
 8003d9a:	2500      	movne	r5, #0
 8003d9c:	6832      	ldr	r2, [r6, #0]
 8003d9e:	f04f 0600 	mov.w	r6, #0
 8003da2:	68a3      	ldr	r3, [r4, #8]
 8003da4:	bf08      	it	eq
 8003da6:	1aad      	subeq	r5, r5, r2
 8003da8:	6922      	ldr	r2, [r4, #16]
 8003daa:	bf08      	it	eq
 8003dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003db0:	4293      	cmp	r3, r2
 8003db2:	bfc4      	itt	gt
 8003db4:	1a9b      	subgt	r3, r3, r2
 8003db6:	18ed      	addgt	r5, r5, r3
 8003db8:	341a      	adds	r4, #26
 8003dba:	42b5      	cmp	r5, r6
 8003dbc:	d11a      	bne.n	8003df4 <_printf_common+0xcc>
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	e008      	b.n	8003dd4 <_printf_common+0xac>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	4652      	mov	r2, sl
 8003dc6:	4649      	mov	r1, r9
 8003dc8:	4638      	mov	r0, r7
 8003dca:	47c0      	blx	r8
 8003dcc:	3001      	adds	r0, #1
 8003dce:	d103      	bne.n	8003dd8 <_printf_common+0xb0>
 8003dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dd8:	3501      	adds	r5, #1
 8003dda:	e7c4      	b.n	8003d66 <_printf_common+0x3e>
 8003ddc:	2030      	movs	r0, #48	; 0x30
 8003dde:	18e1      	adds	r1, r4, r3
 8003de0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dea:	4422      	add	r2, r4
 8003dec:	3302      	adds	r3, #2
 8003dee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003df2:	e7c5      	b.n	8003d80 <_printf_common+0x58>
 8003df4:	2301      	movs	r3, #1
 8003df6:	4622      	mov	r2, r4
 8003df8:	4649      	mov	r1, r9
 8003dfa:	4638      	mov	r0, r7
 8003dfc:	47c0      	blx	r8
 8003dfe:	3001      	adds	r0, #1
 8003e00:	d0e6      	beq.n	8003dd0 <_printf_common+0xa8>
 8003e02:	3601      	adds	r6, #1
 8003e04:	e7d9      	b.n	8003dba <_printf_common+0x92>
	...

08003e08 <_printf_i>:
 8003e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e0c:	7e0f      	ldrb	r7, [r1, #24]
 8003e0e:	4691      	mov	r9, r2
 8003e10:	2f78      	cmp	r7, #120	; 0x78
 8003e12:	4680      	mov	r8, r0
 8003e14:	460c      	mov	r4, r1
 8003e16:	469a      	mov	sl, r3
 8003e18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e1e:	d807      	bhi.n	8003e30 <_printf_i+0x28>
 8003e20:	2f62      	cmp	r7, #98	; 0x62
 8003e22:	d80a      	bhi.n	8003e3a <_printf_i+0x32>
 8003e24:	2f00      	cmp	r7, #0
 8003e26:	f000 80d9 	beq.w	8003fdc <_printf_i+0x1d4>
 8003e2a:	2f58      	cmp	r7, #88	; 0x58
 8003e2c:	f000 80a4 	beq.w	8003f78 <_printf_i+0x170>
 8003e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e38:	e03a      	b.n	8003eb0 <_printf_i+0xa8>
 8003e3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e3e:	2b15      	cmp	r3, #21
 8003e40:	d8f6      	bhi.n	8003e30 <_printf_i+0x28>
 8003e42:	a101      	add	r1, pc, #4	; (adr r1, 8003e48 <_printf_i+0x40>)
 8003e44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e48:	08003ea1 	.word	0x08003ea1
 8003e4c:	08003eb5 	.word	0x08003eb5
 8003e50:	08003e31 	.word	0x08003e31
 8003e54:	08003e31 	.word	0x08003e31
 8003e58:	08003e31 	.word	0x08003e31
 8003e5c:	08003e31 	.word	0x08003e31
 8003e60:	08003eb5 	.word	0x08003eb5
 8003e64:	08003e31 	.word	0x08003e31
 8003e68:	08003e31 	.word	0x08003e31
 8003e6c:	08003e31 	.word	0x08003e31
 8003e70:	08003e31 	.word	0x08003e31
 8003e74:	08003fc3 	.word	0x08003fc3
 8003e78:	08003ee5 	.word	0x08003ee5
 8003e7c:	08003fa5 	.word	0x08003fa5
 8003e80:	08003e31 	.word	0x08003e31
 8003e84:	08003e31 	.word	0x08003e31
 8003e88:	08003fe5 	.word	0x08003fe5
 8003e8c:	08003e31 	.word	0x08003e31
 8003e90:	08003ee5 	.word	0x08003ee5
 8003e94:	08003e31 	.word	0x08003e31
 8003e98:	08003e31 	.word	0x08003e31
 8003e9c:	08003fad 	.word	0x08003fad
 8003ea0:	682b      	ldr	r3, [r5, #0]
 8003ea2:	1d1a      	adds	r2, r3, #4
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	602a      	str	r2, [r5, #0]
 8003ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e0a4      	b.n	8003ffe <_printf_i+0x1f6>
 8003eb4:	6820      	ldr	r0, [r4, #0]
 8003eb6:	6829      	ldr	r1, [r5, #0]
 8003eb8:	0606      	lsls	r6, r0, #24
 8003eba:	f101 0304 	add.w	r3, r1, #4
 8003ebe:	d50a      	bpl.n	8003ed6 <_printf_i+0xce>
 8003ec0:	680e      	ldr	r6, [r1, #0]
 8003ec2:	602b      	str	r3, [r5, #0]
 8003ec4:	2e00      	cmp	r6, #0
 8003ec6:	da03      	bge.n	8003ed0 <_printf_i+0xc8>
 8003ec8:	232d      	movs	r3, #45	; 0x2d
 8003eca:	4276      	negs	r6, r6
 8003ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ed0:	230a      	movs	r3, #10
 8003ed2:	485e      	ldr	r0, [pc, #376]	; (800404c <_printf_i+0x244>)
 8003ed4:	e019      	b.n	8003f0a <_printf_i+0x102>
 8003ed6:	680e      	ldr	r6, [r1, #0]
 8003ed8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003edc:	602b      	str	r3, [r5, #0]
 8003ede:	bf18      	it	ne
 8003ee0:	b236      	sxthne	r6, r6
 8003ee2:	e7ef      	b.n	8003ec4 <_printf_i+0xbc>
 8003ee4:	682b      	ldr	r3, [r5, #0]
 8003ee6:	6820      	ldr	r0, [r4, #0]
 8003ee8:	1d19      	adds	r1, r3, #4
 8003eea:	6029      	str	r1, [r5, #0]
 8003eec:	0601      	lsls	r1, r0, #24
 8003eee:	d501      	bpl.n	8003ef4 <_printf_i+0xec>
 8003ef0:	681e      	ldr	r6, [r3, #0]
 8003ef2:	e002      	b.n	8003efa <_printf_i+0xf2>
 8003ef4:	0646      	lsls	r6, r0, #25
 8003ef6:	d5fb      	bpl.n	8003ef0 <_printf_i+0xe8>
 8003ef8:	881e      	ldrh	r6, [r3, #0]
 8003efa:	2f6f      	cmp	r7, #111	; 0x6f
 8003efc:	bf0c      	ite	eq
 8003efe:	2308      	moveq	r3, #8
 8003f00:	230a      	movne	r3, #10
 8003f02:	4852      	ldr	r0, [pc, #328]	; (800404c <_printf_i+0x244>)
 8003f04:	2100      	movs	r1, #0
 8003f06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f0a:	6865      	ldr	r5, [r4, #4]
 8003f0c:	2d00      	cmp	r5, #0
 8003f0e:	bfa8      	it	ge
 8003f10:	6821      	ldrge	r1, [r4, #0]
 8003f12:	60a5      	str	r5, [r4, #8]
 8003f14:	bfa4      	itt	ge
 8003f16:	f021 0104 	bicge.w	r1, r1, #4
 8003f1a:	6021      	strge	r1, [r4, #0]
 8003f1c:	b90e      	cbnz	r6, 8003f22 <_printf_i+0x11a>
 8003f1e:	2d00      	cmp	r5, #0
 8003f20:	d04d      	beq.n	8003fbe <_printf_i+0x1b6>
 8003f22:	4615      	mov	r5, r2
 8003f24:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f28:	fb03 6711 	mls	r7, r3, r1, r6
 8003f2c:	5dc7      	ldrb	r7, [r0, r7]
 8003f2e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f32:	4637      	mov	r7, r6
 8003f34:	42bb      	cmp	r3, r7
 8003f36:	460e      	mov	r6, r1
 8003f38:	d9f4      	bls.n	8003f24 <_printf_i+0x11c>
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d10b      	bne.n	8003f56 <_printf_i+0x14e>
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	07de      	lsls	r6, r3, #31
 8003f42:	d508      	bpl.n	8003f56 <_printf_i+0x14e>
 8003f44:	6923      	ldr	r3, [r4, #16]
 8003f46:	6861      	ldr	r1, [r4, #4]
 8003f48:	4299      	cmp	r1, r3
 8003f4a:	bfde      	ittt	le
 8003f4c:	2330      	movle	r3, #48	; 0x30
 8003f4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f56:	1b52      	subs	r2, r2, r5
 8003f58:	6122      	str	r2, [r4, #16]
 8003f5a:	464b      	mov	r3, r9
 8003f5c:	4621      	mov	r1, r4
 8003f5e:	4640      	mov	r0, r8
 8003f60:	f8cd a000 	str.w	sl, [sp]
 8003f64:	aa03      	add	r2, sp, #12
 8003f66:	f7ff fedf 	bl	8003d28 <_printf_common>
 8003f6a:	3001      	adds	r0, #1
 8003f6c:	d14c      	bne.n	8004008 <_printf_i+0x200>
 8003f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f72:	b004      	add	sp, #16
 8003f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f78:	4834      	ldr	r0, [pc, #208]	; (800404c <_printf_i+0x244>)
 8003f7a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003f7e:	6829      	ldr	r1, [r5, #0]
 8003f80:	6823      	ldr	r3, [r4, #0]
 8003f82:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f86:	6029      	str	r1, [r5, #0]
 8003f88:	061d      	lsls	r5, r3, #24
 8003f8a:	d514      	bpl.n	8003fb6 <_printf_i+0x1ae>
 8003f8c:	07df      	lsls	r7, r3, #31
 8003f8e:	bf44      	itt	mi
 8003f90:	f043 0320 	orrmi.w	r3, r3, #32
 8003f94:	6023      	strmi	r3, [r4, #0]
 8003f96:	b91e      	cbnz	r6, 8003fa0 <_printf_i+0x198>
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	f023 0320 	bic.w	r3, r3, #32
 8003f9e:	6023      	str	r3, [r4, #0]
 8003fa0:	2310      	movs	r3, #16
 8003fa2:	e7af      	b.n	8003f04 <_printf_i+0xfc>
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	f043 0320 	orr.w	r3, r3, #32
 8003faa:	6023      	str	r3, [r4, #0]
 8003fac:	2378      	movs	r3, #120	; 0x78
 8003fae:	4828      	ldr	r0, [pc, #160]	; (8004050 <_printf_i+0x248>)
 8003fb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fb4:	e7e3      	b.n	8003f7e <_printf_i+0x176>
 8003fb6:	0659      	lsls	r1, r3, #25
 8003fb8:	bf48      	it	mi
 8003fba:	b2b6      	uxthmi	r6, r6
 8003fbc:	e7e6      	b.n	8003f8c <_printf_i+0x184>
 8003fbe:	4615      	mov	r5, r2
 8003fc0:	e7bb      	b.n	8003f3a <_printf_i+0x132>
 8003fc2:	682b      	ldr	r3, [r5, #0]
 8003fc4:	6826      	ldr	r6, [r4, #0]
 8003fc6:	1d18      	adds	r0, r3, #4
 8003fc8:	6961      	ldr	r1, [r4, #20]
 8003fca:	6028      	str	r0, [r5, #0]
 8003fcc:	0635      	lsls	r5, r6, #24
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	d501      	bpl.n	8003fd6 <_printf_i+0x1ce>
 8003fd2:	6019      	str	r1, [r3, #0]
 8003fd4:	e002      	b.n	8003fdc <_printf_i+0x1d4>
 8003fd6:	0670      	lsls	r0, r6, #25
 8003fd8:	d5fb      	bpl.n	8003fd2 <_printf_i+0x1ca>
 8003fda:	8019      	strh	r1, [r3, #0]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	4615      	mov	r5, r2
 8003fe0:	6123      	str	r3, [r4, #16]
 8003fe2:	e7ba      	b.n	8003f5a <_printf_i+0x152>
 8003fe4:	682b      	ldr	r3, [r5, #0]
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	1d1a      	adds	r2, r3, #4
 8003fea:	602a      	str	r2, [r5, #0]
 8003fec:	681d      	ldr	r5, [r3, #0]
 8003fee:	6862      	ldr	r2, [r4, #4]
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	f000 f82f 	bl	8004054 <memchr>
 8003ff6:	b108      	cbz	r0, 8003ffc <_printf_i+0x1f4>
 8003ff8:	1b40      	subs	r0, r0, r5
 8003ffa:	6060      	str	r0, [r4, #4]
 8003ffc:	6863      	ldr	r3, [r4, #4]
 8003ffe:	6123      	str	r3, [r4, #16]
 8004000:	2300      	movs	r3, #0
 8004002:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004006:	e7a8      	b.n	8003f5a <_printf_i+0x152>
 8004008:	462a      	mov	r2, r5
 800400a:	4649      	mov	r1, r9
 800400c:	4640      	mov	r0, r8
 800400e:	6923      	ldr	r3, [r4, #16]
 8004010:	47d0      	blx	sl
 8004012:	3001      	adds	r0, #1
 8004014:	d0ab      	beq.n	8003f6e <_printf_i+0x166>
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	079b      	lsls	r3, r3, #30
 800401a:	d413      	bmi.n	8004044 <_printf_i+0x23c>
 800401c:	68e0      	ldr	r0, [r4, #12]
 800401e:	9b03      	ldr	r3, [sp, #12]
 8004020:	4298      	cmp	r0, r3
 8004022:	bfb8      	it	lt
 8004024:	4618      	movlt	r0, r3
 8004026:	e7a4      	b.n	8003f72 <_printf_i+0x16a>
 8004028:	2301      	movs	r3, #1
 800402a:	4632      	mov	r2, r6
 800402c:	4649      	mov	r1, r9
 800402e:	4640      	mov	r0, r8
 8004030:	47d0      	blx	sl
 8004032:	3001      	adds	r0, #1
 8004034:	d09b      	beq.n	8003f6e <_printf_i+0x166>
 8004036:	3501      	adds	r5, #1
 8004038:	68e3      	ldr	r3, [r4, #12]
 800403a:	9903      	ldr	r1, [sp, #12]
 800403c:	1a5b      	subs	r3, r3, r1
 800403e:	42ab      	cmp	r3, r5
 8004040:	dcf2      	bgt.n	8004028 <_printf_i+0x220>
 8004042:	e7eb      	b.n	800401c <_printf_i+0x214>
 8004044:	2500      	movs	r5, #0
 8004046:	f104 0619 	add.w	r6, r4, #25
 800404a:	e7f5      	b.n	8004038 <_printf_i+0x230>
 800404c:	08004945 	.word	0x08004945
 8004050:	08004956 	.word	0x08004956

08004054 <memchr>:
 8004054:	4603      	mov	r3, r0
 8004056:	b510      	push	{r4, lr}
 8004058:	b2c9      	uxtb	r1, r1
 800405a:	4402      	add	r2, r0
 800405c:	4293      	cmp	r3, r2
 800405e:	4618      	mov	r0, r3
 8004060:	d101      	bne.n	8004066 <memchr+0x12>
 8004062:	2000      	movs	r0, #0
 8004064:	e003      	b.n	800406e <memchr+0x1a>
 8004066:	7804      	ldrb	r4, [r0, #0]
 8004068:	3301      	adds	r3, #1
 800406a:	428c      	cmp	r4, r1
 800406c:	d1f6      	bne.n	800405c <memchr+0x8>
 800406e:	bd10      	pop	{r4, pc}

08004070 <memmove>:
 8004070:	4288      	cmp	r0, r1
 8004072:	b510      	push	{r4, lr}
 8004074:	eb01 0402 	add.w	r4, r1, r2
 8004078:	d902      	bls.n	8004080 <memmove+0x10>
 800407a:	4284      	cmp	r4, r0
 800407c:	4623      	mov	r3, r4
 800407e:	d807      	bhi.n	8004090 <memmove+0x20>
 8004080:	1e43      	subs	r3, r0, #1
 8004082:	42a1      	cmp	r1, r4
 8004084:	d008      	beq.n	8004098 <memmove+0x28>
 8004086:	f811 2b01 	ldrb.w	r2, [r1], #1
 800408a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800408e:	e7f8      	b.n	8004082 <memmove+0x12>
 8004090:	4601      	mov	r1, r0
 8004092:	4402      	add	r2, r0
 8004094:	428a      	cmp	r2, r1
 8004096:	d100      	bne.n	800409a <memmove+0x2a>
 8004098:	bd10      	pop	{r4, pc}
 800409a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800409e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040a2:	e7f7      	b.n	8004094 <memmove+0x24>

080040a4 <_free_r>:
 80040a4:	b538      	push	{r3, r4, r5, lr}
 80040a6:	4605      	mov	r5, r0
 80040a8:	2900      	cmp	r1, #0
 80040aa:	d040      	beq.n	800412e <_free_r+0x8a>
 80040ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040b0:	1f0c      	subs	r4, r1, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	bfb8      	it	lt
 80040b6:	18e4      	addlt	r4, r4, r3
 80040b8:	f000 f910 	bl	80042dc <__malloc_lock>
 80040bc:	4a1c      	ldr	r2, [pc, #112]	; (8004130 <_free_r+0x8c>)
 80040be:	6813      	ldr	r3, [r2, #0]
 80040c0:	b933      	cbnz	r3, 80040d0 <_free_r+0x2c>
 80040c2:	6063      	str	r3, [r4, #4]
 80040c4:	6014      	str	r4, [r2, #0]
 80040c6:	4628      	mov	r0, r5
 80040c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040cc:	f000 b90c 	b.w	80042e8 <__malloc_unlock>
 80040d0:	42a3      	cmp	r3, r4
 80040d2:	d908      	bls.n	80040e6 <_free_r+0x42>
 80040d4:	6820      	ldr	r0, [r4, #0]
 80040d6:	1821      	adds	r1, r4, r0
 80040d8:	428b      	cmp	r3, r1
 80040da:	bf01      	itttt	eq
 80040dc:	6819      	ldreq	r1, [r3, #0]
 80040de:	685b      	ldreq	r3, [r3, #4]
 80040e0:	1809      	addeq	r1, r1, r0
 80040e2:	6021      	streq	r1, [r4, #0]
 80040e4:	e7ed      	b.n	80040c2 <_free_r+0x1e>
 80040e6:	461a      	mov	r2, r3
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	b10b      	cbz	r3, 80040f0 <_free_r+0x4c>
 80040ec:	42a3      	cmp	r3, r4
 80040ee:	d9fa      	bls.n	80040e6 <_free_r+0x42>
 80040f0:	6811      	ldr	r1, [r2, #0]
 80040f2:	1850      	adds	r0, r2, r1
 80040f4:	42a0      	cmp	r0, r4
 80040f6:	d10b      	bne.n	8004110 <_free_r+0x6c>
 80040f8:	6820      	ldr	r0, [r4, #0]
 80040fa:	4401      	add	r1, r0
 80040fc:	1850      	adds	r0, r2, r1
 80040fe:	4283      	cmp	r3, r0
 8004100:	6011      	str	r1, [r2, #0]
 8004102:	d1e0      	bne.n	80040c6 <_free_r+0x22>
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	4401      	add	r1, r0
 800410a:	6011      	str	r1, [r2, #0]
 800410c:	6053      	str	r3, [r2, #4]
 800410e:	e7da      	b.n	80040c6 <_free_r+0x22>
 8004110:	d902      	bls.n	8004118 <_free_r+0x74>
 8004112:	230c      	movs	r3, #12
 8004114:	602b      	str	r3, [r5, #0]
 8004116:	e7d6      	b.n	80040c6 <_free_r+0x22>
 8004118:	6820      	ldr	r0, [r4, #0]
 800411a:	1821      	adds	r1, r4, r0
 800411c:	428b      	cmp	r3, r1
 800411e:	bf01      	itttt	eq
 8004120:	6819      	ldreq	r1, [r3, #0]
 8004122:	685b      	ldreq	r3, [r3, #4]
 8004124:	1809      	addeq	r1, r1, r0
 8004126:	6021      	streq	r1, [r4, #0]
 8004128:	6063      	str	r3, [r4, #4]
 800412a:	6054      	str	r4, [r2, #4]
 800412c:	e7cb      	b.n	80040c6 <_free_r+0x22>
 800412e:	bd38      	pop	{r3, r4, r5, pc}
 8004130:	20000210 	.word	0x20000210

08004134 <sbrk_aligned>:
 8004134:	b570      	push	{r4, r5, r6, lr}
 8004136:	4e0e      	ldr	r6, [pc, #56]	; (8004170 <sbrk_aligned+0x3c>)
 8004138:	460c      	mov	r4, r1
 800413a:	6831      	ldr	r1, [r6, #0]
 800413c:	4605      	mov	r5, r0
 800413e:	b911      	cbnz	r1, 8004146 <sbrk_aligned+0x12>
 8004140:	f000 f8bc 	bl	80042bc <_sbrk_r>
 8004144:	6030      	str	r0, [r6, #0]
 8004146:	4621      	mov	r1, r4
 8004148:	4628      	mov	r0, r5
 800414a:	f000 f8b7 	bl	80042bc <_sbrk_r>
 800414e:	1c43      	adds	r3, r0, #1
 8004150:	d00a      	beq.n	8004168 <sbrk_aligned+0x34>
 8004152:	1cc4      	adds	r4, r0, #3
 8004154:	f024 0403 	bic.w	r4, r4, #3
 8004158:	42a0      	cmp	r0, r4
 800415a:	d007      	beq.n	800416c <sbrk_aligned+0x38>
 800415c:	1a21      	subs	r1, r4, r0
 800415e:	4628      	mov	r0, r5
 8004160:	f000 f8ac 	bl	80042bc <_sbrk_r>
 8004164:	3001      	adds	r0, #1
 8004166:	d101      	bne.n	800416c <sbrk_aligned+0x38>
 8004168:	f04f 34ff 	mov.w	r4, #4294967295
 800416c:	4620      	mov	r0, r4
 800416e:	bd70      	pop	{r4, r5, r6, pc}
 8004170:	20000214 	.word	0x20000214

08004174 <_malloc_r>:
 8004174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004178:	1ccd      	adds	r5, r1, #3
 800417a:	f025 0503 	bic.w	r5, r5, #3
 800417e:	3508      	adds	r5, #8
 8004180:	2d0c      	cmp	r5, #12
 8004182:	bf38      	it	cc
 8004184:	250c      	movcc	r5, #12
 8004186:	2d00      	cmp	r5, #0
 8004188:	4607      	mov	r7, r0
 800418a:	db01      	blt.n	8004190 <_malloc_r+0x1c>
 800418c:	42a9      	cmp	r1, r5
 800418e:	d905      	bls.n	800419c <_malloc_r+0x28>
 8004190:	230c      	movs	r3, #12
 8004192:	2600      	movs	r6, #0
 8004194:	603b      	str	r3, [r7, #0]
 8004196:	4630      	mov	r0, r6
 8004198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800419c:	4e2e      	ldr	r6, [pc, #184]	; (8004258 <_malloc_r+0xe4>)
 800419e:	f000 f89d 	bl	80042dc <__malloc_lock>
 80041a2:	6833      	ldr	r3, [r6, #0]
 80041a4:	461c      	mov	r4, r3
 80041a6:	bb34      	cbnz	r4, 80041f6 <_malloc_r+0x82>
 80041a8:	4629      	mov	r1, r5
 80041aa:	4638      	mov	r0, r7
 80041ac:	f7ff ffc2 	bl	8004134 <sbrk_aligned>
 80041b0:	1c43      	adds	r3, r0, #1
 80041b2:	4604      	mov	r4, r0
 80041b4:	d14d      	bne.n	8004252 <_malloc_r+0xde>
 80041b6:	6834      	ldr	r4, [r6, #0]
 80041b8:	4626      	mov	r6, r4
 80041ba:	2e00      	cmp	r6, #0
 80041bc:	d140      	bne.n	8004240 <_malloc_r+0xcc>
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	4631      	mov	r1, r6
 80041c2:	4638      	mov	r0, r7
 80041c4:	eb04 0803 	add.w	r8, r4, r3
 80041c8:	f000 f878 	bl	80042bc <_sbrk_r>
 80041cc:	4580      	cmp	r8, r0
 80041ce:	d13a      	bne.n	8004246 <_malloc_r+0xd2>
 80041d0:	6821      	ldr	r1, [r4, #0]
 80041d2:	3503      	adds	r5, #3
 80041d4:	1a6d      	subs	r5, r5, r1
 80041d6:	f025 0503 	bic.w	r5, r5, #3
 80041da:	3508      	adds	r5, #8
 80041dc:	2d0c      	cmp	r5, #12
 80041de:	bf38      	it	cc
 80041e0:	250c      	movcc	r5, #12
 80041e2:	4638      	mov	r0, r7
 80041e4:	4629      	mov	r1, r5
 80041e6:	f7ff ffa5 	bl	8004134 <sbrk_aligned>
 80041ea:	3001      	adds	r0, #1
 80041ec:	d02b      	beq.n	8004246 <_malloc_r+0xd2>
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	442b      	add	r3, r5
 80041f2:	6023      	str	r3, [r4, #0]
 80041f4:	e00e      	b.n	8004214 <_malloc_r+0xa0>
 80041f6:	6822      	ldr	r2, [r4, #0]
 80041f8:	1b52      	subs	r2, r2, r5
 80041fa:	d41e      	bmi.n	800423a <_malloc_r+0xc6>
 80041fc:	2a0b      	cmp	r2, #11
 80041fe:	d916      	bls.n	800422e <_malloc_r+0xba>
 8004200:	1961      	adds	r1, r4, r5
 8004202:	42a3      	cmp	r3, r4
 8004204:	6025      	str	r5, [r4, #0]
 8004206:	bf18      	it	ne
 8004208:	6059      	strne	r1, [r3, #4]
 800420a:	6863      	ldr	r3, [r4, #4]
 800420c:	bf08      	it	eq
 800420e:	6031      	streq	r1, [r6, #0]
 8004210:	5162      	str	r2, [r4, r5]
 8004212:	604b      	str	r3, [r1, #4]
 8004214:	4638      	mov	r0, r7
 8004216:	f104 060b 	add.w	r6, r4, #11
 800421a:	f000 f865 	bl	80042e8 <__malloc_unlock>
 800421e:	f026 0607 	bic.w	r6, r6, #7
 8004222:	1d23      	adds	r3, r4, #4
 8004224:	1af2      	subs	r2, r6, r3
 8004226:	d0b6      	beq.n	8004196 <_malloc_r+0x22>
 8004228:	1b9b      	subs	r3, r3, r6
 800422a:	50a3      	str	r3, [r4, r2]
 800422c:	e7b3      	b.n	8004196 <_malloc_r+0x22>
 800422e:	6862      	ldr	r2, [r4, #4]
 8004230:	42a3      	cmp	r3, r4
 8004232:	bf0c      	ite	eq
 8004234:	6032      	streq	r2, [r6, #0]
 8004236:	605a      	strne	r2, [r3, #4]
 8004238:	e7ec      	b.n	8004214 <_malloc_r+0xa0>
 800423a:	4623      	mov	r3, r4
 800423c:	6864      	ldr	r4, [r4, #4]
 800423e:	e7b2      	b.n	80041a6 <_malloc_r+0x32>
 8004240:	4634      	mov	r4, r6
 8004242:	6876      	ldr	r6, [r6, #4]
 8004244:	e7b9      	b.n	80041ba <_malloc_r+0x46>
 8004246:	230c      	movs	r3, #12
 8004248:	4638      	mov	r0, r7
 800424a:	603b      	str	r3, [r7, #0]
 800424c:	f000 f84c 	bl	80042e8 <__malloc_unlock>
 8004250:	e7a1      	b.n	8004196 <_malloc_r+0x22>
 8004252:	6025      	str	r5, [r4, #0]
 8004254:	e7de      	b.n	8004214 <_malloc_r+0xa0>
 8004256:	bf00      	nop
 8004258:	20000210 	.word	0x20000210

0800425c <_realloc_r>:
 800425c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004260:	4680      	mov	r8, r0
 8004262:	4614      	mov	r4, r2
 8004264:	460e      	mov	r6, r1
 8004266:	b921      	cbnz	r1, 8004272 <_realloc_r+0x16>
 8004268:	4611      	mov	r1, r2
 800426a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800426e:	f7ff bf81 	b.w	8004174 <_malloc_r>
 8004272:	b92a      	cbnz	r2, 8004280 <_realloc_r+0x24>
 8004274:	f7ff ff16 	bl	80040a4 <_free_r>
 8004278:	4625      	mov	r5, r4
 800427a:	4628      	mov	r0, r5
 800427c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004280:	f000 f838 	bl	80042f4 <_malloc_usable_size_r>
 8004284:	4284      	cmp	r4, r0
 8004286:	4607      	mov	r7, r0
 8004288:	d802      	bhi.n	8004290 <_realloc_r+0x34>
 800428a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800428e:	d812      	bhi.n	80042b6 <_realloc_r+0x5a>
 8004290:	4621      	mov	r1, r4
 8004292:	4640      	mov	r0, r8
 8004294:	f7ff ff6e 	bl	8004174 <_malloc_r>
 8004298:	4605      	mov	r5, r0
 800429a:	2800      	cmp	r0, #0
 800429c:	d0ed      	beq.n	800427a <_realloc_r+0x1e>
 800429e:	42bc      	cmp	r4, r7
 80042a0:	4622      	mov	r2, r4
 80042a2:	4631      	mov	r1, r6
 80042a4:	bf28      	it	cs
 80042a6:	463a      	movcs	r2, r7
 80042a8:	f7ff fbac 	bl	8003a04 <memcpy>
 80042ac:	4631      	mov	r1, r6
 80042ae:	4640      	mov	r0, r8
 80042b0:	f7ff fef8 	bl	80040a4 <_free_r>
 80042b4:	e7e1      	b.n	800427a <_realloc_r+0x1e>
 80042b6:	4635      	mov	r5, r6
 80042b8:	e7df      	b.n	800427a <_realloc_r+0x1e>
	...

080042bc <_sbrk_r>:
 80042bc:	b538      	push	{r3, r4, r5, lr}
 80042be:	2300      	movs	r3, #0
 80042c0:	4d05      	ldr	r5, [pc, #20]	; (80042d8 <_sbrk_r+0x1c>)
 80042c2:	4604      	mov	r4, r0
 80042c4:	4608      	mov	r0, r1
 80042c6:	602b      	str	r3, [r5, #0]
 80042c8:	f7fd fc9c 	bl	8001c04 <_sbrk>
 80042cc:	1c43      	adds	r3, r0, #1
 80042ce:	d102      	bne.n	80042d6 <_sbrk_r+0x1a>
 80042d0:	682b      	ldr	r3, [r5, #0]
 80042d2:	b103      	cbz	r3, 80042d6 <_sbrk_r+0x1a>
 80042d4:	6023      	str	r3, [r4, #0]
 80042d6:	bd38      	pop	{r3, r4, r5, pc}
 80042d8:	20000218 	.word	0x20000218

080042dc <__malloc_lock>:
 80042dc:	4801      	ldr	r0, [pc, #4]	; (80042e4 <__malloc_lock+0x8>)
 80042de:	f000 b811 	b.w	8004304 <__retarget_lock_acquire_recursive>
 80042e2:	bf00      	nop
 80042e4:	2000021c 	.word	0x2000021c

080042e8 <__malloc_unlock>:
 80042e8:	4801      	ldr	r0, [pc, #4]	; (80042f0 <__malloc_unlock+0x8>)
 80042ea:	f000 b80c 	b.w	8004306 <__retarget_lock_release_recursive>
 80042ee:	bf00      	nop
 80042f0:	2000021c 	.word	0x2000021c

080042f4 <_malloc_usable_size_r>:
 80042f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042f8:	1f18      	subs	r0, r3, #4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	bfbc      	itt	lt
 80042fe:	580b      	ldrlt	r3, [r1, r0]
 8004300:	18c0      	addlt	r0, r0, r3
 8004302:	4770      	bx	lr

08004304 <__retarget_lock_acquire_recursive>:
 8004304:	4770      	bx	lr

08004306 <__retarget_lock_release_recursive>:
 8004306:	4770      	bx	lr

08004308 <_init>:
 8004308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430a:	bf00      	nop
 800430c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800430e:	bc08      	pop	{r3}
 8004310:	469e      	mov	lr, r3
 8004312:	4770      	bx	lr

08004314 <_fini>:
 8004314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004316:	bf00      	nop
 8004318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800431a:	bc08      	pop	{r3}
 800431c:	469e      	mov	lr, r3
 800431e:	4770      	bx	lr

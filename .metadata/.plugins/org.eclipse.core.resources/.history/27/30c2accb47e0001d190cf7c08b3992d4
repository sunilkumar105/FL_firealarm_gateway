/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "MY_NRF24.h"
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
void Transmit_Update(void);
void NRF_init_as_node(void);
void Switch_to_Receiver_mode(void);
void untill_alarm_reset(void);
void Switch_to_Transmitt_mode(void);
void alarm_light_and_hooter(bool a);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint64_t pipe_addr = 0x00000000;
char my_tx_data[] = "001,1"; // data to be transmitted when smoke detected
char received_data_from_server[7]; //data which will be received from the server
char trim_received_data_from_server[6];
char read_node_id[4];
char read_node_status[2];
bool manaul_turn_alarm_off = false;

uint8_t node_status[1];
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */

	NRF_init_as_node(); //init NRF
	//set hooter light and alarm low
	alarm_light_and_hooter(0);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (!HAL_GPIO_ReadPin(BTN_pin_GPIO_Port, BTN_pin_Pin)) {
			alarm_light_and_hooter(1);
			Transmit_Update();
			Switch_to_Receiver_mode();
			untill_alarm_reset(); //wait unitill either stopped by server or from input push button
			Switch_to_Transmitt_mode();
		}

		HAL_GPIO_TogglePin(LED_pin_GPIO_Port, LED_pin_Pin);
		HAL_Delay(50);
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 15;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_pin_GPIO_Port, LED_pin_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ALARM_HOOTER_pin_Pin|ALARM_LED_pin_Pin|CSN_pin_Pin|CE_pin_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BTN_pin_Pin */
  GPIO_InitStruct.Pin = BTN_pin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BTN_pin_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : MANUAL_STOP_ALARM_pin_Pin */
  GPIO_InitStruct.Pin = MANUAL_STOP_ALARM_pin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(MANUAL_STOP_ALARM_pin_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LED_pin_Pin */
  GPIO_InitStruct.Pin = LED_pin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_pin_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : ALARM_HOOTER_pin_Pin ALARM_LED_pin_Pin CSN_pin_Pin CE_pin_Pin */
  GPIO_InitStruct.Pin = ALARM_HOOTER_pin_Pin|ALARM_LED_pin_Pin|CSN_pin_Pin|CE_pin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void NRF_init_as_node(void) {
	NRF24_begin(CE_pin_GPIO_Port, CSN_pin_Pin, CE_pin_Pin, hspi1);
	nrf24_DebugUART_Init(huart2);
	//*Transmitt with no ack*//
	NRF24_openWritingPipe(pipe_addr);
	NRF24_setAutoAck(true);
	NRF24_setChannel(1);
	NRF24_setPayloadSize(32);
	printRadioSettings();
	NRF24_stopListening();
}
void Transmit_Update(void) {
	for (int i = 0; i < +10; i++) {
		if (!NRF24_write(my_tx_data, 32)) {
			NRF24_write(my_tx_data, 32);
			HAL_UART_Transmit(&huart2,
					(uint8_t*) "Transmitt_update waiting for ack\n",
					strlen("Transmitt_update waiting for ack\n"), 10);
			HAL_Delay(200);
		} else {
			HAL_UART_Transmit(&huart2,
					(uint8_t*) "Transmitt_update Transmitted successfully\n",
					strlen("Transmitt_update Transmitted successfully\n"), 10);
			HAL_Delay(100);
			break;
		}
	}
}
void Switch_to_Receiver_mode(void) {
	NRF24_setChannel(1);
	pipe_addr = 0x00000001;
	NRF24_openReadingPipe(0, pipe_addr);
	NRF24_startListening();
}

void untill_alarm_reset(void) {
	while (1) {
		if (NRF24_available()) {
			NRF24_read(received_data_from_server, 32); //store received data
			received_data_from_server[6] = '\r';
			received_data_from_server[7] = '\n';
			HAL_UART_Transmit(&huart2, (uint8_t*) received_data_from_server,
					sizeof(received_data_from_server), 10); //send data to debug port
			//check if id and val matches, otherwise continue
			memcpy(trim_received_data_from_server, &received_data_from_server,
					5);
			HAL_UART_Transmit(&huart2,
					(uint8_t*) trim_received_data_from_server, 5, 10); //send trimmed received data
			memcpy(read_node_id, &trim_received_data_from_server, 3); //get id of the node
			//read_node_status[1] = trim_received_data_from_server[5];  //get status of node
			//HAL_UART_Transmit(&huart2, (uint8_t*) read_node_id, 3,10); //send read node id
			if (strcmp((char*) received_data_from_server, "001,0") == 0) { //compare trimmed data and break if it is same
				alarm_light_and_hooter(0);
				break;
			}
			if (!HAL_GPIO_ReadPin(MANUAL_STOP_ALARM_pin_GPIO_Port,
			MANUAL_STOP_ALARM_pin_Pin)) {
				manaul_turn_alarm_off = true;
			}
			if (manaul_turn_alarm_off) {
				alarm_light_and_hooter(0);
				HAL_UART_Transmit(&huart2,
						(uint8_t*) "Alarm manually turned off\n",
						strlen("Alarm manually turned off\n"), 10);
				manaul_turn_alarm_off = 0;
				break;
			}
		}
		if (!HAL_GPIO_ReadPin(MANUAL_STOP_ALARM_pin_GPIO_Port,
		MANUAL_STOP_ALARM_pin_Pin)) {
			manaul_turn_alarm_off = true;
		}
		if (manaul_turn_alarm_off) {
			alarm_light_and_hooter(0);
			HAL_UART_Transmit(&huart2, (uint8_t*) "Alarm manually turned off\n",
					strlen("Alarm manually turned off\n"), 10);
			manaul_turn_alarm_off = 0;
			break;
		}
		HAL_UART_Transmit(&huart2,
				(uint8_t*) "waiting for response from server\n",
				strlen("waiting for response from server\n"), 10);
		HAL_GPIO_TogglePin(LED_pin_GPIO_Port, LED_pin_Pin);
		HAL_Delay(100);
	}
}
void Switch_to_Transmitt_mode(void) {
	NRF24_setChannel(1);
//	pipe_addr = 0x0011223344AA;
	NRF24_stopListening();
	NRF24_openWritingPipe(pipe_addr);
	NRF24_setChannel(1);
}
void alarm_light_and_hooter(bool a) {
	if (a == true) {
		HAL_GPIO_WritePin(ALARM_HOOTER_pin_GPIO_Port, ALARM_HOOTER_pin_Pin, 1);
		HAL_GPIO_WritePin(ALARM_LED_pin_GPIO_Port, ALARM_LED_pin_Pin, 1);
	} else if (a == false) {
		HAL_GPIO_WritePin(ALARM_HOOTER_pin_GPIO_Port, ALARM_HOOTER_pin_Pin, 0);
		HAL_GPIO_WritePin(ALARM_LED_pin_GPIO_Port, ALARM_LED_pin_Pin, 0);
	}
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_TogglePin(LED_pin_GPIO_Port, LED_pin_Pin);
		HAL_Delay(2000);
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
